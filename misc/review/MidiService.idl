// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App API and should be used
// in your Windows application via an official binary distribution.
// Further information: https://github.com/microsoft/MIDI/
// ============================================================================

#include "namespace_defines.h"
#include "midl_defines.h"
MIDI_IDL_IMPORT

import "MidiServiceTransportPluginInfo.idl";
import "MidiServiceMessageProcessingPluginInfo.idl";
import "MidiServicePingResponseSummary.idl";

import "MidiServiceSessionInfo.idl";

import "MidiServiceLoopbackEndpointCreationResult.idl";
import "MidiServiceLoopbackEndpointDefinition.idl";

import "IMidiServiceTransportPluginConfiguration.idl";
import "IMidiServiceMessageProcessingPluginConfiguration.idl";
import "MidiServiceConfigurationResponse.idl";

namespace MIDI_MIDL_NAMESPACE
{
    MIDI_API_CONTRACT_v1
    [default_interface]
    static runtimeclass MidiService
    {
        static MidiServicePingResponseSummary PingService(UInt8 pingCount);
        static MidiServicePingResponseSummary PingService(UInt8 pingCount, UInt32 timeoutMilliseconds);

        static IVector<MidiServiceTransportPluginInfo> GetInstalledTransportPlugins();
        static IVector<MidiServiceMessageProcessingPluginInfo> GetInstalledMessageProcessingPlugins();

        static Boolean IsAvailable();

        static IVector<MidiServiceSessionInfo> GetActiveSessions();

        static MidiServiceLoopbackEndpointCreationResult CreateTemporaryLoopbackEndpoints(
            Guid associationId, 
            MidiServiceLoopbackEndpointDefinition endpointDefinitionA, 
            MidiServiceLoopbackEndpointDefinition endpointDefinitionB);

        static Boolean RemoveTemporaryLoopbackEndpoints(Guid associationId);

        static MidiServiceConfigurationResponse UpdateTransportPluginConfiguration(
            IMidiServiceTransportPluginConfiguration configurationUpdate);

        static MidiServiceConfigurationResponse UpdateProcessingPluginConfiguration(
            IMidiServiceMessageProcessingPluginConfiguration configurationUpdate);
    }
}


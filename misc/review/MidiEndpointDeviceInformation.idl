// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App API and should be used
// in your Windows application via an official binary distribution.
// Further information: https://github.com/microsoft/MIDI/
// ============================================================================

#include "namespace_defines.h"
#include "midl_defines.h"
MIDI_IDL_IMPORT

import "MidiGroupTerminalBlock.idl";
import "MidiProtocolEnum.idl";
import "MidiEndpointNativeDataFormatEnum.idl";
import "MidiEndpointDevicePurposeEnum.idl";
import "MidiFunctionBlock.idl";

import "MidiEndpointDeviceInformationSortOrderEnum.idl";
import "MidiEndpointDeviceInformationFiltersEnum.idl";

namespace MIDI_MIDL_NAMESPACE
{
    MIDI_API_CONTRACT_v1
    [default_interface]
    runtimeclass MidiEndpointDeviceInformation
    {
        static MidiEndpointDeviceInformation CreateFromId(String id);

        static IVectorView<MidiEndpointDeviceInformation> FindAll();
        static IVectorView<MidiEndpointDeviceInformation> FindAll(MidiEndpointDeviceInformationSortOrder sortOrder);
        static IVectorView<MidiEndpointDeviceInformation> FindAll(MidiEndpointDeviceInformationSortOrder sortOrder, MidiEndpointDeviceInformationFilters endpointFilters);

        static String DiagnosticsLoopbackAEndpointId{ get; };
        static String DiagnosticsLoopbackBEndpointId{ get; };

        static String EndpointInterfaceClass{ get; };

        static IVectorView<String> GetAdditionalPropertiesList();

        static Boolean DeviceMatchesFilter(MidiEndpointDeviceInformation deviceInformation, MidiEndpointDeviceInformationFilters endpointFilters);

        String Id { get; };
        
        Windows.Devices.Enumeration.DeviceInformation GetParentDeviceInformation();
        Windows.Devices.Enumeration.DeviceInformation GetContainerInformation();

        Guid ContainerId{ get; };
        String DeviceInstanceId{ get; };

        String Name{ get; };
        String TransportSuppliedName{ get; };

        UInt8 SpecificationVersionMajor{ get; };
        UInt8 SpecificationVersionMinor{ get; };
        Windows.Foundation.DateTime EndpointInformationLastUpdateTime{ get; };

        String ProductInstanceId{ get; };
        Windows.Foundation.DateTime ProductInstanceIdLastUpdateTime{ get; };

        String EndpointSuppliedName{ get; };
        Windows.Foundation.DateTime EndpointSuppliedNameLastUpdateTime{ get; };

        Boolean SupportsMidi10Protocol{ get; };
        Boolean SupportsMidi20Protocol{ get; };
        Boolean SupportsReceivingJRTimestamps{ get; };
        Boolean SupportsSendingJRTimestamps{ get; };

        Boolean HasStaticFunctionBlocks{ get; };
        UInt8 FunctionBlockCount{ get; };

        IMapView<UInt8, MidiFunctionBlock> FunctionBlocks{ get; };
        Windows.Foundation.DateTime FunctionBlocksLastUpdateTime{ get; };

        MidiProtocol ConfiguredProtocol{ get; };
        Boolean ConfiguredToReceiveJRTimestamps{ get; };
        Boolean ConfiguredToSendJRTimestamps{ get; };

        Windows.Foundation.DateTime EndpointConfigurationLastUpdateTime{ get; };

        UInt8[] DeviceIdentitySystemExclusiveId{ get; };
        UInt8 DeviceIdentityDeviceFamilyLsb{ get; };
        UInt8 DeviceIdentityDeviceFamilyMsb{ get; };
        UInt8 DeviceIdentityDeviceFamilyModelNumberLsb{ get; };
        UInt8 DeviceIdentityDeviceFamilyModelNumberMsb{ get; };
        UInt8[] DeviceIdentitySoftwareRevisionLevel{ get; };

        Windows.Foundation.DateTime DeviceIdentityLastUpdateTime{ get; };


        Guid TransportId{ get; };
        String TransportMnemonic{ get; };

        String TransportSuppliedSerialNumber{ get; };

        UInt16 TransportSuppliedVendorId{ get; };
        UInt16 TransportSuppliedProductId{ get; };

        String TransportSuppliedDescription{ get; };
        String ManufacturerName{ get; };

        Boolean SupportsMultiClient{ get; };

        MidiEndpointNativeDataFormat NativeDataFormat{ get; };

        IVectorView<MidiGroupTerminalBlock> GroupTerminalBlocks{ get; };

        MidiEndpointDevicePurpose EndpointPurpose{ get; };


        String UserSuppliedName{ get; };
        String UserSuppliedDescription{ get; };

        String UserSuppliedLargeImagePath{ get; };
        String UserSuppliedSmallImagePath{ get; };

        Boolean RequiresNoteOffTranslation{ get; };
        UInt16 RecommendedCCAutomationIntervalMS{ get; };

        Windows.Foundation.Collections.IMapView<String, IInspectable> Properties{ get; };

        Boolean UpdateFromDeviceInformation(Windows.Devices.Enumeration.DeviceInformation deviceInformation);
        Boolean UpdateFromDeviceInformationUpdate(Windows.Devices.Enumeration.DeviceInformationUpdate deviceInformationUpdate);
    }
}
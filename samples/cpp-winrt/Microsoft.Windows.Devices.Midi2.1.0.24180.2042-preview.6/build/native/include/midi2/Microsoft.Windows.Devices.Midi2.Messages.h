// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#ifndef WINRT_Microsoft_Windows_Devices_Midi2_Messages_H
#define WINRT_Microsoft_Windows_Devices_Midi2_Messages_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.240405.15"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.240405.15"
#include "winrt/Microsoft.Windows.Devices.Midi2.h"
#include "winrt/impl/Microsoft.Windows.Devices.Midi2.2.h"
#include "winrt/impl/Windows.Devices.Midi.2.h"
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/impl/Microsoft.Windows.Devices.Midi2.Messages.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageBuilderStatics<D>::BuildUtilityMessage(uint64_t timestamp, uint8_t status, uint32_t dataOrReserved) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageBuilderStatics)->BuildUtilityMessage(timestamp, status, dataOrReserved, &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageBuilderStatics<D>::BuildSystemMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, uint8_t status, uint8_t midi1Byte2, uint8_t midi1Byte3) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageBuilderStatics)->BuildSystemMessage(timestamp, *(void**)(&group), status, midi1Byte2, midi1Byte3, &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageBuilderStatics<D>::BuildMidi1ChannelVoiceMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Microsoft::Windows::Devices::Midi2::Messages::Midi1ChannelVoiceMessageStatus const& status, winrt::Microsoft::Windows::Devices::Midi2::MidiChannel const& channel, uint8_t byte3, uint8_t byte4) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageBuilderStatics)->BuildMidi1ChannelVoiceMessage(timestamp, *(void**)(&group), static_cast<int32_t>(status), *(void**)(&channel), byte3, byte4, &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageBuilderStatics<D>::BuildSystemExclusive7Message(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, uint8_t status, uint8_t numberOfBytes, uint8_t dataByte0, uint8_t dataByte1, uint8_t dataByte2, uint8_t dataByte3, uint8_t dataByte4, uint8_t dataByte5) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageBuilderStatics)->BuildSystemExclusive7Message(timestamp, *(void**)(&group), status, numberOfBytes, dataByte0, dataByte1, dataByte2, dataByte3, dataByte4, dataByte5, &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage64{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageBuilderStatics<D>::BuildMidi2ChannelVoiceMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Microsoft::Windows::Devices::Midi2::Messages::Midi2ChannelVoiceMessageStatus const& status, winrt::Microsoft::Windows::Devices::Midi2::MidiChannel const& channel, uint16_t index, uint32_t data) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageBuilderStatics)->BuildMidi2ChannelVoiceMessage(timestamp, *(void**)(&group), static_cast<int32_t>(status), *(void**)(&channel), index, data, &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage64{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageBuilderStatics<D>::BuildSystemExclusive8Message(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Microsoft::Windows::Devices::Midi2::Messages::MidiSystemExclusive8Status const& status, uint8_t numberOfValidDataBytesThisMessage, uint8_t streamId, uint8_t dataByte00, uint8_t dataByte01, uint8_t dataByte02, uint8_t dataByte03, uint8_t dataByte04, uint8_t dataByte05, uint8_t dataByte06, uint8_t dataByte07, uint8_t dataByte08, uint8_t dataByte09, uint8_t dataByte10, uint8_t dataByte11, uint8_t dataByte12) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageBuilderStatics)->BuildSystemExclusive8Message(timestamp, *(void**)(&group), static_cast<int32_t>(status), numberOfValidDataBytesThisMessage, streamId, dataByte00, dataByte01, dataByte02, dataByte03, dataByte04, dataByte05, dataByte06, dataByte07, dataByte08, dataByte09, dataByte10, dataByte11, dataByte12, &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage128{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageBuilderStatics<D>::BuildMixedDataSetChunkHeaderMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, uint8_t mdsId, uint16_t numberValidDataBytesInThisChunk, uint16_t numberChunksInMixedDataSet, uint16_t numberOfThisChunk, uint16_t manufacturerId, uint16_t deviceId, uint16_t subId1, uint16_t subId2) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageBuilderStatics)->BuildMixedDataSetChunkHeaderMessage(timestamp, *(void**)(&group), mdsId, numberValidDataBytesInThisChunk, numberChunksInMixedDataSet, numberOfThisChunk, manufacturerId, deviceId, subId1, subId2, &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage128{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageBuilderStatics<D>::BuildMixedDataSetChunkDataMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, uint8_t mdsId, uint8_t dataByte00, uint8_t dataByte01, uint8_t dataByte02, uint8_t dataByte03, uint8_t dataByte04, uint8_t dataByte05, uint8_t dataByte06, uint8_t dataByte07, uint8_t dataByte08, uint8_t dataByte09, uint8_t dataByte10, uint8_t dataByte11, uint8_t dataByte12, uint8_t dataByte13) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageBuilderStatics)->BuildMixedDataSetChunkDataMessage(timestamp, *(void**)(&group), mdsId, dataByte00, dataByte01, dataByte02, dataByte03, dataByte04, dataByte05, dataByte06, dataByte07, dataByte08, dataByte09, dataByte10, dataByte11, dataByte12, dataByte13, &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage128{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageBuilderStatics<D>::BuildFlexDataMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, uint8_t form, uint8_t address, winrt::Microsoft::Windows::Devices::Midi2::MidiChannel const& channel, uint8_t statusBank, uint8_t status, uint32_t word1Data, uint32_t word2Data, uint32_t word3Data) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageBuilderStatics)->BuildFlexDataMessage(timestamp, *(void**)(&group), form, address, *(void**)(&channel), statusBank, status, word1Data, word2Data, word3Data, &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage128{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageBuilderStatics<D>::BuildStreamMessage(uint64_t timestamp, uint8_t form, uint16_t status, uint16_t word0RemainingData, uint32_t word1Data, uint32_t word2Data, uint32_t word3Data) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageBuilderStatics)->BuildStreamMessage(timestamp, form, status, word0RemainingData, word1Data, word2Data, word3Data, &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage128{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageConverterStatics<D>::ConvertMidi1Message(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, uint8_t statusByte) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageConverterStatics)->ConvertMidi1Message(timestamp, *(void**)(&group), statusByte, &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageConverterStatics<D>::ConvertMidi1Message(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, uint8_t statusByte, uint8_t dataByte1) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageConverterStatics)->ConvertMidi1Message2(timestamp, *(void**)(&group), statusByte, dataByte1, &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageConverterStatics<D>::ConvertMidi1Message(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, uint8_t statusByte, uint8_t dataByte1, uint8_t dataByte2) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageConverterStatics)->ConvertMidi1Message3(timestamp, *(void**)(&group), statusByte, dataByte1, dataByte2, &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageConverterStatics<D>::ConvertMidi1ChannelPressureMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiChannelPressureMessage const& originalMessage) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageConverterStatics)->ConvertMidi1ChannelPressureMessage(timestamp, *(void**)(&group), *(void**)(&originalMessage), &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageConverterStatics<D>::ConvertMidi1NoteOffMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiNoteOffMessage const& originalMessage) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageConverterStatics)->ConvertMidi1NoteOffMessage(timestamp, *(void**)(&group), *(void**)(&originalMessage), &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageConverterStatics<D>::ConvertMidi1NoteOnMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiNoteOnMessage const& originalMessage) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageConverterStatics)->ConvertMidi1NoteOnMessage(timestamp, *(void**)(&group), *(void**)(&originalMessage), &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageConverterStatics<D>::ConvertMidi1PitchBendChangeMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiPitchBendChangeMessage const& originalMessage) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageConverterStatics)->ConvertMidi1PitchBendChangeMessage(timestamp, *(void**)(&group), *(void**)(&originalMessage), &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageConverterStatics<D>::ConvertMidi1PolyphonicKeyPressureMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiPolyphonicKeyPressureMessage const& originalMessage) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageConverterStatics)->ConvertMidi1PolyphonicKeyPressureMessage(timestamp, *(void**)(&group), *(void**)(&originalMessage), &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageConverterStatics<D>::ConvertMidi1ProgramChangeMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiProgramChangeMessage const& originalMessage) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageConverterStatics)->ConvertMidi1ProgramChangeMessage(timestamp, *(void**)(&group), *(void**)(&originalMessage), &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageConverterStatics<D>::ConvertMidi1TimeCodeMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiTimeCodeMessage const& originalMessage) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageConverterStatics)->ConvertMidi1TimeCodeMessage(timestamp, *(void**)(&group), *(void**)(&originalMessage), &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageConverterStatics<D>::ConvertMidi1SongPositionPointerMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiSongPositionPointerMessage const& originalMessage) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageConverterStatics)->ConvertMidi1SongPositionPointerMessage(timestamp, *(void**)(&group), *(void**)(&originalMessage), &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageConverterStatics<D>::ConvertMidi1SongSelectMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiSongSelectMessage const& originalMessage) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageConverterStatics)->ConvertMidi1SongSelectMessage(timestamp, *(void**)(&group), *(void**)(&originalMessage), &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageConverterStatics<D>::ConvertMidi1TuneRequestMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiTuneRequestMessage const& originalMessage) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageConverterStatics)->ConvertMidi1TuneRequestMessage(timestamp, *(void**)(&group), *(void**)(&originalMessage), &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageConverterStatics<D>::ConvertMidi1TimingClockMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiTimingClockMessage const& originalMessage) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageConverterStatics)->ConvertMidi1TimingClockMessage(timestamp, *(void**)(&group), *(void**)(&originalMessage), &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageConverterStatics<D>::ConvertMidi1StartMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiStartMessage const& originalMessage) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageConverterStatics)->ConvertMidi1StartMessage(timestamp, *(void**)(&group), *(void**)(&originalMessage), &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageConverterStatics<D>::ConvertMidi1ContinueMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiContinueMessage const& originalMessage) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageConverterStatics)->ConvertMidi1ContinueMessage(timestamp, *(void**)(&group), *(void**)(&originalMessage), &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageConverterStatics<D>::ConvertMidi1StopMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiStopMessage const& originalMessage) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageConverterStatics)->ConvertMidi1StopMessage(timestamp, *(void**)(&group), *(void**)(&originalMessage), &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageConverterStatics<D>::ConvertMidi1ActiveSensingMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiActiveSensingMessage const& originalMessage) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageConverterStatics)->ConvertMidi1ActiveSensingMessage(timestamp, *(void**)(&group), *(void**)(&originalMessage), &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageConverterStatics<D>::ConvertMidi1SystemResetMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiSystemResetMessage const& originalMessage) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageConverterStatics)->ConvertMidi1SystemResetMessage(timestamp, *(void**)(&group), *(void**)(&originalMessage), &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageHelperStatics<D>::ValidateMessage32MessageType(uint32_t word0) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics)->ValidateMessage32MessageType(word0, &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageHelperStatics<D>::ValidateMessage64MessageType(uint32_t word0) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics)->ValidateMessage64MessageType(word0, &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageHelperStatics<D>::ValidateMessage96MessageType(uint32_t word0) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics)->ValidateMessage96MessageType(word0, &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageHelperStatics<D>::ValidateMessage128MessageType(uint32_t word0) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics)->ValidateMessage128MessageType(word0, &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageHelperStatics<D>::GetMessageTypeFromMessageFirstWord(uint32_t word0) const
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiMessageType result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics)->GetMessageTypeFromMessageFirstWord(word0, reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageHelperStatics<D>::GetPacketTypeFromMessageFirstWord(uint32_t word0) const
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiPacketType result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics)->GetPacketTypeFromMessageFirstWord(word0, reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageHelperStatics<D>::MessageTypeHasGroupField(winrt::Microsoft::Windows::Devices::Midi2::MidiMessageType const& messageType) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics)->MessageTypeHasGroupField(static_cast<int32_t>(messageType), &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageHelperStatics<D>::ReplaceGroupInMessageFirstWord(uint32_t word0, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& newGroup) const
    {
        uint32_t result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics)->ReplaceGroupInMessageFirstWord(word0, *(void**)(&newGroup), &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageHelperStatics<D>::GetGroupFromMessageFirstWord(uint32_t word0) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics)->GetGroupFromMessageFirstWord(word0, &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiGroup{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageHelperStatics<D>::GetStatusFromUtilityMessage(uint32_t word0) const
    {
        uint8_t result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics)->GetStatusFromUtilityMessage(word0, &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageHelperStatics<D>::GetStatusFromMidi1ChannelVoiceMessage(uint32_t word0) const
    {
        winrt::Microsoft::Windows::Devices::Midi2::Messages::Midi1ChannelVoiceMessageStatus result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics)->GetStatusFromMidi1ChannelVoiceMessage(word0, reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageHelperStatics<D>::GetStatusFromMidi2ChannelVoiceMessageFirstWord(uint32_t word0) const
    {
        winrt::Microsoft::Windows::Devices::Midi2::Messages::Midi2ChannelVoiceMessageStatus result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics)->GetStatusFromMidi2ChannelVoiceMessageFirstWord(word0, reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageHelperStatics<D>::GetStatusBankFromFlexDataMessageFirstWord(uint32_t word0) const
    {
        uint8_t result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics)->GetStatusBankFromFlexDataMessageFirstWord(word0, &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageHelperStatics<D>::GetStatusFromFlexDataMessageFirstWord(uint32_t word0) const
    {
        uint8_t result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics)->GetStatusFromFlexDataMessageFirstWord(word0, &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageHelperStatics<D>::GetStatusFromSystemCommonMessage(uint32_t word0) const
    {
        uint8_t result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics)->GetStatusFromSystemCommonMessage(word0, &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageHelperStatics<D>::GetStatusFromDataMessage64FirstWord(uint32_t word0) const
    {
        uint8_t result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics)->GetStatusFromDataMessage64FirstWord(word0, &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageHelperStatics<D>::GetNumberOfBytesFromDataMessage64FirstWord(uint32_t word0) const
    {
        uint8_t result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics)->GetNumberOfBytesFromDataMessage64FirstWord(word0, &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageHelperStatics<D>::GetStatusFromDataMessage128FirstWord(uint32_t word0) const
    {
        uint8_t result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics)->GetStatusFromDataMessage128FirstWord(word0, &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageHelperStatics<D>::GetNumberOfBytesFromDataMessage128FirstWord(uint32_t word0) const
    {
        uint8_t result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics)->GetNumberOfBytesFromDataMessage128FirstWord(word0, &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageHelperStatics<D>::MessageTypeHasChannelField(winrt::Microsoft::Windows::Devices::Midi2::MidiMessageType const& messageType) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics)->MessageTypeHasChannelField(static_cast<int32_t>(messageType), &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageHelperStatics<D>::ReplaceChannelInMessageFirstWord(uint32_t word0, winrt::Microsoft::Windows::Devices::Midi2::MidiChannel const& newChannel) const
    {
        uint32_t result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics)->ReplaceChannelInMessageFirstWord(word0, *(void**)(&newChannel), &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageHelperStatics<D>::GetChannelFromMessageFirstWord(uint32_t word0) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics)->GetChannelFromMessageFirstWord(word0, &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiChannel{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageHelperStatics<D>::GetFormFromStreamMessageFirstWord(uint32_t word0) const
    {
        uint8_t result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics)->GetFormFromStreamMessageFirstWord(word0, &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageHelperStatics<D>::GetStatusFromStreamMessageFirstWord(uint32_t word0) const
    {
        uint16_t result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics)->GetStatusFromStreamMessageFirstWord(word0, &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageHelperStatics<D>::GetMessageDisplayNameFromFirstWord(uint32_t word0) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics)->GetMessageDisplayNameFromFirstWord(word0, &result));
        return hstring{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageHelperStatics<D>::GetPacketListFromWordList(uint64_t timestamp, param::iterable<uint32_t> const& words) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics)->GetPacketListFromWordList(timestamp, *(void**)(&words), &result));
        return winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket>{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageHelperStatics<D>::GetWordListFromPacketList(param::iterable<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket> const& words) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics)->GetWordListFromPacketList(*(void**)(&words), &result));
        return winrt::Windows::Foundation::Collections::IVector<uint32_t>{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiStreamMessageBuilderStatics<D>::BuildEndpointDiscoveryMessage(uint64_t timestamp, uint8_t umpVersionMajor, uint8_t umpVersionMinor, winrt::Microsoft::Windows::Devices::Midi2::Messages::MidiEndpointDiscoveryRequests const& request) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiStreamMessageBuilderStatics)->BuildEndpointDiscoveryMessage(timestamp, umpVersionMajor, umpVersionMinor, static_cast<uint32_t>(request), &result));
        return winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiStreamMessageBuilderStatics<D>::BuildEndpointInfoNotificationMessage(uint64_t timestamp, uint8_t umpVersionMajor, uint8_t umpVersionMinor, bool hasStaticFunctionBlocks, uint8_t numberOfFunctionBlocks, bool supportsMidi20Protocol, bool supportsMidi10Protocol, bool supportsReceivingJitterReductionTimestamps, bool supportsSendingJitterReductionTimestamps) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiStreamMessageBuilderStatics)->BuildEndpointInfoNotificationMessage(timestamp, umpVersionMajor, umpVersionMinor, hasStaticFunctionBlocks, numberOfFunctionBlocks, supportsMidi20Protocol, supportsMidi10Protocol, supportsReceivingJitterReductionTimestamps, supportsSendingJitterReductionTimestamps, &result));
        return winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiStreamMessageBuilderStatics<D>::BuildDeviceIdentityNotificationMessage(uint64_t timestamp, uint8_t deviceManufacturerSysExIdByte1, uint8_t deviceManufacturerSysExIdByte2, uint8_t deviceManufacturerSysExIdByte3, uint8_t deviceFamilyLsb, uint8_t deviceFamilyMsb, uint8_t deviceFamilyModelNumberLsb, uint8_t deviceFamilyModelNumberMsb, uint8_t softwareRevisionLevelByte1, uint8_t softwareRevisionLevelByte2, uint8_t softwareRevisionLevelByte3, uint8_t softwareRevisionLevelByte4) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiStreamMessageBuilderStatics)->BuildDeviceIdentityNotificationMessage(timestamp, deviceManufacturerSysExIdByte1, deviceManufacturerSysExIdByte2, deviceManufacturerSysExIdByte3, deviceFamilyLsb, deviceFamilyMsb, deviceFamilyModelNumberLsb, deviceFamilyModelNumberMsb, softwareRevisionLevelByte1, softwareRevisionLevelByte2, softwareRevisionLevelByte3, softwareRevisionLevelByte4, &result));
        return winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiStreamMessageBuilderStatics<D>::BuildEndpointNameNotificationMessages(uint64_t timestamp, param::hstring const& name) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiStreamMessageBuilderStatics)->BuildEndpointNameNotificationMessages(timestamp, *(void**)(&name), &result));
        return winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket>{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiStreamMessageBuilderStatics<D>::BuildProductInstanceIdNotificationMessages(uint64_t timestamp, param::hstring const& productInstanceId) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiStreamMessageBuilderStatics)->BuildProductInstanceIdNotificationMessages(timestamp, *(void**)(&productInstanceId), &result));
        return winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket>{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiStreamMessageBuilderStatics<D>::ParseEndpointNameNotificationMessages(param::iterable<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket> const& messages) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiStreamMessageBuilderStatics)->ParseEndpointNameNotificationMessages(*(void**)(&messages), &result));
        return hstring{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiStreamMessageBuilderStatics<D>::ParseProductInstanceIdNotificationMessages(param::iterable<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket> const& messages) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiStreamMessageBuilderStatics)->ParseProductInstanceIdNotificationMessages(*(void**)(&messages), &result));
        return hstring{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiStreamMessageBuilderStatics<D>::BuildStreamConfigurationRequestMessage(uint64_t timestamp, uint8_t protocol, bool expectToReceiveJRTimestamps, bool requestToSendJRTimestamps) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiStreamMessageBuilderStatics)->BuildStreamConfigurationRequestMessage(timestamp, protocol, expectToReceiveJRTimestamps, requestToSendJRTimestamps, &result));
        return winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiStreamMessageBuilderStatics<D>::BuildStreamConfigurationNotificationMessage(uint64_t timestamp, uint8_t protocol, bool confirmationWillReceiveJRTimestamps, bool confirmationSendJRTimestamps) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiStreamMessageBuilderStatics)->BuildStreamConfigurationNotificationMessage(timestamp, protocol, confirmationWillReceiveJRTimestamps, confirmationSendJRTimestamps, &result));
        return winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiStreamMessageBuilderStatics<D>::BuildFunctionBlockDiscoveryMessage(uint64_t timestamp, uint8_t functionBlockNumber, winrt::Microsoft::Windows::Devices::Midi2::Messages::MidiFunctionBlockDiscoveryRequests const& requestFlags) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiStreamMessageBuilderStatics)->BuildFunctionBlockDiscoveryMessage(timestamp, functionBlockNumber, static_cast<uint32_t>(requestFlags), &result));
        return winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiStreamMessageBuilderStatics<D>::BuildFunctionBlockInfoNotificationMessage(uint64_t timestamp, bool active, uint8_t functionBlockNumber, winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockUIHint const& uiHint, winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockRepresentsMidi10Connection const& midi10, winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockDirection const& direction, uint8_t firstGroup, uint8_t numberOfGroups, uint8_t midiCIVersionFormat, uint8_t maxNumberSysEx8Streams) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiStreamMessageBuilderStatics)->BuildFunctionBlockInfoNotificationMessage(timestamp, active, functionBlockNumber, static_cast<int32_t>(uiHint), static_cast<int32_t>(midi10), static_cast<int32_t>(direction), firstGroup, numberOfGroups, midiCIVersionFormat, maxNumberSysEx8Streams, &result));
        return winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiStreamMessageBuilderStatics<D>::BuildFunctionBlockNameNotificationMessages(uint64_t timestamp, uint8_t functionBlockNumber, param::hstring const& name) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiStreamMessageBuilderStatics)->BuildFunctionBlockNameNotificationMessages(timestamp, functionBlockNumber, *(void**)(&name), &result));
        return winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket>{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiStreamMessageBuilderStatics<D>::ParseFunctionBlockNameNotificationMessages(param::iterable<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket> const& messages) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiStreamMessageBuilderStatics)->ParseFunctionBlockNameNotificationMessages(*(void**)(&messages), &result));
        return hstring{ result, take_ownership_from_abi };
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageBuilderStatics> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageBuilderStatics>
    {
        int32_t __stdcall BuildUtilityMessage(uint64_t timestamp, uint8_t status, uint32_t dataOrReserved, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32>(this->shim().BuildUtilityMessage(timestamp, status, dataOrReserved));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall BuildSystemMessage(uint64_t timestamp, void* group, uint8_t status, uint8_t midi1Byte2, uint8_t midi1Byte3, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32>(this->shim().BuildSystemMessage(timestamp, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const*>(&group), status, midi1Byte2, midi1Byte3));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall BuildMidi1ChannelVoiceMessage(uint64_t timestamp, void* group, int32_t status, void* channel, uint8_t byte3, uint8_t byte4, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32>(this->shim().BuildMidi1ChannelVoiceMessage(timestamp, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const*>(&group), *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::Messages::Midi1ChannelVoiceMessageStatus const*>(&status), *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiChannel const*>(&channel), byte3, byte4));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall BuildSystemExclusive7Message(uint64_t timestamp, void* group, uint8_t status, uint8_t numberOfBytes, uint8_t dataByte0, uint8_t dataByte1, uint8_t dataByte2, uint8_t dataByte3, uint8_t dataByte4, uint8_t dataByte5, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage64>(this->shim().BuildSystemExclusive7Message(timestamp, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const*>(&group), status, numberOfBytes, dataByte0, dataByte1, dataByte2, dataByte3, dataByte4, dataByte5));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall BuildMidi2ChannelVoiceMessage(uint64_t timestamp, void* group, int32_t status, void* channel, uint16_t index, uint32_t data, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage64>(this->shim().BuildMidi2ChannelVoiceMessage(timestamp, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const*>(&group), *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::Messages::Midi2ChannelVoiceMessageStatus const*>(&status), *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiChannel const*>(&channel), index, data));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall BuildSystemExclusive8Message(uint64_t timestamp, void* group, int32_t status, uint8_t numberOfValidDataBytesThisMessage, uint8_t streamId, uint8_t dataByte00, uint8_t dataByte01, uint8_t dataByte02, uint8_t dataByte03, uint8_t dataByte04, uint8_t dataByte05, uint8_t dataByte06, uint8_t dataByte07, uint8_t dataByte08, uint8_t dataByte09, uint8_t dataByte10, uint8_t dataByte11, uint8_t dataByte12, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage128>(this->shim().BuildSystemExclusive8Message(timestamp, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const*>(&group), *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::Messages::MidiSystemExclusive8Status const*>(&status), numberOfValidDataBytesThisMessage, streamId, dataByte00, dataByte01, dataByte02, dataByte03, dataByte04, dataByte05, dataByte06, dataByte07, dataByte08, dataByte09, dataByte10, dataByte11, dataByte12));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall BuildMixedDataSetChunkHeaderMessage(uint64_t timestamp, void* group, uint8_t mdsId, uint16_t numberValidDataBytesInThisChunk, uint16_t numberChunksInMixedDataSet, uint16_t numberOfThisChunk, uint16_t manufacturerId, uint16_t deviceId, uint16_t subId1, uint16_t subId2, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage128>(this->shim().BuildMixedDataSetChunkHeaderMessage(timestamp, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const*>(&group), mdsId, numberValidDataBytesInThisChunk, numberChunksInMixedDataSet, numberOfThisChunk, manufacturerId, deviceId, subId1, subId2));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall BuildMixedDataSetChunkDataMessage(uint64_t timestamp, void* group, uint8_t mdsId, uint8_t dataByte00, uint8_t dataByte01, uint8_t dataByte02, uint8_t dataByte03, uint8_t dataByte04, uint8_t dataByte05, uint8_t dataByte06, uint8_t dataByte07, uint8_t dataByte08, uint8_t dataByte09, uint8_t dataByte10, uint8_t dataByte11, uint8_t dataByte12, uint8_t dataByte13, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage128>(this->shim().BuildMixedDataSetChunkDataMessage(timestamp, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const*>(&group), mdsId, dataByte00, dataByte01, dataByte02, dataByte03, dataByte04, dataByte05, dataByte06, dataByte07, dataByte08, dataByte09, dataByte10, dataByte11, dataByte12, dataByte13));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall BuildFlexDataMessage(uint64_t timestamp, void* group, uint8_t form, uint8_t address, void* channel, uint8_t statusBank, uint8_t status, uint32_t word1Data, uint32_t word2Data, uint32_t word3Data, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage128>(this->shim().BuildFlexDataMessage(timestamp, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const*>(&group), form, address, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiChannel const*>(&channel), statusBank, status, word1Data, word2Data, word3Data));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall BuildStreamMessage(uint64_t timestamp, uint8_t form, uint16_t status, uint16_t word0RemainingData, uint32_t word1Data, uint32_t word2Data, uint32_t word3Data, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage128>(this->shim().BuildStreamMessage(timestamp, form, status, word0RemainingData, word1Data, word2Data, word3Data));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageConverterStatics> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageConverterStatics>
    {
        int32_t __stdcall ConvertMidi1Message(uint64_t timestamp, void* group, uint8_t statusByte, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32>(this->shim().ConvertMidi1Message(timestamp, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const*>(&group), statusByte));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ConvertMidi1Message2(uint64_t timestamp, void* group, uint8_t statusByte, uint8_t dataByte1, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32>(this->shim().ConvertMidi1Message(timestamp, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const*>(&group), statusByte, dataByte1));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ConvertMidi1Message3(uint64_t timestamp, void* group, uint8_t statusByte, uint8_t dataByte1, uint8_t dataByte2, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32>(this->shim().ConvertMidi1Message(timestamp, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const*>(&group), statusByte, dataByte1, dataByte2));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ConvertMidi1ChannelPressureMessage(uint64_t timestamp, void* group, void* originalMessage, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32>(this->shim().ConvertMidi1ChannelPressureMessage(timestamp, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const*>(&group), *reinterpret_cast<winrt::Windows::Devices::Midi::MidiChannelPressureMessage const*>(&originalMessage)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ConvertMidi1NoteOffMessage(uint64_t timestamp, void* group, void* originalMessage, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32>(this->shim().ConvertMidi1NoteOffMessage(timestamp, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const*>(&group), *reinterpret_cast<winrt::Windows::Devices::Midi::MidiNoteOffMessage const*>(&originalMessage)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ConvertMidi1NoteOnMessage(uint64_t timestamp, void* group, void* originalMessage, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32>(this->shim().ConvertMidi1NoteOnMessage(timestamp, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const*>(&group), *reinterpret_cast<winrt::Windows::Devices::Midi::MidiNoteOnMessage const*>(&originalMessage)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ConvertMidi1PitchBendChangeMessage(uint64_t timestamp, void* group, void* originalMessage, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32>(this->shim().ConvertMidi1PitchBendChangeMessage(timestamp, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const*>(&group), *reinterpret_cast<winrt::Windows::Devices::Midi::MidiPitchBendChangeMessage const*>(&originalMessage)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ConvertMidi1PolyphonicKeyPressureMessage(uint64_t timestamp, void* group, void* originalMessage, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32>(this->shim().ConvertMidi1PolyphonicKeyPressureMessage(timestamp, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const*>(&group), *reinterpret_cast<winrt::Windows::Devices::Midi::MidiPolyphonicKeyPressureMessage const*>(&originalMessage)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ConvertMidi1ProgramChangeMessage(uint64_t timestamp, void* group, void* originalMessage, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32>(this->shim().ConvertMidi1ProgramChangeMessage(timestamp, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const*>(&group), *reinterpret_cast<winrt::Windows::Devices::Midi::MidiProgramChangeMessage const*>(&originalMessage)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ConvertMidi1TimeCodeMessage(uint64_t timestamp, void* group, void* originalMessage, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32>(this->shim().ConvertMidi1TimeCodeMessage(timestamp, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const*>(&group), *reinterpret_cast<winrt::Windows::Devices::Midi::MidiTimeCodeMessage const*>(&originalMessage)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ConvertMidi1SongPositionPointerMessage(uint64_t timestamp, void* group, void* originalMessage, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32>(this->shim().ConvertMidi1SongPositionPointerMessage(timestamp, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const*>(&group), *reinterpret_cast<winrt::Windows::Devices::Midi::MidiSongPositionPointerMessage const*>(&originalMessage)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ConvertMidi1SongSelectMessage(uint64_t timestamp, void* group, void* originalMessage, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32>(this->shim().ConvertMidi1SongSelectMessage(timestamp, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const*>(&group), *reinterpret_cast<winrt::Windows::Devices::Midi::MidiSongSelectMessage const*>(&originalMessage)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ConvertMidi1TuneRequestMessage(uint64_t timestamp, void* group, void* originalMessage, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32>(this->shim().ConvertMidi1TuneRequestMessage(timestamp, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const*>(&group), *reinterpret_cast<winrt::Windows::Devices::Midi::MidiTuneRequestMessage const*>(&originalMessage)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ConvertMidi1TimingClockMessage(uint64_t timestamp, void* group, void* originalMessage, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32>(this->shim().ConvertMidi1TimingClockMessage(timestamp, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const*>(&group), *reinterpret_cast<winrt::Windows::Devices::Midi::MidiTimingClockMessage const*>(&originalMessage)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ConvertMidi1StartMessage(uint64_t timestamp, void* group, void* originalMessage, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32>(this->shim().ConvertMidi1StartMessage(timestamp, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const*>(&group), *reinterpret_cast<winrt::Windows::Devices::Midi::MidiStartMessage const*>(&originalMessage)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ConvertMidi1ContinueMessage(uint64_t timestamp, void* group, void* originalMessage, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32>(this->shim().ConvertMidi1ContinueMessage(timestamp, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const*>(&group), *reinterpret_cast<winrt::Windows::Devices::Midi::MidiContinueMessage const*>(&originalMessage)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ConvertMidi1StopMessage(uint64_t timestamp, void* group, void* originalMessage, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32>(this->shim().ConvertMidi1StopMessage(timestamp, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const*>(&group), *reinterpret_cast<winrt::Windows::Devices::Midi::MidiStopMessage const*>(&originalMessage)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ConvertMidi1ActiveSensingMessage(uint64_t timestamp, void* group, void* originalMessage, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32>(this->shim().ConvertMidi1ActiveSensingMessage(timestamp, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const*>(&group), *reinterpret_cast<winrt::Windows::Devices::Midi::MidiActiveSensingMessage const*>(&originalMessage)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ConvertMidi1SystemResetMessage(uint64_t timestamp, void* group, void* originalMessage, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32>(this->shim().ConvertMidi1SystemResetMessage(timestamp, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const*>(&group), *reinterpret_cast<winrt::Windows::Devices::Midi::MidiSystemResetMessage const*>(&originalMessage)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics>
    {
        int32_t __stdcall ValidateMessage32MessageType(uint32_t word0, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().ValidateMessage32MessageType(word0));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ValidateMessage64MessageType(uint32_t word0, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().ValidateMessage64MessageType(word0));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ValidateMessage96MessageType(uint32_t word0, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().ValidateMessage96MessageType(word0));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ValidateMessage128MessageType(uint32_t word0, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().ValidateMessage128MessageType(word0));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetMessageTypeFromMessageFirstWord(uint32_t word0, int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageType>(this->shim().GetMessageTypeFromMessageFirstWord(word0));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetPacketTypeFromMessageFirstWord(uint32_t word0, int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiPacketType>(this->shim().GetPacketTypeFromMessageFirstWord(word0));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall MessageTypeHasGroupField(int32_t messageType, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().MessageTypeHasGroupField(*reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageType const*>(&messageType)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ReplaceGroupInMessageFirstWord(uint32_t word0, void* newGroup, uint32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<uint32_t>(this->shim().ReplaceGroupInMessageFirstWord(word0, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const*>(&newGroup)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetGroupFromMessageFirstWord(uint32_t word0, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup>(this->shim().GetGroupFromMessageFirstWord(word0));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetStatusFromUtilityMessage(uint32_t word0, uint8_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<uint8_t>(this->shim().GetStatusFromUtilityMessage(word0));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetStatusFromMidi1ChannelVoiceMessage(uint32_t word0, int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::Messages::Midi1ChannelVoiceMessageStatus>(this->shim().GetStatusFromMidi1ChannelVoiceMessage(word0));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetStatusFromMidi2ChannelVoiceMessageFirstWord(uint32_t word0, int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::Messages::Midi2ChannelVoiceMessageStatus>(this->shim().GetStatusFromMidi2ChannelVoiceMessageFirstWord(word0));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetStatusBankFromFlexDataMessageFirstWord(uint32_t word0, uint8_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<uint8_t>(this->shim().GetStatusBankFromFlexDataMessageFirstWord(word0));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetStatusFromFlexDataMessageFirstWord(uint32_t word0, uint8_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<uint8_t>(this->shim().GetStatusFromFlexDataMessageFirstWord(word0));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetStatusFromSystemCommonMessage(uint32_t word0, uint8_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<uint8_t>(this->shim().GetStatusFromSystemCommonMessage(word0));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetStatusFromDataMessage64FirstWord(uint32_t word0, uint8_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<uint8_t>(this->shim().GetStatusFromDataMessage64FirstWord(word0));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetNumberOfBytesFromDataMessage64FirstWord(uint32_t word0, uint8_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<uint8_t>(this->shim().GetNumberOfBytesFromDataMessage64FirstWord(word0));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetStatusFromDataMessage128FirstWord(uint32_t word0, uint8_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<uint8_t>(this->shim().GetStatusFromDataMessage128FirstWord(word0));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetNumberOfBytesFromDataMessage128FirstWord(uint32_t word0, uint8_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<uint8_t>(this->shim().GetNumberOfBytesFromDataMessage128FirstWord(word0));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall MessageTypeHasChannelField(int32_t messageType, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().MessageTypeHasChannelField(*reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageType const*>(&messageType)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ReplaceChannelInMessageFirstWord(uint32_t word0, void* newChannel, uint32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<uint32_t>(this->shim().ReplaceChannelInMessageFirstWord(word0, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiChannel const*>(&newChannel)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetChannelFromMessageFirstWord(uint32_t word0, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiChannel>(this->shim().GetChannelFromMessageFirstWord(word0));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetFormFromStreamMessageFirstWord(uint32_t word0, uint8_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<uint8_t>(this->shim().GetFormFromStreamMessageFirstWord(word0));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetStatusFromStreamMessageFirstWord(uint32_t word0, uint16_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<uint16_t>(this->shim().GetStatusFromStreamMessageFirstWord(word0));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetMessageDisplayNameFromFirstWord(uint32_t word0, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<hstring>(this->shim().GetMessageDisplayNameFromFirstWord(word0));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetPacketListFromWordList(uint64_t timestamp, void* words, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket>>(this->shim().GetPacketListFromWordList(timestamp, *reinterpret_cast<winrt::Windows::Foundation::Collections::IIterable<uint32_t> const*>(&words)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetWordListFromPacketList(void* words, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Collections::IVector<uint32_t>>(this->shim().GetWordListFromPacketList(*reinterpret_cast<winrt::Windows::Foundation::Collections::IIterable<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket> const*>(&words)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiStreamMessageBuilderStatics> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiStreamMessageBuilderStatics>
    {
        int32_t __stdcall BuildEndpointDiscoveryMessage(uint64_t timestamp, uint8_t umpVersionMajor, uint8_t umpVersionMinor, uint32_t request, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket>(this->shim().BuildEndpointDiscoveryMessage(timestamp, umpVersionMajor, umpVersionMinor, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::Messages::MidiEndpointDiscoveryRequests const*>(&request)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall BuildEndpointInfoNotificationMessage(uint64_t timestamp, uint8_t umpVersionMajor, uint8_t umpVersionMinor, bool hasStaticFunctionBlocks, uint8_t numberOfFunctionBlocks, bool supportsMidi20Protocol, bool supportsMidi10Protocol, bool supportsReceivingJitterReductionTimestamps, bool supportsSendingJitterReductionTimestamps, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket>(this->shim().BuildEndpointInfoNotificationMessage(timestamp, umpVersionMajor, umpVersionMinor, hasStaticFunctionBlocks, numberOfFunctionBlocks, supportsMidi20Protocol, supportsMidi10Protocol, supportsReceivingJitterReductionTimestamps, supportsSendingJitterReductionTimestamps));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall BuildDeviceIdentityNotificationMessage(uint64_t timestamp, uint8_t deviceManufacturerSysExIdByte1, uint8_t deviceManufacturerSysExIdByte2, uint8_t deviceManufacturerSysExIdByte3, uint8_t deviceFamilyLsb, uint8_t deviceFamilyMsb, uint8_t deviceFamilyModelNumberLsb, uint8_t deviceFamilyModelNumberMsb, uint8_t softwareRevisionLevelByte1, uint8_t softwareRevisionLevelByte2, uint8_t softwareRevisionLevelByte3, uint8_t softwareRevisionLevelByte4, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket>(this->shim().BuildDeviceIdentityNotificationMessage(timestamp, deviceManufacturerSysExIdByte1, deviceManufacturerSysExIdByte2, deviceManufacturerSysExIdByte3, deviceFamilyLsb, deviceFamilyMsb, deviceFamilyModelNumberLsb, deviceFamilyModelNumberMsb, softwareRevisionLevelByte1, softwareRevisionLevelByte2, softwareRevisionLevelByte3, softwareRevisionLevelByte4));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall BuildEndpointNameNotificationMessages(uint64_t timestamp, void* name, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket>>(this->shim().BuildEndpointNameNotificationMessages(timestamp, *reinterpret_cast<hstring const*>(&name)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall BuildProductInstanceIdNotificationMessages(uint64_t timestamp, void* productInstanceId, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket>>(this->shim().BuildProductInstanceIdNotificationMessages(timestamp, *reinterpret_cast<hstring const*>(&productInstanceId)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ParseEndpointNameNotificationMessages(void* messages, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<hstring>(this->shim().ParseEndpointNameNotificationMessages(*reinterpret_cast<winrt::Windows::Foundation::Collections::IIterable<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket> const*>(&messages)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ParseProductInstanceIdNotificationMessages(void* messages, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<hstring>(this->shim().ParseProductInstanceIdNotificationMessages(*reinterpret_cast<winrt::Windows::Foundation::Collections::IIterable<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket> const*>(&messages)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall BuildStreamConfigurationRequestMessage(uint64_t timestamp, uint8_t protocol, bool expectToReceiveJRTimestamps, bool requestToSendJRTimestamps, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket>(this->shim().BuildStreamConfigurationRequestMessage(timestamp, protocol, expectToReceiveJRTimestamps, requestToSendJRTimestamps));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall BuildStreamConfigurationNotificationMessage(uint64_t timestamp, uint8_t protocol, bool confirmationWillReceiveJRTimestamps, bool confirmationSendJRTimestamps, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket>(this->shim().BuildStreamConfigurationNotificationMessage(timestamp, protocol, confirmationWillReceiveJRTimestamps, confirmationSendJRTimestamps));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall BuildFunctionBlockDiscoveryMessage(uint64_t timestamp, uint8_t functionBlockNumber, uint32_t requestFlags, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket>(this->shim().BuildFunctionBlockDiscoveryMessage(timestamp, functionBlockNumber, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::Messages::MidiFunctionBlockDiscoveryRequests const*>(&requestFlags)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall BuildFunctionBlockInfoNotificationMessage(uint64_t timestamp, bool active, uint8_t functionBlockNumber, int32_t uiHint, int32_t midi10, int32_t direction, uint8_t firstGroup, uint8_t numberOfGroups, uint8_t midiCIVersionFormat, uint8_t maxNumberSysEx8Streams, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket>(this->shim().BuildFunctionBlockInfoNotificationMessage(timestamp, active, functionBlockNumber, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockUIHint const*>(&uiHint), *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockRepresentsMidi10Connection const*>(&midi10), *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockDirection const*>(&direction), firstGroup, numberOfGroups, midiCIVersionFormat, maxNumberSysEx8Streams));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall BuildFunctionBlockNameNotificationMessages(uint64_t timestamp, uint8_t functionBlockNumber, void* name, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket>>(this->shim().BuildFunctionBlockNameNotificationMessages(timestamp, functionBlockNumber, *reinterpret_cast<hstring const*>(&name)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ParseFunctionBlockNameNotificationMessages(void* messages, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<hstring>(this->shim().ParseFunctionBlockNameNotificationMessages(*reinterpret_cast<winrt::Windows::Foundation::Collections::IIterable<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket> const*>(&messages)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::Devices::Midi2::Messages
{
    constexpr auto operator|(MidiEndpointDiscoveryRequests const left, MidiEndpointDiscoveryRequests const right) noexcept
    {
        return static_cast<MidiEndpointDiscoveryRequests>(impl::to_underlying_type(left) | impl::to_underlying_type(right));
    }
    constexpr auto operator|=(MidiEndpointDiscoveryRequests& left, MidiEndpointDiscoveryRequests const right) noexcept
    {
        left = left | right;
        return left;
    }
    constexpr auto operator&(MidiEndpointDiscoveryRequests const left, MidiEndpointDiscoveryRequests const right) noexcept
    {
        return static_cast<MidiEndpointDiscoveryRequests>(impl::to_underlying_type(left) & impl::to_underlying_type(right));
    }
    constexpr auto operator&=(MidiEndpointDiscoveryRequests& left, MidiEndpointDiscoveryRequests const right) noexcept
    {
        left = left & right;
        return left;
    }
    constexpr auto operator~(MidiEndpointDiscoveryRequests const value) noexcept
    {
        return static_cast<MidiEndpointDiscoveryRequests>(~impl::to_underlying_type(value));
    }
    constexpr auto operator^(MidiEndpointDiscoveryRequests const left, MidiEndpointDiscoveryRequests const right) noexcept
    {
        return static_cast<MidiEndpointDiscoveryRequests>(impl::to_underlying_type(left) ^ impl::to_underlying_type(right));
    }
    constexpr auto operator^=(MidiEndpointDiscoveryRequests& left, MidiEndpointDiscoveryRequests const right) noexcept
    {
        left = left ^ right;
        return left;
    }
    constexpr auto operator|(MidiFunctionBlockDiscoveryRequests const left, MidiFunctionBlockDiscoveryRequests const right) noexcept
    {
        return static_cast<MidiFunctionBlockDiscoveryRequests>(impl::to_underlying_type(left) | impl::to_underlying_type(right));
    }
    constexpr auto operator|=(MidiFunctionBlockDiscoveryRequests& left, MidiFunctionBlockDiscoveryRequests const right) noexcept
    {
        left = left | right;
        return left;
    }
    constexpr auto operator&(MidiFunctionBlockDiscoveryRequests const left, MidiFunctionBlockDiscoveryRequests const right) noexcept
    {
        return static_cast<MidiFunctionBlockDiscoveryRequests>(impl::to_underlying_type(left) & impl::to_underlying_type(right));
    }
    constexpr auto operator&=(MidiFunctionBlockDiscoveryRequests& left, MidiFunctionBlockDiscoveryRequests const right) noexcept
    {
        left = left & right;
        return left;
    }
    constexpr auto operator~(MidiFunctionBlockDiscoveryRequests const value) noexcept
    {
        return static_cast<MidiFunctionBlockDiscoveryRequests>(~impl::to_underlying_type(value));
    }
    constexpr auto operator^(MidiFunctionBlockDiscoveryRequests const left, MidiFunctionBlockDiscoveryRequests const right) noexcept
    {
        return static_cast<MidiFunctionBlockDiscoveryRequests>(impl::to_underlying_type(left) ^ impl::to_underlying_type(right));
    }
    constexpr auto operator^=(MidiFunctionBlockDiscoveryRequests& left, MidiFunctionBlockDiscoveryRequests const right) noexcept
    {
        left = left ^ right;
        return left;
    }
    inline auto MidiMessageBuilder::BuildUtilityMessage(uint64_t timestamp, uint8_t status, uint32_t dataOrReserved)
    {
        return impl::call_factory<MidiMessageBuilder, IMidiMessageBuilderStatics>([&](IMidiMessageBuilderStatics const& f) { return f.BuildUtilityMessage(timestamp, status, dataOrReserved); });
    }
    inline auto MidiMessageBuilder::BuildSystemMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, uint8_t status, uint8_t midi1Byte2, uint8_t midi1Byte3)
    {
        return impl::call_factory<MidiMessageBuilder, IMidiMessageBuilderStatics>([&](IMidiMessageBuilderStatics const& f) { return f.BuildSystemMessage(timestamp, group, status, midi1Byte2, midi1Byte3); });
    }
    inline auto MidiMessageBuilder::BuildMidi1ChannelVoiceMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Microsoft::Windows::Devices::Midi2::Messages::Midi1ChannelVoiceMessageStatus const& status, winrt::Microsoft::Windows::Devices::Midi2::MidiChannel const& channel, uint8_t byte3, uint8_t byte4)
    {
        return impl::call_factory<MidiMessageBuilder, IMidiMessageBuilderStatics>([&](IMidiMessageBuilderStatics const& f) { return f.BuildMidi1ChannelVoiceMessage(timestamp, group, status, channel, byte3, byte4); });
    }
    inline auto MidiMessageBuilder::BuildSystemExclusive7Message(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, uint8_t status, uint8_t numberOfBytes, uint8_t dataByte0, uint8_t dataByte1, uint8_t dataByte2, uint8_t dataByte3, uint8_t dataByte4, uint8_t dataByte5)
    {
        return impl::call_factory<MidiMessageBuilder, IMidiMessageBuilderStatics>([&](IMidiMessageBuilderStatics const& f) { return f.BuildSystemExclusive7Message(timestamp, group, status, numberOfBytes, dataByte0, dataByte1, dataByte2, dataByte3, dataByte4, dataByte5); });
    }
    inline auto MidiMessageBuilder::BuildMidi2ChannelVoiceMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Microsoft::Windows::Devices::Midi2::Messages::Midi2ChannelVoiceMessageStatus const& status, winrt::Microsoft::Windows::Devices::Midi2::MidiChannel const& channel, uint16_t index, uint32_t data)
    {
        return impl::call_factory<MidiMessageBuilder, IMidiMessageBuilderStatics>([&](IMidiMessageBuilderStatics const& f) { return f.BuildMidi2ChannelVoiceMessage(timestamp, group, status, channel, index, data); });
    }
    inline auto MidiMessageBuilder::BuildSystemExclusive8Message(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Microsoft::Windows::Devices::Midi2::Messages::MidiSystemExclusive8Status const& status, uint8_t numberOfValidDataBytesThisMessage, uint8_t streamId, uint8_t dataByte00, uint8_t dataByte01, uint8_t dataByte02, uint8_t dataByte03, uint8_t dataByte04, uint8_t dataByte05, uint8_t dataByte06, uint8_t dataByte07, uint8_t dataByte08, uint8_t dataByte09, uint8_t dataByte10, uint8_t dataByte11, uint8_t dataByte12)
    {
        return impl::call_factory<MidiMessageBuilder, IMidiMessageBuilderStatics>([&](IMidiMessageBuilderStatics const& f) { return f.BuildSystemExclusive8Message(timestamp, group, status, numberOfValidDataBytesThisMessage, streamId, dataByte00, dataByte01, dataByte02, dataByte03, dataByte04, dataByte05, dataByte06, dataByte07, dataByte08, dataByte09, dataByte10, dataByte11, dataByte12); });
    }
    inline auto MidiMessageBuilder::BuildMixedDataSetChunkHeaderMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, uint8_t mdsId, uint16_t numberValidDataBytesInThisChunk, uint16_t numberChunksInMixedDataSet, uint16_t numberOfThisChunk, uint16_t manufacturerId, uint16_t deviceId, uint16_t subId1, uint16_t subId2)
    {
        return impl::call_factory<MidiMessageBuilder, IMidiMessageBuilderStatics>([&](IMidiMessageBuilderStatics const& f) { return f.BuildMixedDataSetChunkHeaderMessage(timestamp, group, mdsId, numberValidDataBytesInThisChunk, numberChunksInMixedDataSet, numberOfThisChunk, manufacturerId, deviceId, subId1, subId2); });
    }
    inline auto MidiMessageBuilder::BuildMixedDataSetChunkDataMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, uint8_t mdsId, uint8_t dataByte00, uint8_t dataByte01, uint8_t dataByte02, uint8_t dataByte03, uint8_t dataByte04, uint8_t dataByte05, uint8_t dataByte06, uint8_t dataByte07, uint8_t dataByte08, uint8_t dataByte09, uint8_t dataByte10, uint8_t dataByte11, uint8_t dataByte12, uint8_t dataByte13)
    {
        return impl::call_factory<MidiMessageBuilder, IMidiMessageBuilderStatics>([&](IMidiMessageBuilderStatics const& f) { return f.BuildMixedDataSetChunkDataMessage(timestamp, group, mdsId, dataByte00, dataByte01, dataByte02, dataByte03, dataByte04, dataByte05, dataByte06, dataByte07, dataByte08, dataByte09, dataByte10, dataByte11, dataByte12, dataByte13); });
    }
    inline auto MidiMessageBuilder::BuildFlexDataMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, uint8_t form, uint8_t address, winrt::Microsoft::Windows::Devices::Midi2::MidiChannel const& channel, uint8_t statusBank, uint8_t status, uint32_t word1Data, uint32_t word2Data, uint32_t word3Data)
    {
        return impl::call_factory<MidiMessageBuilder, IMidiMessageBuilderStatics>([&](IMidiMessageBuilderStatics const& f) { return f.BuildFlexDataMessage(timestamp, group, form, address, channel, statusBank, status, word1Data, word2Data, word3Data); });
    }
    inline auto MidiMessageBuilder::BuildStreamMessage(uint64_t timestamp, uint8_t form, uint16_t status, uint16_t word0RemainingData, uint32_t word1Data, uint32_t word2Data, uint32_t word3Data)
    {
        return impl::call_factory<MidiMessageBuilder, IMidiMessageBuilderStatics>([&](IMidiMessageBuilderStatics const& f) { return f.BuildStreamMessage(timestamp, form, status, word0RemainingData, word1Data, word2Data, word3Data); });
    }
    inline auto MidiMessageConverter::ConvertMidi1Message(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, uint8_t statusByte)
    {
        return impl::call_factory<MidiMessageConverter, IMidiMessageConverterStatics>([&](IMidiMessageConverterStatics const& f) { return f.ConvertMidi1Message(timestamp, group, statusByte); });
    }
    inline auto MidiMessageConverter::ConvertMidi1Message(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, uint8_t statusByte, uint8_t dataByte1)
    {
        return impl::call_factory<MidiMessageConverter, IMidiMessageConverterStatics>([&](IMidiMessageConverterStatics const& f) { return f.ConvertMidi1Message(timestamp, group, statusByte, dataByte1); });
    }
    inline auto MidiMessageConverter::ConvertMidi1Message(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, uint8_t statusByte, uint8_t dataByte1, uint8_t dataByte2)
    {
        return impl::call_factory<MidiMessageConverter, IMidiMessageConverterStatics>([&](IMidiMessageConverterStatics const& f) { return f.ConvertMidi1Message(timestamp, group, statusByte, dataByte1, dataByte2); });
    }
    inline auto MidiMessageConverter::ConvertMidi1ChannelPressureMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiChannelPressureMessage const& originalMessage)
    {
        return impl::call_factory<MidiMessageConverter, IMidiMessageConverterStatics>([&](IMidiMessageConverterStatics const& f) { return f.ConvertMidi1ChannelPressureMessage(timestamp, group, originalMessage); });
    }
    inline auto MidiMessageConverter::ConvertMidi1NoteOffMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiNoteOffMessage const& originalMessage)
    {
        return impl::call_factory<MidiMessageConverter, IMidiMessageConverterStatics>([&](IMidiMessageConverterStatics const& f) { return f.ConvertMidi1NoteOffMessage(timestamp, group, originalMessage); });
    }
    inline auto MidiMessageConverter::ConvertMidi1NoteOnMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiNoteOnMessage const& originalMessage)
    {
        return impl::call_factory<MidiMessageConverter, IMidiMessageConverterStatics>([&](IMidiMessageConverterStatics const& f) { return f.ConvertMidi1NoteOnMessage(timestamp, group, originalMessage); });
    }
    inline auto MidiMessageConverter::ConvertMidi1PitchBendChangeMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiPitchBendChangeMessage const& originalMessage)
    {
        return impl::call_factory<MidiMessageConverter, IMidiMessageConverterStatics>([&](IMidiMessageConverterStatics const& f) { return f.ConvertMidi1PitchBendChangeMessage(timestamp, group, originalMessage); });
    }
    inline auto MidiMessageConverter::ConvertMidi1PolyphonicKeyPressureMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiPolyphonicKeyPressureMessage const& originalMessage)
    {
        return impl::call_factory<MidiMessageConverter, IMidiMessageConverterStatics>([&](IMidiMessageConverterStatics const& f) { return f.ConvertMidi1PolyphonicKeyPressureMessage(timestamp, group, originalMessage); });
    }
    inline auto MidiMessageConverter::ConvertMidi1ProgramChangeMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiProgramChangeMessage const& originalMessage)
    {
        return impl::call_factory<MidiMessageConverter, IMidiMessageConverterStatics>([&](IMidiMessageConverterStatics const& f) { return f.ConvertMidi1ProgramChangeMessage(timestamp, group, originalMessage); });
    }
    inline auto MidiMessageConverter::ConvertMidi1TimeCodeMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiTimeCodeMessage const& originalMessage)
    {
        return impl::call_factory<MidiMessageConverter, IMidiMessageConverterStatics>([&](IMidiMessageConverterStatics const& f) { return f.ConvertMidi1TimeCodeMessage(timestamp, group, originalMessage); });
    }
    inline auto MidiMessageConverter::ConvertMidi1SongPositionPointerMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiSongPositionPointerMessage const& originalMessage)
    {
        return impl::call_factory<MidiMessageConverter, IMidiMessageConverterStatics>([&](IMidiMessageConverterStatics const& f) { return f.ConvertMidi1SongPositionPointerMessage(timestamp, group, originalMessage); });
    }
    inline auto MidiMessageConverter::ConvertMidi1SongSelectMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiSongSelectMessage const& originalMessage)
    {
        return impl::call_factory<MidiMessageConverter, IMidiMessageConverterStatics>([&](IMidiMessageConverterStatics const& f) { return f.ConvertMidi1SongSelectMessage(timestamp, group, originalMessage); });
    }
    inline auto MidiMessageConverter::ConvertMidi1TuneRequestMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiTuneRequestMessage const& originalMessage)
    {
        return impl::call_factory<MidiMessageConverter, IMidiMessageConverterStatics>([&](IMidiMessageConverterStatics const& f) { return f.ConvertMidi1TuneRequestMessage(timestamp, group, originalMessage); });
    }
    inline auto MidiMessageConverter::ConvertMidi1TimingClockMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiTimingClockMessage const& originalMessage)
    {
        return impl::call_factory<MidiMessageConverter, IMidiMessageConverterStatics>([&](IMidiMessageConverterStatics const& f) { return f.ConvertMidi1TimingClockMessage(timestamp, group, originalMessage); });
    }
    inline auto MidiMessageConverter::ConvertMidi1StartMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiStartMessage const& originalMessage)
    {
        return impl::call_factory<MidiMessageConverter, IMidiMessageConverterStatics>([&](IMidiMessageConverterStatics const& f) { return f.ConvertMidi1StartMessage(timestamp, group, originalMessage); });
    }
    inline auto MidiMessageConverter::ConvertMidi1ContinueMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiContinueMessage const& originalMessage)
    {
        return impl::call_factory<MidiMessageConverter, IMidiMessageConverterStatics>([&](IMidiMessageConverterStatics const& f) { return f.ConvertMidi1ContinueMessage(timestamp, group, originalMessage); });
    }
    inline auto MidiMessageConverter::ConvertMidi1StopMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiStopMessage const& originalMessage)
    {
        return impl::call_factory<MidiMessageConverter, IMidiMessageConverterStatics>([&](IMidiMessageConverterStatics const& f) { return f.ConvertMidi1StopMessage(timestamp, group, originalMessage); });
    }
    inline auto MidiMessageConverter::ConvertMidi1ActiveSensingMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiActiveSensingMessage const& originalMessage)
    {
        return impl::call_factory<MidiMessageConverter, IMidiMessageConverterStatics>([&](IMidiMessageConverterStatics const& f) { return f.ConvertMidi1ActiveSensingMessage(timestamp, group, originalMessage); });
    }
    inline auto MidiMessageConverter::ConvertMidi1SystemResetMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiSystemResetMessage const& originalMessage)
    {
        return impl::call_factory<MidiMessageConverter, IMidiMessageConverterStatics>([&](IMidiMessageConverterStatics const& f) { return f.ConvertMidi1SystemResetMessage(timestamp, group, originalMessage); });
    }
    inline auto MidiMessageHelper::ValidateMessage32MessageType(uint32_t word0)
    {
        return impl::call_factory<MidiMessageHelper, IMidiMessageHelperStatics>([&](IMidiMessageHelperStatics const& f) { return f.ValidateMessage32MessageType(word0); });
    }
    inline auto MidiMessageHelper::ValidateMessage64MessageType(uint32_t word0)
    {
        return impl::call_factory<MidiMessageHelper, IMidiMessageHelperStatics>([&](IMidiMessageHelperStatics const& f) { return f.ValidateMessage64MessageType(word0); });
    }
    inline auto MidiMessageHelper::ValidateMessage96MessageType(uint32_t word0)
    {
        return impl::call_factory<MidiMessageHelper, IMidiMessageHelperStatics>([&](IMidiMessageHelperStatics const& f) { return f.ValidateMessage96MessageType(word0); });
    }
    inline auto MidiMessageHelper::ValidateMessage128MessageType(uint32_t word0)
    {
        return impl::call_factory<MidiMessageHelper, IMidiMessageHelperStatics>([&](IMidiMessageHelperStatics const& f) { return f.ValidateMessage128MessageType(word0); });
    }
    inline auto MidiMessageHelper::GetMessageTypeFromMessageFirstWord(uint32_t word0)
    {
        return impl::call_factory<MidiMessageHelper, IMidiMessageHelperStatics>([&](IMidiMessageHelperStatics const& f) { return f.GetMessageTypeFromMessageFirstWord(word0); });
    }
    inline auto MidiMessageHelper::GetPacketTypeFromMessageFirstWord(uint32_t word0)
    {
        return impl::call_factory<MidiMessageHelper, IMidiMessageHelperStatics>([&](IMidiMessageHelperStatics const& f) { return f.GetPacketTypeFromMessageFirstWord(word0); });
    }
    inline auto MidiMessageHelper::MessageTypeHasGroupField(winrt::Microsoft::Windows::Devices::Midi2::MidiMessageType const& messageType)
    {
        return impl::call_factory<MidiMessageHelper, IMidiMessageHelperStatics>([&](IMidiMessageHelperStatics const& f) { return f.MessageTypeHasGroupField(messageType); });
    }
    inline auto MidiMessageHelper::ReplaceGroupInMessageFirstWord(uint32_t word0, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& newGroup)
    {
        return impl::call_factory<MidiMessageHelper, IMidiMessageHelperStatics>([&](IMidiMessageHelperStatics const& f) { return f.ReplaceGroupInMessageFirstWord(word0, newGroup); });
    }
    inline auto MidiMessageHelper::GetGroupFromMessageFirstWord(uint32_t word0)
    {
        return impl::call_factory<MidiMessageHelper, IMidiMessageHelperStatics>([&](IMidiMessageHelperStatics const& f) { return f.GetGroupFromMessageFirstWord(word0); });
    }
    inline auto MidiMessageHelper::GetStatusFromUtilityMessage(uint32_t word0)
    {
        return impl::call_factory<MidiMessageHelper, IMidiMessageHelperStatics>([&](IMidiMessageHelperStatics const& f) { return f.GetStatusFromUtilityMessage(word0); });
    }
    inline auto MidiMessageHelper::GetStatusFromMidi1ChannelVoiceMessage(uint32_t word0)
    {
        return impl::call_factory<MidiMessageHelper, IMidiMessageHelperStatics>([&](IMidiMessageHelperStatics const& f) { return f.GetStatusFromMidi1ChannelVoiceMessage(word0); });
    }
    inline auto MidiMessageHelper::GetStatusFromMidi2ChannelVoiceMessageFirstWord(uint32_t word0)
    {
        return impl::call_factory<MidiMessageHelper, IMidiMessageHelperStatics>([&](IMidiMessageHelperStatics const& f) { return f.GetStatusFromMidi2ChannelVoiceMessageFirstWord(word0); });
    }
    inline auto MidiMessageHelper::GetStatusBankFromFlexDataMessageFirstWord(uint32_t word0)
    {
        return impl::call_factory<MidiMessageHelper, IMidiMessageHelperStatics>([&](IMidiMessageHelperStatics const& f) { return f.GetStatusBankFromFlexDataMessageFirstWord(word0); });
    }
    inline auto MidiMessageHelper::GetStatusFromFlexDataMessageFirstWord(uint32_t word0)
    {
        return impl::call_factory<MidiMessageHelper, IMidiMessageHelperStatics>([&](IMidiMessageHelperStatics const& f) { return f.GetStatusFromFlexDataMessageFirstWord(word0); });
    }
    inline auto MidiMessageHelper::GetStatusFromSystemCommonMessage(uint32_t word0)
    {
        return impl::call_factory<MidiMessageHelper, IMidiMessageHelperStatics>([&](IMidiMessageHelperStatics const& f) { return f.GetStatusFromSystemCommonMessage(word0); });
    }
    inline auto MidiMessageHelper::GetStatusFromDataMessage64FirstWord(uint32_t word0)
    {
        return impl::call_factory<MidiMessageHelper, IMidiMessageHelperStatics>([&](IMidiMessageHelperStatics const& f) { return f.GetStatusFromDataMessage64FirstWord(word0); });
    }
    inline auto MidiMessageHelper::GetNumberOfBytesFromDataMessage64FirstWord(uint32_t word0)
    {
        return impl::call_factory<MidiMessageHelper, IMidiMessageHelperStatics>([&](IMidiMessageHelperStatics const& f) { return f.GetNumberOfBytesFromDataMessage64FirstWord(word0); });
    }
    inline auto MidiMessageHelper::GetStatusFromDataMessage128FirstWord(uint32_t word0)
    {
        return impl::call_factory<MidiMessageHelper, IMidiMessageHelperStatics>([&](IMidiMessageHelperStatics const& f) { return f.GetStatusFromDataMessage128FirstWord(word0); });
    }
    inline auto MidiMessageHelper::GetNumberOfBytesFromDataMessage128FirstWord(uint32_t word0)
    {
        return impl::call_factory<MidiMessageHelper, IMidiMessageHelperStatics>([&](IMidiMessageHelperStatics const& f) { return f.GetNumberOfBytesFromDataMessage128FirstWord(word0); });
    }
    inline auto MidiMessageHelper::MessageTypeHasChannelField(winrt::Microsoft::Windows::Devices::Midi2::MidiMessageType const& messageType)
    {
        return impl::call_factory<MidiMessageHelper, IMidiMessageHelperStatics>([&](IMidiMessageHelperStatics const& f) { return f.MessageTypeHasChannelField(messageType); });
    }
    inline auto MidiMessageHelper::ReplaceChannelInMessageFirstWord(uint32_t word0, winrt::Microsoft::Windows::Devices::Midi2::MidiChannel const& newChannel)
    {
        return impl::call_factory<MidiMessageHelper, IMidiMessageHelperStatics>([&](IMidiMessageHelperStatics const& f) { return f.ReplaceChannelInMessageFirstWord(word0, newChannel); });
    }
    inline auto MidiMessageHelper::GetChannelFromMessageFirstWord(uint32_t word0)
    {
        return impl::call_factory<MidiMessageHelper, IMidiMessageHelperStatics>([&](IMidiMessageHelperStatics const& f) { return f.GetChannelFromMessageFirstWord(word0); });
    }
    inline auto MidiMessageHelper::GetFormFromStreamMessageFirstWord(uint32_t word0)
    {
        return impl::call_factory<MidiMessageHelper, IMidiMessageHelperStatics>([&](IMidiMessageHelperStatics const& f) { return f.GetFormFromStreamMessageFirstWord(word0); });
    }
    inline auto MidiMessageHelper::GetStatusFromStreamMessageFirstWord(uint32_t word0)
    {
        return impl::call_factory<MidiMessageHelper, IMidiMessageHelperStatics>([&](IMidiMessageHelperStatics const& f) { return f.GetStatusFromStreamMessageFirstWord(word0); });
    }
    inline auto MidiMessageHelper::GetMessageDisplayNameFromFirstWord(uint32_t word0)
    {
        return impl::call_factory<MidiMessageHelper, IMidiMessageHelperStatics>([&](IMidiMessageHelperStatics const& f) { return f.GetMessageDisplayNameFromFirstWord(word0); });
    }
    inline auto MidiMessageHelper::GetPacketListFromWordList(uint64_t timestamp, param::iterable<uint32_t> const& words)
    {
        return impl::call_factory<MidiMessageHelper, IMidiMessageHelperStatics>([&](IMidiMessageHelperStatics const& f) { return f.GetPacketListFromWordList(timestamp, words); });
    }
    inline auto MidiMessageHelper::GetWordListFromPacketList(param::iterable<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket> const& words)
    {
        return impl::call_factory<MidiMessageHelper, IMidiMessageHelperStatics>([&](IMidiMessageHelperStatics const& f) { return f.GetWordListFromPacketList(words); });
    }
    inline auto MidiStreamMessageBuilder::BuildEndpointDiscoveryMessage(uint64_t timestamp, uint8_t umpVersionMajor, uint8_t umpVersionMinor, winrt::Microsoft::Windows::Devices::Midi2::Messages::MidiEndpointDiscoveryRequests const& request)
    {
        return impl::call_factory<MidiStreamMessageBuilder, IMidiStreamMessageBuilderStatics>([&](IMidiStreamMessageBuilderStatics const& f) { return f.BuildEndpointDiscoveryMessage(timestamp, umpVersionMajor, umpVersionMinor, request); });
    }
    inline auto MidiStreamMessageBuilder::BuildEndpointInfoNotificationMessage(uint64_t timestamp, uint8_t umpVersionMajor, uint8_t umpVersionMinor, bool hasStaticFunctionBlocks, uint8_t numberOfFunctionBlocks, bool supportsMidi20Protocol, bool supportsMidi10Protocol, bool supportsReceivingJitterReductionTimestamps, bool supportsSendingJitterReductionTimestamps)
    {
        return impl::call_factory<MidiStreamMessageBuilder, IMidiStreamMessageBuilderStatics>([&](IMidiStreamMessageBuilderStatics const& f) { return f.BuildEndpointInfoNotificationMessage(timestamp, umpVersionMajor, umpVersionMinor, hasStaticFunctionBlocks, numberOfFunctionBlocks, supportsMidi20Protocol, supportsMidi10Protocol, supportsReceivingJitterReductionTimestamps, supportsSendingJitterReductionTimestamps); });
    }
    inline auto MidiStreamMessageBuilder::BuildDeviceIdentityNotificationMessage(uint64_t timestamp, uint8_t deviceManufacturerSysExIdByte1, uint8_t deviceManufacturerSysExIdByte2, uint8_t deviceManufacturerSysExIdByte3, uint8_t deviceFamilyLsb, uint8_t deviceFamilyMsb, uint8_t deviceFamilyModelNumberLsb, uint8_t deviceFamilyModelNumberMsb, uint8_t softwareRevisionLevelByte1, uint8_t softwareRevisionLevelByte2, uint8_t softwareRevisionLevelByte3, uint8_t softwareRevisionLevelByte4)
    {
        return impl::call_factory<MidiStreamMessageBuilder, IMidiStreamMessageBuilderStatics>([&](IMidiStreamMessageBuilderStatics const& f) { return f.BuildDeviceIdentityNotificationMessage(timestamp, deviceManufacturerSysExIdByte1, deviceManufacturerSysExIdByte2, deviceManufacturerSysExIdByte3, deviceFamilyLsb, deviceFamilyMsb, deviceFamilyModelNumberLsb, deviceFamilyModelNumberMsb, softwareRevisionLevelByte1, softwareRevisionLevelByte2, softwareRevisionLevelByte3, softwareRevisionLevelByte4); });
    }
    inline auto MidiStreamMessageBuilder::BuildEndpointNameNotificationMessages(uint64_t timestamp, param::hstring const& name)
    {
        return impl::call_factory<MidiStreamMessageBuilder, IMidiStreamMessageBuilderStatics>([&](IMidiStreamMessageBuilderStatics const& f) { return f.BuildEndpointNameNotificationMessages(timestamp, name); });
    }
    inline auto MidiStreamMessageBuilder::BuildProductInstanceIdNotificationMessages(uint64_t timestamp, param::hstring const& productInstanceId)
    {
        return impl::call_factory<MidiStreamMessageBuilder, IMidiStreamMessageBuilderStatics>([&](IMidiStreamMessageBuilderStatics const& f) { return f.BuildProductInstanceIdNotificationMessages(timestamp, productInstanceId); });
    }
    inline auto MidiStreamMessageBuilder::ParseEndpointNameNotificationMessages(param::iterable<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket> const& messages)
    {
        return impl::call_factory<MidiStreamMessageBuilder, IMidiStreamMessageBuilderStatics>([&](IMidiStreamMessageBuilderStatics const& f) { return f.ParseEndpointNameNotificationMessages(messages); });
    }
    inline auto MidiStreamMessageBuilder::ParseProductInstanceIdNotificationMessages(param::iterable<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket> const& messages)
    {
        return impl::call_factory<MidiStreamMessageBuilder, IMidiStreamMessageBuilderStatics>([&](IMidiStreamMessageBuilderStatics const& f) { return f.ParseProductInstanceIdNotificationMessages(messages); });
    }
    inline auto MidiStreamMessageBuilder::BuildStreamConfigurationRequestMessage(uint64_t timestamp, uint8_t protocol, bool expectToReceiveJRTimestamps, bool requestToSendJRTimestamps)
    {
        return impl::call_factory<MidiStreamMessageBuilder, IMidiStreamMessageBuilderStatics>([&](IMidiStreamMessageBuilderStatics const& f) { return f.BuildStreamConfigurationRequestMessage(timestamp, protocol, expectToReceiveJRTimestamps, requestToSendJRTimestamps); });
    }
    inline auto MidiStreamMessageBuilder::BuildStreamConfigurationNotificationMessage(uint64_t timestamp, uint8_t protocol, bool confirmationWillReceiveJRTimestamps, bool confirmationSendJRTimestamps)
    {
        return impl::call_factory<MidiStreamMessageBuilder, IMidiStreamMessageBuilderStatics>([&](IMidiStreamMessageBuilderStatics const& f) { return f.BuildStreamConfigurationNotificationMessage(timestamp, protocol, confirmationWillReceiveJRTimestamps, confirmationSendJRTimestamps); });
    }
    inline auto MidiStreamMessageBuilder::BuildFunctionBlockDiscoveryMessage(uint64_t timestamp, uint8_t functionBlockNumber, winrt::Microsoft::Windows::Devices::Midi2::Messages::MidiFunctionBlockDiscoveryRequests const& requestFlags)
    {
        return impl::call_factory<MidiStreamMessageBuilder, IMidiStreamMessageBuilderStatics>([&](IMidiStreamMessageBuilderStatics const& f) { return f.BuildFunctionBlockDiscoveryMessage(timestamp, functionBlockNumber, requestFlags); });
    }
    inline auto MidiStreamMessageBuilder::BuildFunctionBlockInfoNotificationMessage(uint64_t timestamp, bool active, uint8_t functionBlockNumber, winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockUIHint const& uiHint, winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockRepresentsMidi10Connection const& midi10, winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockDirection const& direction, uint8_t firstGroup, uint8_t numberOfGroups, uint8_t midiCIVersionFormat, uint8_t maxNumberSysEx8Streams)
    {
        return impl::call_factory<MidiStreamMessageBuilder, IMidiStreamMessageBuilderStatics>([&](IMidiStreamMessageBuilderStatics const& f) { return f.BuildFunctionBlockInfoNotificationMessage(timestamp, active, functionBlockNumber, uiHint, midi10, direction, firstGroup, numberOfGroups, midiCIVersionFormat, maxNumberSysEx8Streams); });
    }
    inline auto MidiStreamMessageBuilder::BuildFunctionBlockNameNotificationMessages(uint64_t timestamp, uint8_t functionBlockNumber, param::hstring const& name)
    {
        return impl::call_factory<MidiStreamMessageBuilder, IMidiStreamMessageBuilderStatics>([&](IMidiStreamMessageBuilderStatics const& f) { return f.BuildFunctionBlockNameNotificationMessages(timestamp, functionBlockNumber, name); });
    }
    inline auto MidiStreamMessageBuilder::ParseFunctionBlockNameNotificationMessages(param::iterable<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket> const& messages)
    {
        return impl::call_factory<MidiStreamMessageBuilder, IMidiStreamMessageBuilderStatics>([&](IMidiStreamMessageBuilderStatics const& f) { return f.ParseFunctionBlockNameNotificationMessages(messages); });
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageBuilderStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageConverterStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiStreamMessageBuilderStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::Messages::MidiMessageBuilder> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::Messages::MidiMessageConverter> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::Messages::MidiMessageHelper> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::Messages::MidiStreamMessageBuilder> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif

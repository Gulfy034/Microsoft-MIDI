// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#ifndef WINRT_Microsoft_Windows_Devices_Midi2_0_H
#define WINRT_Microsoft_Windows_Devices_Midi2_0_H
WINRT_EXPORT namespace winrt::Windows::Devices::Enumeration
{
    struct DeviceInformation;
    struct DeviceInformationUpdate;
    enum class DeviceWatcherStatus : int32_t;
}
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    struct EventRegistrationToken;
    struct IMemoryBuffer;
    template <typename TSender, typename TResult> struct WINRT_IMPL_EMPTY_BASES TypedEventHandler;
}
WINRT_EXPORT namespace winrt::Windows::Foundation::Collections
{
    template <typename T> struct WINRT_IMPL_EMPTY_BASES IIterable;
    template <typename T> struct WINRT_IMPL_EMPTY_BASES IVector;
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::Devices::Midi2
{
    enum class MidiEndpointDeviceInformationFilters : uint32_t
    {
        StandardNativeUniversalMidiPacketFormat = 0x1,
        StandardNativeMidi1ByteFormat = 0x2,
        VirtualDeviceResponder = 0x100,
        DiagnosticLoopback = 0x10000,
        DiagnosticPing = 0x20000,
        AllStandardEndpoints = 0x3,
    };
    enum class MidiEndpointDeviceInformationSortOrder : int32_t
    {
        None = 0,
        Name = 1,
        EndpointDeviceId = 2,
        DeviceInstanceId = 3,
        ContainerThenName = 11,
        ContainerThenEndpointDeviceId = 12,
        ContainerThenDeviceInstanceId = 13,
        TransportMnemonicThenName = 21,
        TransportMnemonicThenEndpointDeviceId = 22,
        TransportMnemonicThenDeviceInstanceId = 23,
    };
    enum class MidiEndpointDevicePurpose : int32_t
    {
        NormalMessageEndpoint = 0,
        VirtualDeviceResponder = 100,
        InBoxGeneralMidiSynth = 400,
        DiagnosticLoopback = 500,
        DiagnosticPing = 510,
    };
    enum class MidiEndpointNativeDataFormat : int32_t
    {
        Unknown = 0,
        Midi1ByteFormat = 1,
        UniversalMidiPacketFormat = 2,
    };
    enum class MidiFunctionBlockDirection : int32_t
    {
        Undefined = 0,
        BlockInput = 1,
        BlockOutput = 2,
        Bidirectional = 3,
    };
    enum class MidiFunctionBlockRepresentsMidi10Connection : int32_t
    {
        Not10 = 0,
        YesBandwidthUnrestricted = 1,
        YesBandwidthRestricted = 2,
        Reserved = 3,
    };
    enum class MidiFunctionBlockUIHint : int32_t
    {
        Unknown = 0,
        Receiver = 1,
        Sender = 2,
        Bidirectional = 3,
    };
    enum class MidiGroupTerminalBlockDirection : int32_t
    {
        Bidirectional = 0,
        BlockInput = 1,
        BlockOutput = 2,
    };
    enum class MidiGroupTerminalBlockProtocol : int32_t
    {
        Unknown = 0,
        Midi1Message64 = 1,
        Midi1Message64WithJitterReduction = 2,
        Midi1Message128 = 3,
        Midi1Message128WithJitterReduction = 4,
        Midi2 = 17,
        Midi2WithJitterReduction = 18,
    };
    enum class MidiMessageType : int32_t
    {
        UtilityMessage32 = 0,
        SystemCommon32 = 1,
        Midi1ChannelVoice32 = 2,
        DataMessage64 = 3,
        Midi2ChannelVoice64 = 4,
        DataMessage128 = 5,
        FutureReserved632 = 6,
        FutureReserved732 = 7,
        FutureReserved864 = 8,
        FutureReserved964 = 9,
        FutureReservedA64 = 10,
        FutureReservedB96 = 11,
        FutureReservedC96 = 12,
        FlexData128 = 13,
        FutureReservedE128 = 14,
        Stream128 = 15,
    };
    enum class MidiPacketType : int32_t
    {
        UnknownOrInvalid = 0,
        UniversalMidiPacket32 = 1,
        UniversalMidiPacket64 = 2,
        UniversalMidiPacket96 = 3,
        UniversalMidiPacket128 = 4,
    };
    enum class MidiProtocol : int32_t
    {
        Default = 0,
        Midi1 = 1,
        Midi2 = 2,
    };
    enum class MidiSendMessageResults : uint32_t
    {
        Succeeded = 0x80000000,
        Failed = 0x10000000,
        BufferFull = 0x10000,
        EndpointConnectionClosedOrInvalid = 0x40000,
        InvalidMessageTypeForWordCount = 0x100000,
        InvalidMessageOther = 0x200000,
        DataIndexOutOfRange = 0x400000,
        TimestampOutOfRange = 0x800000,
        MessageListPartiallyProcessed = 0xf00000,
    };
    struct IMidiChannel;
    struct IMidiChannelFactory;
    struct IMidiChannelStatics;
    struct IMidiClock;
    struct IMidiClockStatics;
    struct IMidiEndpointConnection;
    struct IMidiEndpointConnectionSettings;
    struct IMidiEndpointConnectionSource;
    struct IMidiEndpointConnectionStatics;
    struct IMidiEndpointDeviceInformation;
    struct IMidiEndpointDeviceInformationAddedEventArgs;
    struct IMidiEndpointDeviceInformationRemovedEventArgs;
    struct IMidiEndpointDeviceInformationStatics;
    struct IMidiEndpointDeviceInformationUpdatedEventArgs;
    struct IMidiEndpointDeviceWatcher;
    struct IMidiEndpointDeviceWatcherStatics;
    struct IMidiEndpointMessageProcessingPlugin;
    struct IMidiFunctionBlock;
    struct IMidiGroup;
    struct IMidiGroupFactory;
    struct IMidiGroupStatics;
    struct IMidiGroupTerminalBlock;
    struct IMidiMessage128;
    struct IMidiMessage128Factory;
    struct IMidiMessage128Statics;
    struct IMidiMessage32;
    struct IMidiMessage32Factory;
    struct IMidiMessage32Statics;
    struct IMidiMessage64;
    struct IMidiMessage64Factory;
    struct IMidiMessage64Statics;
    struct IMidiMessage96;
    struct IMidiMessage96Factory;
    struct IMidiMessage96Statics;
    struct IMidiMessageReceivedEventArgs;
    struct IMidiMessageReceivedEventSource;
    struct IMidiSession;
    struct IMidiSessionStatics;
    struct IMidiUniversalPacket;
    struct MidiChannel;
    struct MidiClock;
    struct MidiEndpointConnection;
    struct MidiEndpointDeviceInformation;
    struct MidiEndpointDeviceInformationAddedEventArgs;
    struct MidiEndpointDeviceInformationRemovedEventArgs;
    struct MidiEndpointDeviceInformationUpdatedEventArgs;
    struct MidiEndpointDeviceWatcher;
    struct MidiFunctionBlock;
    struct MidiGroup;
    struct MidiGroupTerminalBlock;
    struct MidiMessage128;
    struct MidiMessage32;
    struct MidiMessage64;
    struct MidiMessage96;
    struct MidiMessageReceivedEventArgs;
    struct MidiSession;
    struct MidiDeclaredDeviceIdentity;
    struct MidiDeclaredEndpointInfo;
    struct MidiDeclaredStreamConfiguration;
    struct MidiEndpointTransportSuppliedInfo;
    struct MidiEndpointUserSuppliedInfo;
    struct MidiMessageStruct;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiChannel>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiChannelFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiChannelStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiClock>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiClockStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSettings>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSource>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformation>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationAddedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationRemovedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationUpdatedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcherStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointMessageProcessingPlugin>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiGroup>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupTerminalBlock>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128Factory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128Statics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32Factory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32Statics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64Factory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64Statics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96Factory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96Statics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventSource>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiSession>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiSessionStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiChannel>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiClock>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointConnection>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformation>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationAddedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationRemovedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationUpdatedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlock>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiGroupTerminalBlock>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage128>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage64>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage96>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageReceivedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiSession>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationFilters>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationSortOrder>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDevicePurpose>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointNativeDataFormat>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockDirection>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockRepresentsMidi10Connection>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockUIHint>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiGroupTerminalBlockDirection>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiGroupTerminalBlockProtocol>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageType>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiPacketType>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiProtocol>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiDeclaredDeviceIdentity>{ using type = struct_category<uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t>; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiDeclaredEndpointInfo>{ using type = struct_category<hstring, hstring, bool, bool, bool, bool, bool, uint8_t, uint8_t, uint8_t>; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiDeclaredStreamConfiguration>{ using type = struct_category<winrt::Microsoft::Windows::Devices::Midi2::MidiProtocol, bool, bool>; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointTransportSuppliedInfo>{ using type = struct_category<hstring, hstring, hstring, uint16_t, uint16_t, hstring, bool, winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointNativeDataFormat, winrt::guid, hstring>; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointUserSuppliedInfo>{ using type = struct_category<hstring, hstring, hstring, hstring, bool, uint16_t, bool>; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct>{ using type = struct_category<uint32_t, uint32_t, uint32_t, uint32_t>; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiChannel> = L"Microsoft.Windows.Devices.Midi2.MidiChannel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiClock> = L"Microsoft.Windows.Devices.Midi2.MidiClock";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointConnection> = L"Microsoft.Windows.Devices.Midi2.MidiEndpointConnection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformation> = L"Microsoft.Windows.Devices.Midi2.MidiEndpointDeviceInformation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationAddedEventArgs> = L"Microsoft.Windows.Devices.Midi2.MidiEndpointDeviceInformationAddedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationRemovedEventArgs> = L"Microsoft.Windows.Devices.Midi2.MidiEndpointDeviceInformationRemovedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationUpdatedEventArgs> = L"Microsoft.Windows.Devices.Midi2.MidiEndpointDeviceInformationUpdatedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher> = L"Microsoft.Windows.Devices.Midi2.MidiEndpointDeviceWatcher";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlock> = L"Microsoft.Windows.Devices.Midi2.MidiFunctionBlock";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup> = L"Microsoft.Windows.Devices.Midi2.MidiGroup";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiGroupTerminalBlock> = L"Microsoft.Windows.Devices.Midi2.MidiGroupTerminalBlock";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage128> = L"Microsoft.Windows.Devices.Midi2.MidiMessage128";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32> = L"Microsoft.Windows.Devices.Midi2.MidiMessage32";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage64> = L"Microsoft.Windows.Devices.Midi2.MidiMessage64";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage96> = L"Microsoft.Windows.Devices.Midi2.MidiMessage96";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageReceivedEventArgs> = L"Microsoft.Windows.Devices.Midi2.MidiMessageReceivedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiSession> = L"Microsoft.Windows.Devices.Midi2.MidiSession";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationFilters> = L"Microsoft.Windows.Devices.Midi2.MidiEndpointDeviceInformationFilters";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationSortOrder> = L"Microsoft.Windows.Devices.Midi2.MidiEndpointDeviceInformationSortOrder";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDevicePurpose> = L"Microsoft.Windows.Devices.Midi2.MidiEndpointDevicePurpose";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointNativeDataFormat> = L"Microsoft.Windows.Devices.Midi2.MidiEndpointNativeDataFormat";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockDirection> = L"Microsoft.Windows.Devices.Midi2.MidiFunctionBlockDirection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockRepresentsMidi10Connection> = L"Microsoft.Windows.Devices.Midi2.MidiFunctionBlockRepresentsMidi10Connection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockUIHint> = L"Microsoft.Windows.Devices.Midi2.MidiFunctionBlockUIHint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiGroupTerminalBlockDirection> = L"Microsoft.Windows.Devices.Midi2.MidiGroupTerminalBlockDirection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiGroupTerminalBlockProtocol> = L"Microsoft.Windows.Devices.Midi2.MidiGroupTerminalBlockProtocol";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageType> = L"Microsoft.Windows.Devices.Midi2.MidiMessageType";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiPacketType> = L"Microsoft.Windows.Devices.Midi2.MidiPacketType";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiProtocol> = L"Microsoft.Windows.Devices.Midi2.MidiProtocol";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults> = L"Microsoft.Windows.Devices.Midi2.MidiSendMessageResults";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiDeclaredDeviceIdentity> = L"Microsoft.Windows.Devices.Midi2.MidiDeclaredDeviceIdentity";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiDeclaredEndpointInfo> = L"Microsoft.Windows.Devices.Midi2.MidiDeclaredEndpointInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiDeclaredStreamConfiguration> = L"Microsoft.Windows.Devices.Midi2.MidiDeclaredStreamConfiguration";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointTransportSuppliedInfo> = L"Microsoft.Windows.Devices.Midi2.MidiEndpointTransportSuppliedInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointUserSuppliedInfo> = L"Microsoft.Windows.Devices.Midi2.MidiEndpointUserSuppliedInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct> = L"Microsoft.Windows.Devices.Midi2.MidiMessageStruct";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiChannel> = L"Microsoft.Windows.Devices.Midi2.IMidiChannel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiChannelFactory> = L"Microsoft.Windows.Devices.Midi2.IMidiChannelFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiChannelStatics> = L"Microsoft.Windows.Devices.Midi2.IMidiChannelStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiClock> = L"Microsoft.Windows.Devices.Midi2.IMidiClock";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiClockStatics> = L"Microsoft.Windows.Devices.Midi2.IMidiClockStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection> = L"Microsoft.Windows.Devices.Midi2.IMidiEndpointConnection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSettings> = L"Microsoft.Windows.Devices.Midi2.IMidiEndpointConnectionSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSource> = L"Microsoft.Windows.Devices.Midi2.IMidiEndpointConnectionSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionStatics> = L"Microsoft.Windows.Devices.Midi2.IMidiEndpointConnectionStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformation> = L"Microsoft.Windows.Devices.Midi2.IMidiEndpointDeviceInformation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationAddedEventArgs> = L"Microsoft.Windows.Devices.Midi2.IMidiEndpointDeviceInformationAddedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationRemovedEventArgs> = L"Microsoft.Windows.Devices.Midi2.IMidiEndpointDeviceInformationRemovedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationStatics> = L"Microsoft.Windows.Devices.Midi2.IMidiEndpointDeviceInformationStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationUpdatedEventArgs> = L"Microsoft.Windows.Devices.Midi2.IMidiEndpointDeviceInformationUpdatedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher> = L"Microsoft.Windows.Devices.Midi2.IMidiEndpointDeviceWatcher";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcherStatics> = L"Microsoft.Windows.Devices.Midi2.IMidiEndpointDeviceWatcherStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointMessageProcessingPlugin> = L"Microsoft.Windows.Devices.Midi2.IMidiEndpointMessageProcessingPlugin";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock> = L"Microsoft.Windows.Devices.Midi2.IMidiFunctionBlock";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiGroup> = L"Microsoft.Windows.Devices.Midi2.IMidiGroup";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupFactory> = L"Microsoft.Windows.Devices.Midi2.IMidiGroupFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupStatics> = L"Microsoft.Windows.Devices.Midi2.IMidiGroupStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupTerminalBlock> = L"Microsoft.Windows.Devices.Midi2.IMidiGroupTerminalBlock";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128> = L"Microsoft.Windows.Devices.Midi2.IMidiMessage128";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128Factory> = L"Microsoft.Windows.Devices.Midi2.IMidiMessage128Factory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128Statics> = L"Microsoft.Windows.Devices.Midi2.IMidiMessage128Statics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32> = L"Microsoft.Windows.Devices.Midi2.IMidiMessage32";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32Factory> = L"Microsoft.Windows.Devices.Midi2.IMidiMessage32Factory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32Statics> = L"Microsoft.Windows.Devices.Midi2.IMidiMessage32Statics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64> = L"Microsoft.Windows.Devices.Midi2.IMidiMessage64";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64Factory> = L"Microsoft.Windows.Devices.Midi2.IMidiMessage64Factory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64Statics> = L"Microsoft.Windows.Devices.Midi2.IMidiMessage64Statics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96> = L"Microsoft.Windows.Devices.Midi2.IMidiMessage96";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96Factory> = L"Microsoft.Windows.Devices.Midi2.IMidiMessage96Factory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96Statics> = L"Microsoft.Windows.Devices.Midi2.IMidiMessage96Statics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventArgs> = L"Microsoft.Windows.Devices.Midi2.IMidiMessageReceivedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventSource> = L"Microsoft.Windows.Devices.Midi2.IMidiMessageReceivedEventSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiSession> = L"Microsoft.Windows.Devices.Midi2.IMidiSession";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiSessionStatics> = L"Microsoft.Windows.Devices.Midi2.IMidiSessionStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket> = L"Microsoft.Windows.Devices.Midi2.IMidiUniversalPacket";
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiChannel>{ 0x34DC7F81,0xF0C2,0x50D4,{ 0xBE,0xDF,0x42,0xFA,0xB9,0xA1,0xCE,0xF8 } }; // 34DC7F81-F0C2-50D4-BEDF-42FAB9A1CEF8
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiChannelFactory>{ 0x02A0FF18,0xFE96,0x5193,{ 0x98,0xEF,0xD9,0x67,0x58,0xCD,0x68,0xD4 } }; // 02A0FF18-FE96-5193-98EF-D96758CD68D4
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiChannelStatics>{ 0xEC86B553,0xADB5,0x5330,{ 0x99,0x60,0x1D,0x8B,0x3A,0x35,0xB0,0xC6 } }; // EC86B553-ADB5-5330-9960-1D8B3A35B0C6
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiClock>{ 0xF065F78B,0xE4DC,0x55A7,{ 0x96,0x97,0x63,0x59,0xD0,0xEC,0xD7,0x3A } }; // F065F78B-E4DC-55A7-9697-6359D0ECD73A
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiClockStatics>{ 0xF672B9EB,0xD41D,0x5CDD,{ 0xAF,0x7B,0x64,0x29,0x94,0x0B,0xE3,0xE7 } }; // F672B9EB-D41D-5CDD-AF7B-6429940BE3E7
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection>{ 0x452EECE5,0x4FB8,0x5C0C,{ 0xB8,0xDA,0x46,0x70,0x30,0xBD,0xAC,0xE2 } }; // 452EECE5-4FB8-5C0C-B8DA-467030BDACE2
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSettings>{ 0x65736736,0x35F3,0x421C,{ 0xA6,0x83,0x3A,0x03,0x4A,0xD0,0xDC,0xC2 } }; // 65736736-35F3-421C-A683-3A034AD0DCC2
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSource>{ 0x44385CDD,0xB64C,0x4195,{ 0x8F,0xAA,0x8A,0x61,0xFC,0x95,0x2A,0x23 } }; // 44385CDD-B64C-4195-8FAA-8A61FC952A23
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionStatics>{ 0x99355145,0xBC11,0x5B85,{ 0x9B,0x23,0x1B,0x58,0x26,0x6F,0x46,0x30 } }; // 99355145-BC11-5B85-9B23-1B58266F4630
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformation>{ 0xFB4A1253,0x4429,0x5765,{ 0x99,0xDE,0xFF,0x76,0xBB,0xED,0x58,0x8B } }; // FB4A1253-4429-5765-99DE-FF76BBED588B
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationAddedEventArgs>{ 0xECF028D0,0xEECC,0x5F99,{ 0x8A,0xDF,0x8F,0x29,0xB7,0x0B,0x29,0x6C } }; // ECF028D0-EECC-5F99-8ADF-8F29B70B296C
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationRemovedEventArgs>{ 0x84D3DDE4,0xE6F8,0x5BA5,{ 0x97,0xB4,0xB8,0xD4,0xC5,0x0A,0xFD,0x9F } }; // 84D3DDE4-E6F8-5BA5-97B4-B8D4C50AFD9F
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationStatics>{ 0x1D2C9C0A,0x428E,0x5F75,{ 0x89,0xD5,0x00,0xC3,0xA3,0x79,0x4D,0x88 } }; // 1D2C9C0A-428E-5F75-89D5-00C3A3794D88
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationUpdatedEventArgs>{ 0xAA4B1E3A,0x04B6,0x5560,{ 0xBC,0x2B,0xCF,0xD1,0x64,0xC0,0xF1,0xDE } }; // AA4B1E3A-04B6-5560-BC2B-CFD164C0F1DE
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher>{ 0x5CBF4CAC,0x3409,0x5A57,{ 0x9C,0x47,0xFC,0xA8,0x3C,0x69,0xDB,0xE3 } }; // 5CBF4CAC-3409-5A57-9C47-FCA83C69DBE3
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcherStatics>{ 0xF28F646C,0x6BE6,0x5E13,{ 0x8A,0x78,0x7F,0xD1,0xB8,0x5A,0x7E,0x95 } }; // F28F646C-6BE6-5E13-8A78-7FD1B85A7E95
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointMessageProcessingPlugin>{ 0x198D5EF2,0x313F,0x41AF,{ 0x92,0x59,0xA4,0x29,0x97,0xE0,0x60,0xF0 } }; // 198D5EF2-313F-41AF-9259-A42997E060F0
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock>{ 0xEB43C123,0x5382,0x5C71,{ 0x8D,0x1B,0x22,0x3B,0x8F,0x76,0xC2,0x3B } }; // EB43C123-5382-5C71-8D1B-223B8F76C23B
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiGroup>{ 0xD2FE009D,0x8542,0x5AE7,{ 0xA8,0xF8,0x4F,0x28,0x14,0x5E,0x3A,0x8F } }; // D2FE009D-8542-5AE7-A8F8-4F28145E3A8F
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupFactory>{ 0xEC11AC98,0x616B,0x545C,{ 0xA0,0x6C,0x95,0xB3,0x91,0x5A,0xDB,0x41 } }; // EC11AC98-616B-545C-A06C-95B3915ADB41
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupStatics>{ 0x08071F7E,0xBA0B,0x5020,{ 0x8E,0x23,0xBC,0x81,0x9B,0x24,0xA4,0xE2 } }; // 08071F7E-BA0B-5020-8E23-BC819B24A4E2
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupTerminalBlock>{ 0x3DBA035F,0xE298,0x5F22,{ 0xB0,0x0B,0x51,0xC7,0x2D,0xCF,0xF7,0x1F } }; // 3DBA035F-E298-5F22-B00B-51C72DCFF71F
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128>{ 0xEFB9C9BB,0x4397,0x538A,{ 0xB1,0x7F,0xBC,0x83,0x00,0x12,0xE1,0xEA } }; // EFB9C9BB-4397-538A-B17F-BC830012E1EA
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128Factory>{ 0x6FB629DF,0xE277,0x5EE8,{ 0xB7,0xB8,0x13,0xA3,0x52,0x8B,0xA2,0x55 } }; // 6FB629DF-E277-5EE8-B7B8-13A3528BA255
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128Statics>{ 0x722B7533,0x8EFB,0x5CA9,{ 0x93,0x99,0x74,0xEE,0x2D,0x8D,0x53,0x8C } }; // 722B7533-8EFB-5CA9-9399-74EE2D8D538C
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32>{ 0x1C2EC0A7,0xE093,0x5FF0,{ 0xA0,0x9B,0x77,0x68,0x6A,0x75,0x64,0x18 } }; // 1C2EC0A7-E093-5FF0-A09B-77686A756418
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32Factory>{ 0x47D7FD0F,0x7945,0x5283,{ 0xB1,0x1B,0xA4,0xF5,0xCF,0xBB,0xF6,0xF2 } }; // 47D7FD0F-7945-5283-B11B-A4F5CFBBF6F2
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32Statics>{ 0x52D01ECA,0x60AC,0x5229,{ 0xAA,0xC2,0xAF,0xA7,0x2E,0xF1,0x40,0x45 } }; // 52D01ECA-60AC-5229-AAC2-AFA72EF14045
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64>{ 0x62885C57,0x325C,0x5A7C,{ 0xB1,0x8F,0xDE,0x36,0x0A,0xC3,0x77,0xBD } }; // 62885C57-325C-5A7C-B18F-DE360AC377BD
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64Factory>{ 0x10B85E46,0xC6B8,0x593A,{ 0x93,0x85,0x11,0xAE,0x2F,0xCE,0xB9,0xF1 } }; // 10B85E46-C6B8-593A-9385-11AE2FCEB9F1
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64Statics>{ 0xA75E98A2,0xC6AC,0x5333,{ 0x89,0x65,0x97,0xCD,0xA8,0x80,0x85,0x2E } }; // A75E98A2-C6AC-5333-8965-97CDA880852E
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96>{ 0x82B6C4F8,0xC292,0x50DA,{ 0xBD,0xDF,0xC1,0x18,0x6D,0x3B,0x9E,0xE6 } }; // 82B6C4F8-C292-50DA-BDDF-C1186D3B9EE6
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96Factory>{ 0x4AC4FE62,0x41C9,0x5605,{ 0x9D,0xB8,0xDE,0xD7,0xCB,0x44,0xB8,0x59 } }; // 4AC4FE62-41C9-5605-9DB8-DED7CB44B859
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96Statics>{ 0x80451AFD,0xE703,0x5790,{ 0x9C,0xF7,0x4A,0x17,0xAD,0x1E,0x47,0x3B } }; // 80451AFD-E703-5790-9CF7-4A17AD1E473B
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventArgs>{ 0x190C0204,0x845B,0x5A20,{ 0xB9,0x5E,0x91,0x78,0xA8,0xDD,0xAF,0xC6 } }; // 190C0204-845B-5A20-B95E-9178A8DDAFC6
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventSource>{ 0x101CEB4B,0xCCA4,0x48A1,{ 0xB9,0x1E,0x60,0x02,0xB9,0x28,0x61,0x3C } }; // 101CEB4B-CCA4-48A1-B91E-6002B928613C
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiSession>{ 0x47D3E2F0,0xB352,0x5D13,{ 0x88,0x37,0xE4,0x8F,0xF4,0x84,0x5F,0xA0 } }; // 47D3E2F0-B352-5D13-8837-E48FF4845FA0
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiSessionStatics>{ 0x8678C907,0x163D,0x5D86,{ 0xBF,0xC7,0xFE,0x80,0x04,0x63,0x61,0x86 } }; // 8678C907-163D-5D86-BFC7-FE8004636186
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket>{ 0x2EB5DF8A,0xD751,0x4997,{ 0xBF,0x96,0xBA,0x9A,0x53,0x1F,0xD5,0xFF } }; // 2EB5DF8A-D751-4997-BF96-BA9A531FD5FF
    template <> struct default_interface<winrt::Microsoft::Windows::Devices::Midi2::MidiChannel>{ using type = winrt::Microsoft::Windows::Devices::Midi2::IMidiChannel; };
    template <> struct default_interface<winrt::Microsoft::Windows::Devices::Midi2::MidiClock>{ using type = winrt::Microsoft::Windows::Devices::Midi2::IMidiClock; };
    template <> struct default_interface<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointConnection>{ using type = winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection; };
    template <> struct default_interface<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformation>{ using type = winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformation; };
    template <> struct default_interface<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationAddedEventArgs>{ using type = winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationAddedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationRemovedEventArgs>{ using type = winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationRemovedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationUpdatedEventArgs>{ using type = winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationUpdatedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher>{ using type = winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher; };
    template <> struct default_interface<winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlock>{ using type = winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock; };
    template <> struct default_interface<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup>{ using type = winrt::Microsoft::Windows::Devices::Midi2::IMidiGroup; };
    template <> struct default_interface<winrt::Microsoft::Windows::Devices::Midi2::MidiGroupTerminalBlock>{ using type = winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupTerminalBlock; };
    template <> struct default_interface<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage128>{ using type = winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128; };
    template <> struct default_interface<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32>{ using type = winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32; };
    template <> struct default_interface<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage64>{ using type = winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64; };
    template <> struct default_interface<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage96>{ using type = winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96; };
    template <> struct default_interface<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageReceivedEventArgs>{ using type = winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::Windows::Devices::Midi2::MidiSession>{ using type = winrt::Microsoft::Windows::Devices::Midi2::IMidiSession; };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiChannel>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Index(uint8_t*) noexcept = 0;
            virtual int32_t __stdcall put_Index(uint8_t) noexcept = 0;
            virtual int32_t __stdcall get_DisplayValue(uint8_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiChannelFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(uint8_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiChannelStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ShortLabel(void**) noexcept = 0;
            virtual int32_t __stdcall get_LongLabel(void**) noexcept = 0;
            virtual int32_t __stdcall IsValidIndex(uint8_t, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiClock>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiClockStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Now(uint64_t*) noexcept = 0;
            virtual int32_t __stdcall get_TimestampConstantSendImmediately(uint64_t*) noexcept = 0;
            virtual int32_t __stdcall get_TimestampFrequency(uint64_t*) noexcept = 0;
            virtual int32_t __stdcall ConvertTimestampTicksToNanoseconds(uint64_t, double*) noexcept = 0;
            virtual int32_t __stdcall ConvertTimestampTicksToMicroseconds(uint64_t, double*) noexcept = 0;
            virtual int32_t __stdcall ConvertTimestampTicksToMilliseconds(uint64_t, double*) noexcept = 0;
            virtual int32_t __stdcall ConvertTimestampTicksToSeconds(uint64_t, double*) noexcept = 0;
            virtual int32_t __stdcall OffsetTimestampByTicks(uint64_t, int64_t, uint64_t*) noexcept = 0;
            virtual int32_t __stdcall OffsetTimestampByMicroseconds(uint64_t, int64_t, uint64_t*) noexcept = 0;
            virtual int32_t __stdcall OffsetTimestampByMilliseconds(uint64_t, int64_t, uint64_t*) noexcept = 0;
            virtual int32_t __stdcall OffsetTimestampBySeconds(uint64_t, int64_t, uint64_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ConnectionId(winrt::guid*) noexcept = 0;
            virtual int32_t __stdcall get_ConnectedEndpointDeviceId(void**) noexcept = 0;
            virtual int32_t __stdcall get_Tag(void**) noexcept = 0;
            virtual int32_t __stdcall put_Tag(void*) noexcept = 0;
            virtual int32_t __stdcall get_LogMessageDataValidationErrorDetails(bool*) noexcept = 0;
            virtual int32_t __stdcall put_LogMessageDataValidationErrorDetails(bool) noexcept = 0;
            virtual int32_t __stdcall get_Settings(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsOpen(bool*) noexcept = 0;
            virtual int32_t __stdcall Open(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsAutoReconnectEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall get_MessageProcessingPlugins(void**) noexcept = 0;
            virtual int32_t __stdcall AddMessageProcessingPlugin(void*) noexcept = 0;
            virtual int32_t __stdcall RemoveMessageProcessingPlugin(winrt::guid) noexcept = 0;
            virtual int32_t __stdcall SendSingleMessagePacket(void*, uint32_t*) noexcept = 0;
            virtual int32_t __stdcall SendSingleMessageStruct(uint64_t, uint8_t, struct struct_Microsoft_Windows_Devices_Midi2_MidiMessageStruct const&, uint32_t*) noexcept = 0;
            virtual int32_t __stdcall SendSingleMessageWordArray(uint64_t, uint32_t, uint8_t, uint32_t, uint32_t*, uint32_t*) noexcept = 0;
            virtual int32_t __stdcall SendSingleMessageWords(uint64_t, uint32_t, uint32_t*) noexcept = 0;
            virtual int32_t __stdcall SendSingleMessageWords2(uint64_t, uint32_t, uint32_t, uint32_t*) noexcept = 0;
            virtual int32_t __stdcall SendSingleMessageWords3(uint64_t, uint32_t, uint32_t, uint32_t, uint32_t*) noexcept = 0;
            virtual int32_t __stdcall SendSingleMessageWords4(uint64_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t*) noexcept = 0;
            virtual int32_t __stdcall SendSingleMessageBuffer(uint64_t, uint32_t, uint8_t, void*, uint32_t*) noexcept = 0;
            virtual int32_t __stdcall SendMultipleMessagesWordList(uint64_t, void*, uint32_t*) noexcept = 0;
            virtual int32_t __stdcall SendMultipleMessagesWordArray(uint64_t, uint32_t, uint32_t, uint32_t, uint32_t*, uint32_t*) noexcept = 0;
            virtual int32_t __stdcall SendMultipleMessagesPacketList(void*, uint32_t*) noexcept = 0;
            virtual int32_t __stdcall SendMultipleMessagesStructList(uint64_t, void*, uint32_t*) noexcept = 0;
            virtual int32_t __stdcall SendMultipleMessagesStructArray(uint64_t, uint32_t, uint32_t, uint32_t, struct struct_Microsoft_Windows_Devices_Midi2_MidiMessageStruct*, uint32_t*) noexcept = 0;
            virtual int32_t __stdcall SendMultipleMessagesBuffer(uint64_t, uint32_t, uint32_t, void*, uint32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSettings>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_SettingsJson(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSource>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall add_EndpointDeviceDisconnected(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_EndpointDeviceDisconnected(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_EndpointDeviceReconnected(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_EndpointDeviceReconnected(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall GetDeviceSelector(void**) noexcept = 0;
            virtual int32_t __stdcall SendMessageSucceeded(uint32_t, bool*) noexcept = 0;
            virtual int32_t __stdcall SendMessageFailed(uint32_t, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformation>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_EndpointDeviceId(void**) noexcept = 0;
            virtual int32_t __stdcall get_Name(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContainerId(winrt::guid*) noexcept = 0;
            virtual int32_t __stdcall get_DeviceInstanceId(void**) noexcept = 0;
            virtual int32_t __stdcall get_EndpointPurpose(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetDeclaredEndpointInfo(struct struct_Microsoft_Windows_Devices_Midi2_MidiDeclaredEndpointInfo*) noexcept = 0;
            virtual int32_t __stdcall get_DeclaredEndpointInfoLastUpdateTime(int64_t*) noexcept = 0;
            virtual int32_t __stdcall GetDeclaredDeviceIdentity(struct struct_Microsoft_Windows_Devices_Midi2_MidiDeclaredDeviceIdentity*) noexcept = 0;
            virtual int32_t __stdcall get_DeclaredDeviceIdentityLastUpdateTime(int64_t*) noexcept = 0;
            virtual int32_t __stdcall GetDeclaredStreamConfiguration(struct struct_Microsoft_Windows_Devices_Midi2_MidiDeclaredStreamConfiguration*) noexcept = 0;
            virtual int32_t __stdcall get_DeclaredStreamConfigurationLastUpdateTime(int64_t*) noexcept = 0;
            virtual int32_t __stdcall GetDeclaredFunctionBlocks(void**) noexcept = 0;
            virtual int32_t __stdcall get_DeclaredFunctionBlocksLastUpdateTime(int64_t*) noexcept = 0;
            virtual int32_t __stdcall GetGroupTerminalBlocks(void**) noexcept = 0;
            virtual int32_t __stdcall GetUserSuppliedInfo(struct struct_Microsoft_Windows_Devices_Midi2_MidiEndpointUserSuppliedInfo*) noexcept = 0;
            virtual int32_t __stdcall GetTransportSuppliedInfo(struct struct_Microsoft_Windows_Devices_Midi2_MidiEndpointTransportSuppliedInfo*) noexcept = 0;
            virtual int32_t __stdcall GetParentDeviceInformation(void**) noexcept = 0;
            virtual int32_t __stdcall GetContainerDeviceInformation(void**) noexcept = 0;
            virtual int32_t __stdcall get_Properties(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationAddedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_AddedDevice(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationRemovedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_EndpointDeviceId(void**) noexcept = 0;
            virtual int32_t __stdcall get_DeviceInformationUpdate(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateFromEndpointDeviceId(void*, void**) noexcept = 0;
            virtual int32_t __stdcall FindAll(void**) noexcept = 0;
            virtual int32_t __stdcall FindAll2(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall FindAll3(int32_t, uint32_t, void**) noexcept = 0;
            virtual int32_t __stdcall get_EndpointInterfaceClass(winrt::guid*) noexcept = 0;
            virtual int32_t __stdcall GetAdditionalPropertiesList(void**) noexcept = 0;
            virtual int32_t __stdcall DeviceMatchesFilter(void*, uint32_t, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationUpdatedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_EndpointDeviceId(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsNameUpdated(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsEndpointInformationUpdated(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsDeviceIdentityUpdated(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsStreamConfigurationUpdated(bool*) noexcept = 0;
            virtual int32_t __stdcall get_AreFunctionBlocksUpdated(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsUserMetadataUpdated(bool*) noexcept = 0;
            virtual int32_t __stdcall get_AreAdditionalCapabilitiesUpdated(bool*) noexcept = 0;
            virtual int32_t __stdcall get_DeviceInformationUpdate(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall Start() noexcept = 0;
            virtual int32_t __stdcall Stop() noexcept = 0;
            virtual int32_t __stdcall get_EnumeratedEndpointDevices(void**) noexcept = 0;
            virtual int32_t __stdcall get_Status(int32_t*) noexcept = 0;
            virtual int32_t __stdcall add_Added(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Added(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Removed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Removed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Updated(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Updated(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_EnumerationCompleted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_EnumerationCompleted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Stopped(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Stopped(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcherStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall Create(void**) noexcept = 0;
            virtual int32_t __stdcall Create2(uint32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointMessageProcessingPlugin>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_PluginId(winrt::guid*) noexcept = 0;
            virtual int32_t __stdcall get_PluginName(void**) noexcept = 0;
            virtual int32_t __stdcall put_PluginName(void*) noexcept = 0;
            virtual int32_t __stdcall get_PluginTag(void**) noexcept = 0;
            virtual int32_t __stdcall put_PluginTag(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall Initialize(void*) noexcept = 0;
            virtual int32_t __stdcall OnEndpointConnectionOpened() noexcept = 0;
            virtual int32_t __stdcall ProcessIncomingMessage(void*, bool*, bool*) noexcept = 0;
            virtual int32_t __stdcall Cleanup() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsReadOnly(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Number(uint8_t*) noexcept = 0;
            virtual int32_t __stdcall put_Number(uint8_t) noexcept = 0;
            virtual int32_t __stdcall get_Name(void**) noexcept = 0;
            virtual int32_t __stdcall put_Name(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsActive(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsActive(bool) noexcept = 0;
            virtual int32_t __stdcall get_Direction(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Direction(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_UIHint(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_UIHint(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_RepresentsMidi10Connection(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_RepresentsMidi10Connection(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_FirstGroupIndex(uint8_t*) noexcept = 0;
            virtual int32_t __stdcall put_FirstGroupIndex(uint8_t) noexcept = 0;
            virtual int32_t __stdcall get_GroupCount(uint8_t*) noexcept = 0;
            virtual int32_t __stdcall put_GroupCount(uint8_t) noexcept = 0;
            virtual int32_t __stdcall IncludesGroup(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall get_MidiCIMessageVersionFormat(uint8_t*) noexcept = 0;
            virtual int32_t __stdcall put_MidiCIMessageVersionFormat(uint8_t) noexcept = 0;
            virtual int32_t __stdcall get_MaxSystemExclusive8Streams(uint8_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxSystemExclusive8Streams(uint8_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiGroup>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Index(uint8_t*) noexcept = 0;
            virtual int32_t __stdcall put_Index(uint8_t) noexcept = 0;
            virtual int32_t __stdcall get_DisplayValue(uint8_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(uint8_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ShortLabel(void**) noexcept = 0;
            virtual int32_t __stdcall get_LongLabel(void**) noexcept = 0;
            virtual int32_t __stdcall IsValidIndex(uint8_t, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupTerminalBlock>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Number(uint8_t*) noexcept = 0;
            virtual int32_t __stdcall get_Name(void**) noexcept = 0;
            virtual int32_t __stdcall get_Direction(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Protocol(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_FirstGroupIndex(uint8_t*) noexcept = 0;
            virtual int32_t __stdcall get_GroupCount(uint8_t*) noexcept = 0;
            virtual int32_t __stdcall IncludesGroup(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall get_MaxDeviceInputBandwidthIn4KBitsPerSecondUnits(uint16_t*) noexcept = 0;
            virtual int32_t __stdcall get_MaxDeviceOutputBandwidthIn4KBitsPerSecondUnits(uint16_t*) noexcept = 0;
            virtual int32_t __stdcall get_CalculatedMaxDeviceInputBandwidthBitsPerSecond(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_CalculatedMaxDeviceOutputBandwidthBitsPerSecond(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall AsEquivalentFunctionBlock(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Word0(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Word0(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_Word1(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Word1(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_Word2(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Word2(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_Word3(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Word3(uint32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128Factory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
            virtual int32_t __stdcall CreateInstance2(uint64_t, uint32_t, uint32_t, uint32_t, uint32_t, void*, void**, void**) noexcept = 0;
            virtual int32_t __stdcall CreateInstance3(uint64_t, uint32_t, uint32_t*, void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128Statics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateFromStruct(uint64_t, struct struct_Microsoft_Windows_Devices_Midi2_MidiMessageStruct, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Word0(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Word0(uint32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32Factory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
            virtual int32_t __stdcall CreateInstance2(uint64_t, uint32_t, void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32Statics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateFromStruct(uint64_t, struct struct_Microsoft_Windows_Devices_Midi2_MidiMessageStruct, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Word0(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Word0(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_Word1(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Word1(uint32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64Factory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
            virtual int32_t __stdcall CreateInstance2(uint64_t, uint32_t, uint32_t, void*, void**, void**) noexcept = 0;
            virtual int32_t __stdcall CreateInstance3(uint64_t, uint32_t, uint32_t*, void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64Statics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateFromStruct(uint64_t, struct struct_Microsoft_Windows_Devices_Midi2_MidiMessageStruct, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Word0(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Word0(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_Word1(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Word1(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_Word2(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Word2(uint32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96Factory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
            virtual int32_t __stdcall CreateInstance2(uint64_t, uint32_t, uint32_t, uint32_t, void*, void**, void**) noexcept = 0;
            virtual int32_t __stdcall CreateInstance3(uint64_t, uint32_t, uint32_t*, void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96Statics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateFromStruct(uint64_t, struct struct_Microsoft_Windows_Devices_Midi2_MidiMessageStruct, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Timestamp(uint64_t*) noexcept = 0;
            virtual int32_t __stdcall get_PacketType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_MessageType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall PeekFirstWord(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall GetMessagePacket(void**) noexcept = 0;
            virtual int32_t __stdcall FillWords(uint32_t*, uint32_t*, uint32_t*, uint32_t*, uint8_t*) noexcept = 0;
            virtual int32_t __stdcall FillMessageStruct(struct struct_Microsoft_Windows_Devices_Midi2_MidiMessageStruct*, uint8_t*) noexcept = 0;
            virtual int32_t __stdcall FillMessage32(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall FillMessage64(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall FillMessage96(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall FillMessage128(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall FillWordArray(uint32_t, uint32_t, uint32_t*, uint8_t*) noexcept = 0;
            virtual int32_t __stdcall FillByteArray(uint32_t, uint32_t, uint8_t*, uint8_t*) noexcept = 0;
            virtual int32_t __stdcall FillBuffer(uint32_t, void*, uint8_t*) noexcept = 0;
            virtual int32_t __stdcall AppendWordsToList(void*, uint8_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventSource>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall add_MessageReceived(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_MessageReceived(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiSession>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_SessionId(winrt::guid*) noexcept = 0;
            virtual int32_t __stdcall get_Name(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsOpen(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Connections(void**) noexcept = 0;
            virtual int32_t __stdcall CreateEndpointConnection(void*, void**) noexcept = 0;
            virtual int32_t __stdcall CreateEndpointConnection2(void*, bool, void**) noexcept = 0;
            virtual int32_t __stdcall CreateEndpointConnection3(void*, bool, void*, void**) noexcept = 0;
            virtual int32_t __stdcall DisconnectEndpointConnection(winrt::guid) noexcept = 0;
            virtual int32_t __stdcall UpdateName(void*, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiSessionStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall Create(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Timestamp(uint64_t*) noexcept = 0;
            virtual int32_t __stdcall put_Timestamp(uint64_t) noexcept = 0;
            virtual int32_t __stdcall get_MessageType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MessageType(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_PacketType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall PeekFirstWord(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall GetAllWords(void**) noexcept = 0;
            virtual int32_t __stdcall AppendAllMessageWordsToList(void*, uint8_t*) noexcept = 0;
            virtual int32_t __stdcall FillBuffer(uint32_t, void*, uint8_t*) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiChannel
    {
        [[nodiscard]] auto Index() const;
        auto Index(uint8_t value) const;
        [[nodiscard]] auto DisplayValue() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiChannel>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiChannel<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiChannelFactory
    {
        auto CreateInstance(uint8_t index) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiChannelFactory>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiChannelFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiChannelStatics
    {
        [[nodiscard]] auto ShortLabel() const;
        [[nodiscard]] auto LongLabel() const;
        auto IsValidIndex(uint8_t index) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiChannelStatics>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiChannelStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiClock
    {
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiClock>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiClock<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiClockStatics
    {
        [[nodiscard]] auto Now() const;
        [[nodiscard]] auto TimestampConstantSendImmediately() const;
        [[nodiscard]] auto TimestampFrequency() const;
        auto ConvertTimestampTicksToNanoseconds(uint64_t timestampValue) const;
        auto ConvertTimestampTicksToMicroseconds(uint64_t timestampValue) const;
        auto ConvertTimestampTicksToMilliseconds(uint64_t timestampValue) const;
        auto ConvertTimestampTicksToSeconds(uint64_t timestampValue) const;
        auto OffsetTimestampByTicks(uint64_t timestampValue, int64_t offsetTicks) const;
        auto OffsetTimestampByMicroseconds(uint64_t timestampValue, int64_t offsetMicroseconds) const;
        auto OffsetTimestampByMilliseconds(uint64_t timestampValue, int64_t offsetMilliseconds) const;
        auto OffsetTimestampBySeconds(uint64_t timestampValue, int64_t offsetSeconds) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiClockStatics>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiClockStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnection
    {
        [[nodiscard]] auto ConnectionId() const;
        [[nodiscard]] auto ConnectedEndpointDeviceId() const;
        [[nodiscard]] auto Tag() const;
        auto Tag(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto LogMessageDataValidationErrorDetails() const;
        auto LogMessageDataValidationErrorDetails(bool value) const;
        [[nodiscard]] auto Settings() const;
        [[nodiscard]] auto IsOpen() const;
        auto Open() const;
        [[nodiscard]] auto IsAutoReconnectEnabled() const;
        [[nodiscard]] auto MessageProcessingPlugins() const;
        auto AddMessageProcessingPlugin(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointMessageProcessingPlugin const& plugin) const;
        auto RemoveMessageProcessingPlugin(winrt::guid const& id) const;
        auto SendSingleMessagePacket(winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket const& message) const;
        auto SendSingleMessageStruct(uint64_t timestamp, uint8_t wordCount, winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct const& message) const;
        auto SendSingleMessageWordArray(uint64_t timestamp, uint32_t startIndex, uint8_t wordCount, array_view<uint32_t const> words) const;
        auto SendSingleMessageWords(uint64_t timestamp, uint32_t word0) const;
        auto SendSingleMessageWords(uint64_t timestamp, uint32_t word0, uint32_t word1) const;
        auto SendSingleMessageWords(uint64_t timestamp, uint32_t word0, uint32_t word1, uint32_t word2) const;
        auto SendSingleMessageWords(uint64_t timestamp, uint32_t word0, uint32_t word1, uint32_t word2, uint32_t word3) const;
        auto SendSingleMessageBuffer(uint64_t timestamp, uint32_t byteOffset, uint8_t byteCount, winrt::Windows::Foundation::IMemoryBuffer const& buffer) const;
        auto SendMultipleMessagesWordList(uint64_t timestamp, param::iterable<uint32_t> const& words) const;
        auto SendMultipleMessagesWordArray(uint64_t timestamp, uint32_t startIndex, uint32_t wordCount, array_view<uint32_t const> words) const;
        auto SendMultipleMessagesPacketList(param::iterable<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket> const& messages) const;
        auto SendMultipleMessagesStructList(uint64_t timestamp, param::iterable<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct> const& messages) const;
        auto SendMultipleMessagesStructArray(uint64_t timestamp, uint32_t startIndex, uint32_t messageCount, array_view<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct const> messages) const;
        auto SendMultipleMessagesBuffer(uint64_t timestamp, uint32_t byteOffset, uint32_t byteCount, winrt::Windows::Foundation::IMemoryBuffer const& buffer) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnection<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnectionSettings
    {
        [[nodiscard]] auto SettingsJson() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSettings>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnectionSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnectionSource
    {
        auto EndpointDeviceDisconnected(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSource, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using EndpointDeviceDisconnected_revoker = impl::event_revoker<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSource, &impl::abi_t<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSource>::remove_EndpointDeviceDisconnected>;
        [[nodiscard]] auto EndpointDeviceDisconnected(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSource, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto EndpointDeviceDisconnected(winrt::event_token const& token) const noexcept;
        auto EndpointDeviceReconnected(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSource, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using EndpointDeviceReconnected_revoker = impl::event_revoker<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSource, &impl::abi_t<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSource>::remove_EndpointDeviceReconnected>;
        [[nodiscard]] auto EndpointDeviceReconnected(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSource, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto EndpointDeviceReconnected(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSource>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnectionSource<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnectionStatics
    {
        auto GetDeviceSelector() const;
        auto SendMessageSucceeded(winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults const& sendResult) const;
        auto SendMessageFailed(winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults const& sendResult) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionStatics>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnectionStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformation
    {
        [[nodiscard]] auto EndpointDeviceId() const;
        [[nodiscard]] auto Name() const;
        [[nodiscard]] auto ContainerId() const;
        [[nodiscard]] auto DeviceInstanceId() const;
        [[nodiscard]] auto EndpointPurpose() const;
        auto GetDeclaredEndpointInfo() const;
        [[nodiscard]] auto DeclaredEndpointInfoLastUpdateTime() const;
        auto GetDeclaredDeviceIdentity() const;
        [[nodiscard]] auto DeclaredDeviceIdentityLastUpdateTime() const;
        auto GetDeclaredStreamConfiguration() const;
        [[nodiscard]] auto DeclaredStreamConfigurationLastUpdateTime() const;
        auto GetDeclaredFunctionBlocks() const;
        [[nodiscard]] auto DeclaredFunctionBlocksLastUpdateTime() const;
        auto GetGroupTerminalBlocks() const;
        auto GetUserSuppliedInfo() const;
        auto GetTransportSuppliedInfo() const;
        auto GetParentDeviceInformation() const;
        auto GetContainerDeviceInformation() const;
        [[nodiscard]] auto Properties() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformation>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformation<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformationAddedEventArgs
    {
        [[nodiscard]] auto AddedDevice() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationAddedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformationAddedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformationRemovedEventArgs
    {
        [[nodiscard]] auto EndpointDeviceId() const;
        [[nodiscard]] auto DeviceInformationUpdate() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationRemovedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformationRemovedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformationStatics
    {
        auto CreateFromEndpointDeviceId(param::hstring const& endpointDeviceId) const;
        auto FindAll() const;
        auto FindAll(winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationSortOrder const& sortOrder) const;
        auto FindAll(winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationSortOrder const& sortOrder, winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationFilters const& endpointTypesToInclude) const;
        [[nodiscard]] auto EndpointInterfaceClass() const;
        auto GetAdditionalPropertiesList() const;
        auto DeviceMatchesFilter(winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformation const& deviceInformation, winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationFilters const& endpointTypesToInclude) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationStatics>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformationStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformationUpdatedEventArgs
    {
        [[nodiscard]] auto EndpointDeviceId() const;
        [[nodiscard]] auto IsNameUpdated() const;
        [[nodiscard]] auto IsEndpointInformationUpdated() const;
        [[nodiscard]] auto IsDeviceIdentityUpdated() const;
        [[nodiscard]] auto IsStreamConfigurationUpdated() const;
        [[nodiscard]] auto AreFunctionBlocksUpdated() const;
        [[nodiscard]] auto IsUserMetadataUpdated() const;
        [[nodiscard]] auto AreAdditionalCapabilitiesUpdated() const;
        [[nodiscard]] auto DeviceInformationUpdate() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationUpdatedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformationUpdatedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceWatcher
    {
        auto Start() const;
        auto Stop() const;
        [[nodiscard]] auto EnumeratedEndpointDevices() const;
        [[nodiscard]] auto Status() const;
        auto Added(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher, winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationAddedEventArgs> const& handler) const;
        using Added_revoker = impl::event_revoker<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher, &impl::abi_t<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher>::remove_Added>;
        [[nodiscard]] auto Added(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher, winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationAddedEventArgs> const& handler) const;
        auto Added(winrt::event_token const& token) const noexcept;
        auto Removed(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher, winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationRemovedEventArgs> const& handler) const;
        using Removed_revoker = impl::event_revoker<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher, &impl::abi_t<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher>::remove_Removed>;
        [[nodiscard]] auto Removed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher, winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationRemovedEventArgs> const& handler) const;
        auto Removed(winrt::event_token const& token) const noexcept;
        auto Updated(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher, winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationUpdatedEventArgs> const& handler) const;
        using Updated_revoker = impl::event_revoker<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher, &impl::abi_t<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher>::remove_Updated>;
        [[nodiscard]] auto Updated(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher, winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationUpdatedEventArgs> const& handler) const;
        auto Updated(winrt::event_token const& token) const noexcept;
        auto EnumerationCompleted(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using EnumerationCompleted_revoker = impl::event_revoker<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher, &impl::abi_t<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher>::remove_EnumerationCompleted>;
        [[nodiscard]] auto EnumerationCompleted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto EnumerationCompleted(winrt::event_token const& token) const noexcept;
        auto Stopped(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using Stopped_revoker = impl::event_revoker<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher, &impl::abi_t<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher>::remove_Stopped>;
        [[nodiscard]] auto Stopped(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto Stopped(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceWatcher<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceWatcherStatics
    {
        auto Create() const;
        auto Create(winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationFilters const& endpointFilters) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcherStatics>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceWatcherStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointMessageProcessingPlugin
    {
        [[nodiscard]] auto PluginId() const;
        [[nodiscard]] auto PluginName() const;
        auto PluginName(param::hstring const& value) const;
        [[nodiscard]] auto PluginTag() const;
        auto PluginTag(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto IsEnabled() const;
        auto IsEnabled(bool value) const;
        auto Initialize(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSource const& endpointConnection) const;
        auto OnEndpointConnectionOpened() const;
        auto ProcessIncomingMessage(winrt::Microsoft::Windows::Devices::Midi2::MidiMessageReceivedEventArgs const& args, bool& skipFurtherListeners, bool& skipMainMessageReceivedEvent) const;
        auto Cleanup() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointMessageProcessingPlugin>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointMessageProcessingPlugin<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiFunctionBlock
    {
        [[nodiscard]] auto IsReadOnly() const;
        [[nodiscard]] auto Number() const;
        auto Number(uint8_t value) const;
        [[nodiscard]] auto Name() const;
        auto Name(param::hstring const& value) const;
        [[nodiscard]] auto IsActive() const;
        auto IsActive(bool value) const;
        [[nodiscard]] auto Direction() const;
        auto Direction(winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockDirection const& value) const;
        [[nodiscard]] auto UIHint() const;
        auto UIHint(winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockUIHint const& value) const;
        [[nodiscard]] auto RepresentsMidi10Connection() const;
        auto RepresentsMidi10Connection(winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockRepresentsMidi10Connection const& value) const;
        [[nodiscard]] auto FirstGroupIndex() const;
        auto FirstGroupIndex(uint8_t value) const;
        [[nodiscard]] auto GroupCount() const;
        auto GroupCount(uint8_t value) const;
        auto IncludesGroup(winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group) const;
        [[nodiscard]] auto MidiCIMessageVersionFormat() const;
        auto MidiCIMessageVersionFormat(uint8_t value) const;
        [[nodiscard]] auto MaxSystemExclusive8Streams() const;
        auto MaxSystemExclusive8Streams(uint8_t value) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiFunctionBlock<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiGroup
    {
        [[nodiscard]] auto Index() const;
        auto Index(uint8_t value) const;
        [[nodiscard]] auto DisplayValue() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiGroup>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiGroup<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiGroupFactory
    {
        auto CreateInstance(uint8_t index) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupFactory>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiGroupFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiGroupStatics
    {
        [[nodiscard]] auto ShortLabel() const;
        [[nodiscard]] auto LongLabel() const;
        auto IsValidIndex(uint8_t index) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupStatics>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiGroupStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiGroupTerminalBlock
    {
        [[nodiscard]] auto Number() const;
        [[nodiscard]] auto Name() const;
        [[nodiscard]] auto Direction() const;
        [[nodiscard]] auto Protocol() const;
        [[nodiscard]] auto FirstGroupIndex() const;
        [[nodiscard]] auto GroupCount() const;
        auto IncludesGroup(winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group) const;
        [[nodiscard]] auto MaxDeviceInputBandwidthIn4KBitsPerSecondUnits() const;
        [[nodiscard]] auto MaxDeviceOutputBandwidthIn4KBitsPerSecondUnits() const;
        [[nodiscard]] auto CalculatedMaxDeviceInputBandwidthBitsPerSecond() const;
        [[nodiscard]] auto CalculatedMaxDeviceOutputBandwidthBitsPerSecond() const;
        auto AsEquivalentFunctionBlock() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupTerminalBlock>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiGroupTerminalBlock<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiMessage128
    {
        [[nodiscard]] auto Word0() const;
        auto Word0(uint32_t value) const;
        [[nodiscard]] auto Word1() const;
        auto Word1(uint32_t value) const;
        [[nodiscard]] auto Word2() const;
        auto Word2(uint32_t value) const;
        [[nodiscard]] auto Word3() const;
        auto Word3(uint32_t value) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiMessage128<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiMessage128Factory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
        auto CreateInstance2(uint64_t timestamp, uint32_t word0, uint32_t word1, uint32_t word2, uint32_t word3, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
        auto CreateInstance3(uint64_t timestamp, array_view<uint32_t const> words, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128Factory>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiMessage128Factory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiMessage128Statics
    {
        auto CreateFromStruct(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct const& message) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128Statics>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiMessage128Statics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiMessage32
    {
        [[nodiscard]] auto Word0() const;
        auto Word0(uint32_t value) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiMessage32<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiMessage32Factory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
        auto CreateInstance2(uint64_t timestamp, uint32_t word0, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32Factory>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiMessage32Factory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiMessage32Statics
    {
        auto CreateFromStruct(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct const& message) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32Statics>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiMessage32Statics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiMessage64
    {
        [[nodiscard]] auto Word0() const;
        auto Word0(uint32_t value) const;
        [[nodiscard]] auto Word1() const;
        auto Word1(uint32_t value) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiMessage64<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiMessage64Factory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
        auto CreateInstance2(uint64_t timestamp, uint32_t word0, uint32_t word1, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
        auto CreateInstance3(uint64_t timestamp, array_view<uint32_t const> words, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64Factory>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiMessage64Factory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiMessage64Statics
    {
        auto CreateFromStruct(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct const& message) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64Statics>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiMessage64Statics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiMessage96
    {
        [[nodiscard]] auto Word0() const;
        auto Word0(uint32_t value) const;
        [[nodiscard]] auto Word1() const;
        auto Word1(uint32_t value) const;
        [[nodiscard]] auto Word2() const;
        auto Word2(uint32_t value) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiMessage96<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiMessage96Factory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
        auto CreateInstance2(uint64_t timestamp, uint32_t word0, uint32_t word1, uint32_t word2, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
        auto CreateInstance3(uint64_t timestamp, array_view<uint32_t const> words, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96Factory>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiMessage96Factory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiMessage96Statics
    {
        auto CreateFromStruct(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct const& message) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96Statics>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiMessage96Statics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiMessageReceivedEventArgs
    {
        [[nodiscard]] auto Timestamp() const;
        [[nodiscard]] auto PacketType() const;
        [[nodiscard]] auto MessageType() const;
        auto PeekFirstWord() const;
        auto GetMessagePacket() const;
        auto FillWords(uint32_t& word0, uint32_t& word1, uint32_t& word2, uint32_t& word3) const;
        auto FillMessageStruct(winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct& message) const;
        auto FillMessage32(winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32 const& message) const;
        auto FillMessage64(winrt::Microsoft::Windows::Devices::Midi2::MidiMessage64 const& message) const;
        auto FillMessage96(winrt::Microsoft::Windows::Devices::Midi2::MidiMessage96 const& message) const;
        auto FillMessage128(winrt::Microsoft::Windows::Devices::Midi2::MidiMessage128 const& message) const;
        auto FillWordArray(uint32_t startIndex, array_view<uint32_t> words) const;
        auto FillByteArray(uint32_t startIndex, array_view<uint8_t> bytes) const;
        auto FillBuffer(uint32_t byteOffset, winrt::Windows::Foundation::IMemoryBuffer const& buffer) const;
        auto AppendWordsToList(param::vector<uint32_t> const& wordList) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiMessageReceivedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiMessageReceivedEventSource
    {
        auto MessageReceived(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventSource, winrt::Microsoft::Windows::Devices::Midi2::MidiMessageReceivedEventArgs> const& handler) const;
        using MessageReceived_revoker = impl::event_revoker<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventSource, &impl::abi_t<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventSource>::remove_MessageReceived>;
        [[nodiscard]] auto MessageReceived(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventSource, winrt::Microsoft::Windows::Devices::Midi2::MidiMessageReceivedEventArgs> const& handler) const;
        auto MessageReceived(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventSource>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiMessageReceivedEventSource<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiSession
    {
        [[nodiscard]] auto SessionId() const;
        [[nodiscard]] auto Name() const;
        [[nodiscard]] auto IsOpen() const;
        [[nodiscard]] auto Connections() const;
        auto CreateEndpointConnection(param::hstring const& endpointDeviceId) const;
        auto CreateEndpointConnection(param::hstring const& endpointDeviceId, bool autoReconnect) const;
        auto CreateEndpointConnection(param::hstring const& endpointDeviceId, bool autoReconnect, winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSettings const& settings) const;
        auto DisconnectEndpointConnection(winrt::guid const& endpointConnectionId) const;
        auto UpdateName(param::hstring const& newName) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiSession>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiSession<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiSessionStatics
    {
        auto Create(param::hstring const& sessionName) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiSessionStatics>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiSessionStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_IMidiUniversalPacket
    {
        [[nodiscard]] auto Timestamp() const;
        auto Timestamp(uint64_t value) const;
        [[nodiscard]] auto MessageType() const;
        auto MessageType(winrt::Microsoft::Windows::Devices::Midi2::MidiMessageType const& value) const;
        [[nodiscard]] auto PacketType() const;
        auto PeekFirstWord() const;
        auto GetAllWords() const;
        auto AppendAllMessageWordsToList(param::vector<uint32_t> const& targetList) const;
        auto FillBuffer(uint32_t byteOffset, winrt::Windows::Foundation::IMemoryBuffer const& buffer) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_IMidiUniversalPacket<D>;
    };
    struct struct_Microsoft_Windows_Devices_Midi2_MidiDeclaredDeviceIdentity
    {
        uint8_t SystemExclusiveIdByte1;
        uint8_t SystemExclusiveIdByte2;
        uint8_t SystemExclusiveIdByte3;
        uint8_t DeviceFamilyLsb;
        uint8_t DeviceFamilyMsb;
        uint8_t DeviceFamilyModelNumberLsb;
        uint8_t DeviceFamilyModelNumberMsb;
        uint8_t SoftwareRevisionLevelByte1;
        uint8_t SoftwareRevisionLevelByte2;
        uint8_t SoftwareRevisionLevelByte3;
        uint8_t SoftwareRevisionLevelByte4;
    };
    template <> struct abi<Microsoft::Windows::Devices::Midi2::MidiDeclaredDeviceIdentity>
    {
        using type = struct_Microsoft_Windows_Devices_Midi2_MidiDeclaredDeviceIdentity;
    };
    struct struct_Microsoft_Windows_Devices_Midi2_MidiDeclaredEndpointInfo
    {
        void* Name;
        void* ProductInstanceId;
        bool SupportsMidi10Protocol;
        bool SupportsMidi20Protocol;
        bool SupportsReceivingJitterReductionTimestamps;
        bool SupportsSendingJitterReductionTimestamps;
        bool HasStaticFunctionBlocks;
        uint8_t DeclaredFunctionBlockCount;
        uint8_t SpecificationVersionMajor;
        uint8_t SpecificationVersionMinor;
    };
    template <> struct abi<Microsoft::Windows::Devices::Midi2::MidiDeclaredEndpointInfo>
    {
        using type = struct_Microsoft_Windows_Devices_Midi2_MidiDeclaredEndpointInfo;
    };
    struct struct_Microsoft_Windows_Devices_Midi2_MidiDeclaredStreamConfiguration
    {
        int32_t Protocol;
        bool ReceiveJitterReductionTimestamps;
        bool SendJitterReductionTimestamps;
    };
    template <> struct abi<Microsoft::Windows::Devices::Midi2::MidiDeclaredStreamConfiguration>
    {
        using type = struct_Microsoft_Windows_Devices_Midi2_MidiDeclaredStreamConfiguration;
    };
    struct struct_Microsoft_Windows_Devices_Midi2_MidiEndpointTransportSuppliedInfo
    {
        void* Name;
        void* Description;
        void* SerialNumber;
        uint16_t VendorId;
        uint16_t ProductId;
        void* ManufacturerName;
        bool SupportsMultiClient;
        int32_t NativeDataFormat;
        winrt::guid TransportId;
        void* TransportAbbreviation;
    };
    template <> struct abi<Microsoft::Windows::Devices::Midi2::MidiEndpointTransportSuppliedInfo>
    {
        using type = struct_Microsoft_Windows_Devices_Midi2_MidiEndpointTransportSuppliedInfo;
    };
    struct struct_Microsoft_Windows_Devices_Midi2_MidiEndpointUserSuppliedInfo
    {
        void* Name;
        void* Description;
        void* LargeImagePath;
        void* SmallImagePath;
        bool RequiresNoteOffTranslation;
        uint16_t RecommendedControlChangeAutomationIntervalMilliseconds;
        bool SupportsMidiPolyphonicExpression;
    };
    template <> struct abi<Microsoft::Windows::Devices::Midi2::MidiEndpointUserSuppliedInfo>
    {
        using type = struct_Microsoft_Windows_Devices_Midi2_MidiEndpointUserSuppliedInfo;
    };
    struct struct_Microsoft_Windows_Devices_Midi2_MidiMessageStruct
    {
        uint32_t Word0;
        uint32_t Word1;
        uint32_t Word2;
        uint32_t Word3;
    };
    template <> struct abi<Microsoft::Windows::Devices::Midi2::MidiMessageStruct>
    {
        using type = struct_Microsoft_Windows_Devices_Midi2_MidiMessageStruct;
    };
}
#endif

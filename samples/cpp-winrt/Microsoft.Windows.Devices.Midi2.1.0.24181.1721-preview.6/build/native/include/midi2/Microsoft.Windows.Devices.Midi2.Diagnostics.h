// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#ifndef WINRT_Microsoft_Windows_Devices_Midi2_Diagnostics_H
#define WINRT_Microsoft_Windows_Devices_Midi2_Diagnostics_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.240405.15"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.240405.15"
#include "winrt/Microsoft.Windows.Devices.Midi2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/impl/Microsoft.Windows.Devices.Midi2.Diagnostics.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Diagnostics_IMidiDiagnosticsStatics<D>::DiagnosticsLoopbackAEndpointDeviceId() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiDiagnosticsStatics)->get_DiagnosticsLoopbackAEndpointDeviceId(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Diagnostics_IMidiDiagnosticsStatics<D>::DiagnosticsLoopbackBEndpointDeviceId() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiDiagnosticsStatics)->get_DiagnosticsLoopbackBEndpointDeviceId(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Diagnostics_IMidiDiagnosticsStatics<D>::PingService(uint8_t pingCount) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiDiagnosticsStatics)->PingService(pingCount, &result));
        return winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServicePingResponseSummary{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Diagnostics_IMidiDiagnosticsStatics<D>::PingService(uint8_t pingCount, uint32_t timeoutMilliseconds) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiDiagnosticsStatics)->PingService2(pingCount, timeoutMilliseconds, &result));
        return winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServicePingResponseSummary{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Diagnostics_IMidiReportingStatics<D>::GetInstalledTransportPlugins() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiReportingStatics)->GetInstalledTransportPlugins(&result));
        return winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServiceTransportPluginInfo>{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Diagnostics_IMidiReportingStatics<D>::GetInstalledMessageProcessingPlugins() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiReportingStatics)->GetInstalledMessageProcessingPlugins(&result));
        return winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServiceMessageProcessingPluginInfo>{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Diagnostics_IMidiReportingStatics<D>::GetActiveSessions() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiReportingStatics)->GetActiveSessions(&result));
        return winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServiceSessionInfo>{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Diagnostics_IMidiServicePingResponseSummary<D>::Success() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiServicePingResponseSummary)->get_Success(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Diagnostics_IMidiServicePingResponseSummary<D>::FailureReason() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiServicePingResponseSummary)->get_FailureReason(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Diagnostics_IMidiServicePingResponseSummary<D>::TotalPingRoundTripMidiClock() const
    {
        uint64_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiServicePingResponseSummary)->get_TotalPingRoundTripMidiClock(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Diagnostics_IMidiServicePingResponseSummary<D>::AveragePingRoundTripMidiClock() const
    {
        uint64_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiServicePingResponseSummary)->get_AveragePingRoundTripMidiClock(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Diagnostics_IMidiServicePingResponseSummary<D>::Responses() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiServicePingResponseSummary)->get_Responses(&value));
        return winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServicePingResponse>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Diagnostics_IMidiServiceSessionInfo<D>::SessionId() const
    {
        winrt::guid value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiServiceSessionInfo)->get_SessionId(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Diagnostics_IMidiServiceSessionInfo<D>::ProcessId() const
    {
        uint64_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiServiceSessionInfo)->get_ProcessId(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Diagnostics_IMidiServiceSessionInfo<D>::ProcessName() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiServiceSessionInfo)->get_ProcessName(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Diagnostics_IMidiServiceSessionInfo<D>::SessionName() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiServiceSessionInfo)->get_SessionName(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Diagnostics_IMidiServiceSessionInfo<D>::StartTime() const
    {
        winrt::Windows::Foundation::DateTime value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiServiceSessionInfo)->get_StartTime(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Diagnostics_IMidiServiceSessionInfo<D>::Connections() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiServiceSessionInfo)->get_Connections(&value));
        return winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServiceSessionConnectionInfo>{ value, take_ownership_from_abi };
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiDiagnosticsStatics> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiDiagnosticsStatics>
    {
        int32_t __stdcall get_DiagnosticsLoopbackAEndpointDeviceId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().DiagnosticsLoopbackAEndpointDeviceId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DiagnosticsLoopbackBEndpointDeviceId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().DiagnosticsLoopbackBEndpointDeviceId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall PingService(uint8_t pingCount, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServicePingResponseSummary>(this->shim().PingService(pingCount));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall PingService2(uint8_t pingCount, uint32_t timeoutMilliseconds, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServicePingResponseSummary>(this->shim().PingService(pingCount, timeoutMilliseconds));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiReportingStatics> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiReportingStatics>
    {
        int32_t __stdcall GetInstalledTransportPlugins(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServiceTransportPluginInfo>>(this->shim().GetInstalledTransportPlugins());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetInstalledMessageProcessingPlugins(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServiceMessageProcessingPluginInfo>>(this->shim().GetInstalledMessageProcessingPlugins());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetActiveSessions(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServiceSessionInfo>>(this->shim().GetActiveSessions());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiServicePingResponseSummary> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiServicePingResponseSummary>
    {
        int32_t __stdcall get_Success(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().Success());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_FailureReason(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().FailureReason());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_TotalPingRoundTripMidiClock(uint64_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint64_t>(this->shim().TotalPingRoundTripMidiClock());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AveragePingRoundTripMidiClock(uint64_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint64_t>(this->shim().AveragePingRoundTripMidiClock());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Responses(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServicePingResponse>>(this->shim().Responses());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiServiceSessionInfo> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiServiceSessionInfo>
    {
        int32_t __stdcall get_SessionId(winrt::guid* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::guid>(this->shim().SessionId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ProcessId(uint64_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint64_t>(this->shim().ProcessId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ProcessName(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ProcessName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SessionName(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().SessionName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_StartTime(int64_t* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::DateTime>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::DateTime>(this->shim().StartTime());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Connections(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServiceSessionConnectionInfo>>(this->shim().Connections());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::Devices::Midi2::Diagnostics
{
    inline auto MidiDiagnostics::DiagnosticsLoopbackAEndpointDeviceId()
    {
        return impl::call_factory_cast<hstring(*)(IMidiDiagnosticsStatics const&), MidiDiagnostics, IMidiDiagnosticsStatics>([](IMidiDiagnosticsStatics const& f) { return f.DiagnosticsLoopbackAEndpointDeviceId(); });
    }
    inline auto MidiDiagnostics::DiagnosticsLoopbackBEndpointDeviceId()
    {
        return impl::call_factory_cast<hstring(*)(IMidiDiagnosticsStatics const&), MidiDiagnostics, IMidiDiagnosticsStatics>([](IMidiDiagnosticsStatics const& f) { return f.DiagnosticsLoopbackBEndpointDeviceId(); });
    }
    inline auto MidiDiagnostics::PingService(uint8_t pingCount)
    {
        return impl::call_factory<MidiDiagnostics, IMidiDiagnosticsStatics>([&](IMidiDiagnosticsStatics const& f) { return f.PingService(pingCount); });
    }
    inline auto MidiDiagnostics::PingService(uint8_t pingCount, uint32_t timeoutMilliseconds)
    {
        return impl::call_factory<MidiDiagnostics, IMidiDiagnosticsStatics>([&](IMidiDiagnosticsStatics const& f) { return f.PingService(pingCount, timeoutMilliseconds); });
    }
    inline auto MidiReporting::GetInstalledTransportPlugins()
    {
        return impl::call_factory_cast<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServiceTransportPluginInfo>(*)(IMidiReportingStatics const&), MidiReporting, IMidiReportingStatics>([](IMidiReportingStatics const& f) { return f.GetInstalledTransportPlugins(); });
    }
    inline auto MidiReporting::GetInstalledMessageProcessingPlugins()
    {
        return impl::call_factory_cast<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServiceMessageProcessingPluginInfo>(*)(IMidiReportingStatics const&), MidiReporting, IMidiReportingStatics>([](IMidiReportingStatics const& f) { return f.GetInstalledMessageProcessingPlugins(); });
    }
    inline auto MidiReporting::GetActiveSessions()
    {
        return impl::call_factory_cast<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServiceSessionInfo>(*)(IMidiReportingStatics const&), MidiReporting, IMidiReportingStatics>([](IMidiReportingStatics const& f) { return f.GetActiveSessions(); });
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiDiagnosticsStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiReportingStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiServicePingResponseSummary> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiServiceSessionInfo> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiDiagnostics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiReporting> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServicePingResponseSummary> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServiceSessionInfo> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif

// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#ifndef WINRT_Microsoft_Windows_Devices_Midi2_Messages_0_H
#define WINRT_Microsoft_Windows_Devices_Midi2_Messages_0_H
WINRT_EXPORT namespace winrt::Microsoft::Windows::Devices::Midi2
{
    struct IMidiUniversalPacket;
    struct MidiChannel;
    enum class MidiFunctionBlockDirection : int32_t;
    enum class MidiFunctionBlockRepresentsMidi10Connection : int32_t;
    enum class MidiFunctionBlockUIHint : int32_t;
    struct MidiGroup;
    struct MidiMessage128;
    struct MidiMessage32;
    struct MidiMessage64;
    enum class MidiMessageType : int32_t;
    enum class MidiPacketType : int32_t;
}
WINRT_EXPORT namespace winrt::Windows::Devices::Midi
{
    struct MidiActiveSensingMessage;
    struct MidiChannelPressureMessage;
    struct MidiContinueMessage;
    struct MidiNoteOffMessage;
    struct MidiNoteOnMessage;
    struct MidiPitchBendChangeMessage;
    struct MidiPolyphonicKeyPressureMessage;
    struct MidiProgramChangeMessage;
    struct MidiSongPositionPointerMessage;
    struct MidiSongSelectMessage;
    struct MidiStartMessage;
    struct MidiStopMessage;
    struct MidiSystemResetMessage;
    struct MidiTimeCodeMessage;
    struct MidiTimingClockMessage;
    struct MidiTuneRequestMessage;
}
WINRT_EXPORT namespace winrt::Windows::Foundation::Collections
{
    template <typename T> struct WINRT_IMPL_EMPTY_BASES IIterable;
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::Devices::Midi2::Messages
{
    enum class Midi1ChannelVoiceMessageStatus : int32_t
    {
        NoteOff = 8,
        NoteOn = 9,
        PolyPressure = 10,
        ControlChange = 11,
        ProgramChange = 12,
        ChannelPressure = 13,
        PitchBend = 14,
    };
    enum class Midi2ChannelVoiceMessageStatus : int32_t
    {
        RegisteredPerNoteController = 0,
        AssignablePerNoteController = 1,
        RegisteredController = 2,
        AssignableController = 3,
        RelativeRegisteredController = 4,
        RelativeAssignableController = 5,
        PerNotePitchBend = 6,
        NoteOff = 8,
        NoteOn = 9,
        PolyPressure = 10,
        ControlChange = 11,
        ProgramChange = 12,
        ChannelPressure = 13,
        PitchBend = 14,
        PerNoteManagement = 15,
    };
    enum class MidiEndpointDiscoveryRequests : uint32_t
    {
        None = 0,
        RequestEndpointInfo = 0x1,
        RequestDeviceIdentity = 0x2,
        RequestEndpointName = 0x4,
        RequestProductInstanceId = 0x8,
        RequestStreamConfiguration = 0x10,
    };
    enum class MidiFunctionBlockDiscoveryRequests : uint32_t
    {
        None = 0,
        RequestFunctionBlockInfo = 0x1,
        RequestFunctionBlockName = 0x2,
    };
    enum class MidiSystemExclusive8Status : int32_t
    {
        CompleteMessageInSingleMessagePacket = 0,
        StartMessagePacket = 1,
        ContinueMessagePacket = 2,
        EndMessagePacket = 3,
    };
    struct IMidiMessageBuilderStatics;
    struct IMidiMessageConverterStatics;
    struct IMidiMessageHelperStatics;
    struct IMidiStreamMessageBuilderStatics;
    struct MidiMessageBuilder;
    struct MidiMessageConverter;
    struct MidiMessageHelper;
    struct MidiStreamMessageBuilder;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageBuilderStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageConverterStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiStreamMessageBuilderStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::Messages::MidiMessageBuilder>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::Messages::MidiMessageConverter>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::Messages::MidiMessageHelper>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::Messages::MidiStreamMessageBuilder>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::Messages::Midi1ChannelVoiceMessageStatus>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::Messages::Midi2ChannelVoiceMessageStatus>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::Messages::MidiEndpointDiscoveryRequests>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::Messages::MidiFunctionBlockDiscoveryRequests>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::Messages::MidiSystemExclusive8Status>{ using type = enum_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::Messages::MidiMessageBuilder> = L"Microsoft.Windows.Devices.Midi2.Messages.MidiMessageBuilder";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::Messages::MidiMessageConverter> = L"Microsoft.Windows.Devices.Midi2.Messages.MidiMessageConverter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::Messages::MidiMessageHelper> = L"Microsoft.Windows.Devices.Midi2.Messages.MidiMessageHelper";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::Messages::MidiStreamMessageBuilder> = L"Microsoft.Windows.Devices.Midi2.Messages.MidiStreamMessageBuilder";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::Messages::Midi1ChannelVoiceMessageStatus> = L"Microsoft.Windows.Devices.Midi2.Messages.Midi1ChannelVoiceMessageStatus";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::Messages::Midi2ChannelVoiceMessageStatus> = L"Microsoft.Windows.Devices.Midi2.Messages.Midi2ChannelVoiceMessageStatus";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::Messages::MidiEndpointDiscoveryRequests> = L"Microsoft.Windows.Devices.Midi2.Messages.MidiEndpointDiscoveryRequests";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::Messages::MidiFunctionBlockDiscoveryRequests> = L"Microsoft.Windows.Devices.Midi2.Messages.MidiFunctionBlockDiscoveryRequests";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::Messages::MidiSystemExclusive8Status> = L"Microsoft.Windows.Devices.Midi2.Messages.MidiSystemExclusive8Status";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageBuilderStatics> = L"Microsoft.Windows.Devices.Midi2.Messages.IMidiMessageBuilderStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageConverterStatics> = L"Microsoft.Windows.Devices.Midi2.Messages.IMidiMessageConverterStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics> = L"Microsoft.Windows.Devices.Midi2.Messages.IMidiMessageHelperStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiStreamMessageBuilderStatics> = L"Microsoft.Windows.Devices.Midi2.Messages.IMidiStreamMessageBuilderStatics";
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageBuilderStatics>{ 0x090C2C0B,0x95E4,0x5FF3,{ 0xA4,0xA9,0x2C,0x23,0x86,0x10,0x31,0x36 } }; // 090C2C0B-95E4-5FF3-A4A9-2C2386103136
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageConverterStatics>{ 0x30BE1DB6,0x9E9E,0x5EAC,{ 0xB1,0xE6,0x6D,0x4F,0x11,0xFA,0x1E,0xBF } }; // 30BE1DB6-9E9E-5EAC-B1E6-6D4F11FA1EBF
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics>{ 0xCC84C703,0xE523,0x5597,{ 0xA3,0xD6,0xE8,0xAD,0x68,0x8A,0x96,0xCC } }; // CC84C703-E523-5597-A3D6-E8AD688A96CC
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiStreamMessageBuilderStatics>{ 0x03E16477,0x3857,0x5ED3,{ 0x83,0x81,0x59,0xC4,0x0C,0xE4,0xA3,0x3D } }; // 03E16477-3857-5ED3-8381-59C40CE4A33D
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageBuilderStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall BuildUtilityMessage(uint64_t, uint8_t, uint32_t, void**) noexcept = 0;
            virtual int32_t __stdcall BuildSystemMessage(uint64_t, void*, uint8_t, uint8_t, uint8_t, void**) noexcept = 0;
            virtual int32_t __stdcall BuildMidi1ChannelVoiceMessage(uint64_t, void*, int32_t, void*, uint8_t, uint8_t, void**) noexcept = 0;
            virtual int32_t __stdcall BuildSystemExclusive7Message(uint64_t, void*, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, void**) noexcept = 0;
            virtual int32_t __stdcall BuildMidi2ChannelVoiceMessage(uint64_t, void*, int32_t, void*, uint16_t, uint32_t, void**) noexcept = 0;
            virtual int32_t __stdcall BuildSystemExclusive8Message(uint64_t, void*, int32_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, void**) noexcept = 0;
            virtual int32_t __stdcall BuildMixedDataSetChunkHeaderMessage(uint64_t, void*, uint8_t, uint16_t, uint16_t, uint16_t, uint16_t, uint16_t, uint16_t, uint16_t, void**) noexcept = 0;
            virtual int32_t __stdcall BuildMixedDataSetChunkDataMessage(uint64_t, void*, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, void**) noexcept = 0;
            virtual int32_t __stdcall BuildFlexDataMessage(uint64_t, void*, uint8_t, uint8_t, void*, uint8_t, uint8_t, uint32_t, uint32_t, uint32_t, void**) noexcept = 0;
            virtual int32_t __stdcall BuildStreamMessage(uint64_t, uint8_t, uint16_t, uint16_t, uint32_t, uint32_t, uint32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageConverterStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall ConvertMidi1Message(uint64_t, void*, uint8_t, void**) noexcept = 0;
            virtual int32_t __stdcall ConvertMidi1Message2(uint64_t, void*, uint8_t, uint8_t, void**) noexcept = 0;
            virtual int32_t __stdcall ConvertMidi1Message3(uint64_t, void*, uint8_t, uint8_t, uint8_t, void**) noexcept = 0;
            virtual int32_t __stdcall ConvertMidi1ChannelPressureMessage(uint64_t, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall ConvertMidi1NoteOffMessage(uint64_t, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall ConvertMidi1NoteOnMessage(uint64_t, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall ConvertMidi1PitchBendChangeMessage(uint64_t, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall ConvertMidi1PolyphonicKeyPressureMessage(uint64_t, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall ConvertMidi1ProgramChangeMessage(uint64_t, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall ConvertMidi1TimeCodeMessage(uint64_t, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall ConvertMidi1SongPositionPointerMessage(uint64_t, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall ConvertMidi1SongSelectMessage(uint64_t, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall ConvertMidi1TuneRequestMessage(uint64_t, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall ConvertMidi1TimingClockMessage(uint64_t, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall ConvertMidi1StartMessage(uint64_t, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall ConvertMidi1ContinueMessage(uint64_t, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall ConvertMidi1StopMessage(uint64_t, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall ConvertMidi1ActiveSensingMessage(uint64_t, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall ConvertMidi1SystemResetMessage(uint64_t, void*, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall ValidateMessage32MessageType(uint32_t, bool*) noexcept = 0;
            virtual int32_t __stdcall ValidateMessage64MessageType(uint32_t, bool*) noexcept = 0;
            virtual int32_t __stdcall ValidateMessage96MessageType(uint32_t, bool*) noexcept = 0;
            virtual int32_t __stdcall ValidateMessage128MessageType(uint32_t, bool*) noexcept = 0;
            virtual int32_t __stdcall GetMessageTypeFromMessageFirstWord(uint32_t, int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetPacketTypeFromMessageFirstWord(uint32_t, int32_t*) noexcept = 0;
            virtual int32_t __stdcall MessageTypeHasGroupField(int32_t, bool*) noexcept = 0;
            virtual int32_t __stdcall ReplaceGroupInMessageFirstWord(uint32_t, void*, uint32_t*) noexcept = 0;
            virtual int32_t __stdcall GetGroupFromMessageFirstWord(uint32_t, void**) noexcept = 0;
            virtual int32_t __stdcall GetStatusFromUtilityMessage(uint32_t, uint8_t*) noexcept = 0;
            virtual int32_t __stdcall GetStatusFromMidi1ChannelVoiceMessage(uint32_t, int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetStatusFromMidi2ChannelVoiceMessageFirstWord(uint32_t, int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetStatusBankFromFlexDataMessageFirstWord(uint32_t, uint8_t*) noexcept = 0;
            virtual int32_t __stdcall GetStatusFromFlexDataMessageFirstWord(uint32_t, uint8_t*) noexcept = 0;
            virtual int32_t __stdcall GetStatusFromSystemCommonMessage(uint32_t, uint8_t*) noexcept = 0;
            virtual int32_t __stdcall GetStatusFromDataMessage64FirstWord(uint32_t, uint8_t*) noexcept = 0;
            virtual int32_t __stdcall GetNumberOfBytesFromDataMessage64FirstWord(uint32_t, uint8_t*) noexcept = 0;
            virtual int32_t __stdcall GetStatusFromDataMessage128FirstWord(uint32_t, uint8_t*) noexcept = 0;
            virtual int32_t __stdcall GetNumberOfBytesFromDataMessage128FirstWord(uint32_t, uint8_t*) noexcept = 0;
            virtual int32_t __stdcall MessageTypeHasChannelField(int32_t, bool*) noexcept = 0;
            virtual int32_t __stdcall ReplaceChannelInMessageFirstWord(uint32_t, void*, uint32_t*) noexcept = 0;
            virtual int32_t __stdcall GetChannelFromMessageFirstWord(uint32_t, void**) noexcept = 0;
            virtual int32_t __stdcall GetFormFromStreamMessageFirstWord(uint32_t, uint8_t*) noexcept = 0;
            virtual int32_t __stdcall GetStatusFromStreamMessageFirstWord(uint32_t, uint16_t*) noexcept = 0;
            virtual int32_t __stdcall GetMessageDisplayNameFromFirstWord(uint32_t, void**) noexcept = 0;
            virtual int32_t __stdcall GetPacketListFromWordList(uint64_t, void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetWordListFromPacketList(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiStreamMessageBuilderStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall BuildEndpointDiscoveryMessage(uint64_t, uint8_t, uint8_t, uint32_t, void**) noexcept = 0;
            virtual int32_t __stdcall BuildEndpointInfoNotificationMessage(uint64_t, uint8_t, uint8_t, bool, uint8_t, bool, bool, bool, bool, void**) noexcept = 0;
            virtual int32_t __stdcall BuildDeviceIdentityNotificationMessage(uint64_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, void**) noexcept = 0;
            virtual int32_t __stdcall BuildEndpointNameNotificationMessages(uint64_t, void*, void**) noexcept = 0;
            virtual int32_t __stdcall BuildProductInstanceIdNotificationMessages(uint64_t, void*, void**) noexcept = 0;
            virtual int32_t __stdcall ParseEndpointNameNotificationMessages(void*, void**) noexcept = 0;
            virtual int32_t __stdcall ParseProductInstanceIdNotificationMessages(void*, void**) noexcept = 0;
            virtual int32_t __stdcall BuildStreamConfigurationRequestMessage(uint64_t, uint8_t, bool, bool, void**) noexcept = 0;
            virtual int32_t __stdcall BuildStreamConfigurationNotificationMessage(uint64_t, uint8_t, bool, bool, void**) noexcept = 0;
            virtual int32_t __stdcall BuildFunctionBlockDiscoveryMessage(uint64_t, uint8_t, uint32_t, void**) noexcept = 0;
            virtual int32_t __stdcall BuildFunctionBlockInfoNotificationMessage(uint64_t, bool, uint8_t, int32_t, int32_t, int32_t, uint8_t, uint8_t, uint8_t, uint8_t, void**) noexcept = 0;
            virtual int32_t __stdcall BuildFunctionBlockNameNotificationMessages(uint64_t, uint8_t, void*, void**) noexcept = 0;
            virtual int32_t __stdcall ParseFunctionBlockNameNotificationMessages(void*, void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageBuilderStatics
    {
        auto BuildUtilityMessage(uint64_t timestamp, uint8_t status, uint32_t dataOrReserved) const;
        auto BuildSystemMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, uint8_t status, uint8_t midi1Byte2, uint8_t midi1Byte3) const;
        auto BuildMidi1ChannelVoiceMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Microsoft::Windows::Devices::Midi2::Messages::Midi1ChannelVoiceMessageStatus const& status, winrt::Microsoft::Windows::Devices::Midi2::MidiChannel const& channel, uint8_t byte3, uint8_t byte4) const;
        auto BuildSystemExclusive7Message(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, uint8_t status, uint8_t numberOfBytes, uint8_t dataByte0, uint8_t dataByte1, uint8_t dataByte2, uint8_t dataByte3, uint8_t dataByte4, uint8_t dataByte5) const;
        auto BuildMidi2ChannelVoiceMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Microsoft::Windows::Devices::Midi2::Messages::Midi2ChannelVoiceMessageStatus const& status, winrt::Microsoft::Windows::Devices::Midi2::MidiChannel const& channel, uint16_t index, uint32_t data) const;
        auto BuildSystemExclusive8Message(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Microsoft::Windows::Devices::Midi2::Messages::MidiSystemExclusive8Status const& status, uint8_t numberOfValidDataBytesThisMessage, uint8_t streamId, uint8_t dataByte00, uint8_t dataByte01, uint8_t dataByte02, uint8_t dataByte03, uint8_t dataByte04, uint8_t dataByte05, uint8_t dataByte06, uint8_t dataByte07, uint8_t dataByte08, uint8_t dataByte09, uint8_t dataByte10, uint8_t dataByte11, uint8_t dataByte12) const;
        auto BuildMixedDataSetChunkHeaderMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, uint8_t mdsId, uint16_t numberValidDataBytesInThisChunk, uint16_t numberChunksInMixedDataSet, uint16_t numberOfThisChunk, uint16_t manufacturerId, uint16_t deviceId, uint16_t subId1, uint16_t subId2) const;
        auto BuildMixedDataSetChunkDataMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, uint8_t mdsId, uint8_t dataByte00, uint8_t dataByte01, uint8_t dataByte02, uint8_t dataByte03, uint8_t dataByte04, uint8_t dataByte05, uint8_t dataByte06, uint8_t dataByte07, uint8_t dataByte08, uint8_t dataByte09, uint8_t dataByte10, uint8_t dataByte11, uint8_t dataByte12, uint8_t dataByte13) const;
        auto BuildFlexDataMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, uint8_t form, uint8_t address, winrt::Microsoft::Windows::Devices::Midi2::MidiChannel const& channel, uint8_t statusBank, uint8_t status, uint32_t word1Data, uint32_t word2Data, uint32_t word3Data) const;
        auto BuildStreamMessage(uint64_t timestamp, uint8_t form, uint16_t status, uint16_t word0RemainingData, uint32_t word1Data, uint32_t word2Data, uint32_t word3Data) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageBuilderStatics>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageBuilderStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageConverterStatics
    {
        auto ConvertMidi1Message(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, uint8_t statusByte) const;
        auto ConvertMidi1Message(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, uint8_t statusByte, uint8_t dataByte1) const;
        auto ConvertMidi1Message(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, uint8_t statusByte, uint8_t dataByte1, uint8_t dataByte2) const;
        auto ConvertMidi1ChannelPressureMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiChannelPressureMessage const& originalMessage) const;
        auto ConvertMidi1NoteOffMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiNoteOffMessage const& originalMessage) const;
        auto ConvertMidi1NoteOnMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiNoteOnMessage const& originalMessage) const;
        auto ConvertMidi1PitchBendChangeMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiPitchBendChangeMessage const& originalMessage) const;
        auto ConvertMidi1PolyphonicKeyPressureMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiPolyphonicKeyPressureMessage const& originalMessage) const;
        auto ConvertMidi1ProgramChangeMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiProgramChangeMessage const& originalMessage) const;
        auto ConvertMidi1TimeCodeMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiTimeCodeMessage const& originalMessage) const;
        auto ConvertMidi1SongPositionPointerMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiSongPositionPointerMessage const& originalMessage) const;
        auto ConvertMidi1SongSelectMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiSongSelectMessage const& originalMessage) const;
        auto ConvertMidi1TuneRequestMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiTuneRequestMessage const& originalMessage) const;
        auto ConvertMidi1TimingClockMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiTimingClockMessage const& originalMessage) const;
        auto ConvertMidi1StartMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiStartMessage const& originalMessage) const;
        auto ConvertMidi1ContinueMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiContinueMessage const& originalMessage) const;
        auto ConvertMidi1StopMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiStopMessage const& originalMessage) const;
        auto ConvertMidi1ActiveSensingMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiActiveSensingMessage const& originalMessage) const;
        auto ConvertMidi1SystemResetMessage(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group, winrt::Windows::Devices::Midi::MidiSystemResetMessage const& originalMessage) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageConverterStatics>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageConverterStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageHelperStatics
    {
        auto ValidateMessage32MessageType(uint32_t word0) const;
        auto ValidateMessage64MessageType(uint32_t word0) const;
        auto ValidateMessage96MessageType(uint32_t word0) const;
        auto ValidateMessage128MessageType(uint32_t word0) const;
        auto GetMessageTypeFromMessageFirstWord(uint32_t word0) const;
        auto GetPacketTypeFromMessageFirstWord(uint32_t word0) const;
        auto MessageTypeHasGroupField(winrt::Microsoft::Windows::Devices::Midi2::MidiMessageType const& messageType) const;
        auto ReplaceGroupInMessageFirstWord(uint32_t word0, winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& newGroup) const;
        auto GetGroupFromMessageFirstWord(uint32_t word0) const;
        auto GetStatusFromUtilityMessage(uint32_t word0) const;
        auto GetStatusFromMidi1ChannelVoiceMessage(uint32_t word0) const;
        auto GetStatusFromMidi2ChannelVoiceMessageFirstWord(uint32_t word0) const;
        auto GetStatusBankFromFlexDataMessageFirstWord(uint32_t word0) const;
        auto GetStatusFromFlexDataMessageFirstWord(uint32_t word0) const;
        auto GetStatusFromSystemCommonMessage(uint32_t word0) const;
        auto GetStatusFromDataMessage64FirstWord(uint32_t word0) const;
        auto GetNumberOfBytesFromDataMessage64FirstWord(uint32_t word0) const;
        auto GetStatusFromDataMessage128FirstWord(uint32_t word0) const;
        auto GetNumberOfBytesFromDataMessage128FirstWord(uint32_t word0) const;
        auto MessageTypeHasChannelField(winrt::Microsoft::Windows::Devices::Midi2::MidiMessageType const& messageType) const;
        auto ReplaceChannelInMessageFirstWord(uint32_t word0, winrt::Microsoft::Windows::Devices::Midi2::MidiChannel const& newChannel) const;
        auto GetChannelFromMessageFirstWord(uint32_t word0) const;
        auto GetFormFromStreamMessageFirstWord(uint32_t word0) const;
        auto GetStatusFromStreamMessageFirstWord(uint32_t word0) const;
        auto GetMessageDisplayNameFromFirstWord(uint32_t word0) const;
        auto GetPacketListFromWordList(uint64_t timestamp, param::iterable<uint32_t> const& words) const;
        auto GetWordListFromPacketList(param::iterable<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket> const& words) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiMessageHelperStatics>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiMessageHelperStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiStreamMessageBuilderStatics
    {
        auto BuildEndpointDiscoveryMessage(uint64_t timestamp, uint8_t umpVersionMajor, uint8_t umpVersionMinor, winrt::Microsoft::Windows::Devices::Midi2::Messages::MidiEndpointDiscoveryRequests const& request) const;
        auto BuildEndpointInfoNotificationMessage(uint64_t timestamp, uint8_t umpVersionMajor, uint8_t umpVersionMinor, bool hasStaticFunctionBlocks, uint8_t numberOfFunctionBlocks, bool supportsMidi20Protocol, bool supportsMidi10Protocol, bool supportsReceivingJitterReductionTimestamps, bool supportsSendingJitterReductionTimestamps) const;
        auto BuildDeviceIdentityNotificationMessage(uint64_t timestamp, uint8_t deviceManufacturerSysExIdByte1, uint8_t deviceManufacturerSysExIdByte2, uint8_t deviceManufacturerSysExIdByte3, uint8_t deviceFamilyLsb, uint8_t deviceFamilyMsb, uint8_t deviceFamilyModelNumberLsb, uint8_t deviceFamilyModelNumberMsb, uint8_t softwareRevisionLevelByte1, uint8_t softwareRevisionLevelByte2, uint8_t softwareRevisionLevelByte3, uint8_t softwareRevisionLevelByte4) const;
        auto BuildEndpointNameNotificationMessages(uint64_t timestamp, param::hstring const& name) const;
        auto BuildProductInstanceIdNotificationMessages(uint64_t timestamp, param::hstring const& productInstanceId) const;
        auto ParseEndpointNameNotificationMessages(param::iterable<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket> const& messages) const;
        auto ParseProductInstanceIdNotificationMessages(param::iterable<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket> const& messages) const;
        auto BuildStreamConfigurationRequestMessage(uint64_t timestamp, uint8_t protocol, bool expectToReceiveJRTimestamps, bool requestToSendJRTimestamps) const;
        auto BuildStreamConfigurationNotificationMessage(uint64_t timestamp, uint8_t protocol, bool confirmationWillReceiveJRTimestamps, bool confirmationSendJRTimestamps) const;
        auto BuildFunctionBlockDiscoveryMessage(uint64_t timestamp, uint8_t functionBlockNumber, winrt::Microsoft::Windows::Devices::Midi2::Messages::MidiFunctionBlockDiscoveryRequests const& requestFlags) const;
        auto BuildFunctionBlockInfoNotificationMessage(uint64_t timestamp, bool active, uint8_t functionBlockNumber, winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockUIHint const& uiHint, winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockRepresentsMidi10Connection const& midi10, winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockDirection const& direction, uint8_t firstGroup, uint8_t numberOfGroups, uint8_t midiCIVersionFormat, uint8_t maxNumberSysEx8Streams) const;
        auto BuildFunctionBlockNameNotificationMessages(uint64_t timestamp, uint8_t functionBlockNumber, param::hstring const& name) const;
        auto ParseFunctionBlockNameNotificationMessages(param::iterable<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket> const& messages) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::Messages::IMidiStreamMessageBuilderStatics>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_Messages_IMidiStreamMessageBuilderStatics<D>;
    };
}
#endif

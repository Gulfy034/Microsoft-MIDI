// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#ifndef WINRT_Microsoft_Windows_Devices_Midi2_CapabilityInquiry_0_H
#define WINRT_Microsoft_Windows_Devices_Midi2_CapabilityInquiry_0_H
WINRT_EXPORT namespace winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry
{
    struct IMidiUniqueId;
    struct IMidiUniqueIdFactory;
    struct IMidiUniqueIdStatics;
    struct MidiUniqueId;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueId>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueIdFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueIdStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::MidiUniqueId>{ using type = class_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::MidiUniqueId> = L"Microsoft.Windows.Devices.Midi2.CapabilityInquiry.MidiUniqueId";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueId> = L"Microsoft.Windows.Devices.Midi2.CapabilityInquiry.IMidiUniqueId";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueIdFactory> = L"Microsoft.Windows.Devices.Midi2.CapabilityInquiry.IMidiUniqueIdFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueIdStatics> = L"Microsoft.Windows.Devices.Midi2.CapabilityInquiry.IMidiUniqueIdStatics";
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueId>{ 0x2476DCBC,0x3CD7,0x5346,{ 0x9F,0x5C,0xE6,0xD1,0xAD,0xD1,0x67,0x41 } }; // 2476DCBC-3CD7-5346-9F5C-E6D1ADD16741
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueIdFactory>{ 0xD2F59A5C,0xE78B,0x5D7A,{ 0x9B,0x22,0x3D,0xC0,0x28,0x58,0x1A,0x64 } }; // D2F59A5C-E78B-5D7A-9B22-3DC028581A64
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueIdStatics>{ 0x27B256C2,0xB3B0,0x507A,{ 0xBC,0x6B,0x48,0xE6,0xFC,0x42,0xB4,0x68 } }; // 27B256C2-B3B0-507A-BC6B-48E6FC42B468
    template <> struct default_interface<winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::MidiUniqueId>{ using type = winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueId; };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueId>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Byte1(uint8_t*) noexcept = 0;
            virtual int32_t __stdcall put_Byte1(uint8_t) noexcept = 0;
            virtual int32_t __stdcall get_Byte2(uint8_t*) noexcept = 0;
            virtual int32_t __stdcall put_Byte2(uint8_t) noexcept = 0;
            virtual int32_t __stdcall get_Byte3(uint8_t*) noexcept = 0;
            virtual int32_t __stdcall put_Byte3(uint8_t) noexcept = 0;
            virtual int32_t __stdcall get_Byte4(uint8_t*) noexcept = 0;
            virtual int32_t __stdcall put_Byte4(uint8_t) noexcept = 0;
            virtual int32_t __stdcall get_AsCombined28BitValue(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_IsBroadcast(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsReserved(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueIdFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(uint32_t, void**) noexcept = 0;
            virtual int32_t __stdcall CreateInstance2(uint8_t, uint8_t, uint8_t, uint8_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueIdStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ShortLabel(void**) noexcept = 0;
            virtual int32_t __stdcall get_LongLabel(void**) noexcept = 0;
            virtual int32_t __stdcall CreateBroadcast(void**) noexcept = 0;
            virtual int32_t __stdcall CreateRandom(void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_CapabilityInquiry_IMidiUniqueId
    {
        [[nodiscard]] auto Byte1() const;
        auto Byte1(uint8_t value) const;
        [[nodiscard]] auto Byte2() const;
        auto Byte2(uint8_t value) const;
        [[nodiscard]] auto Byte3() const;
        auto Byte3(uint8_t value) const;
        [[nodiscard]] auto Byte4() const;
        auto Byte4(uint8_t value) const;
        [[nodiscard]] auto AsCombined28BitValue() const;
        [[nodiscard]] auto IsBroadcast() const;
        [[nodiscard]] auto IsReserved() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueId>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_CapabilityInquiry_IMidiUniqueId<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_CapabilityInquiry_IMidiUniqueIdFactory
    {
        auto CreateInstance(uint32_t combined28BitValue) const;
        auto CreateInstance2(uint8_t sevenBitByte1, uint8_t sevenBitByte2, uint8_t sevenBitByte3, uint8_t sevenBitByte4) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueIdFactory>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_CapabilityInquiry_IMidiUniqueIdFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_CapabilityInquiry_IMidiUniqueIdStatics
    {
        [[nodiscard]] auto ShortLabel() const;
        [[nodiscard]] auto LongLabel() const;
        auto CreateBroadcast() const;
        auto CreateRandom() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueIdStatics>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_CapabilityInquiry_IMidiUniqueIdStatics<D>;
    };
}
#endif

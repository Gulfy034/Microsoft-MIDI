// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#ifndef WINRT_Microsoft_Windows_Devices_Midi2_Initialization_H
#define WINRT_Microsoft_Windows_Devices_Midi2_Initialization_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.240405.15"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.240405.15"
#include "winrt/Microsoft.Windows.Devices.Midi2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Microsoft.Windows.Devices.Midi2.Initialization.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Initialization_IMidiServicesInitializerStatics<D>::IsOperatingSystemSupported() const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Initialization::IMidiServicesInitializerStatics)->IsOperatingSystemSupported(&result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Initialization_IMidiServicesInitializerStatics<D>::EnsureServiceAvailable() const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Initialization::IMidiServicesInitializerStatics)->EnsureServiceAvailable(&result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Initialization_IMidiServicesInitializerStatics<D>::InitializeSdkRuntime() const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Initialization::IMidiServicesInitializerStatics)->InitializeSdkRuntime(&result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Initialization_IMidiServicesInitializerStatics<D>::IsCompatibleDesktopAppSdkRuntimeInstalled() const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Initialization::IMidiServicesInitializerStatics)->IsCompatibleDesktopAppSdkRuntimeInstalled(&result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Initialization_IMidiServicesInitializerStatics<D>::GetLatestRuntimeReleaseInstallerUri() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Initialization::IMidiServicesInitializerStatics)->GetLatestRuntimeReleaseInstallerUri(&result));
        return winrt::Windows::Foundation::Uri{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Initialization_IMidiServicesInitializerStatics<D>::GetLatestSettingsAppReleaseInstallerUri() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Initialization::IMidiServicesInitializerStatics)->GetLatestSettingsAppReleaseInstallerUri(&result));
        return winrt::Windows::Foundation::Uri{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Initialization_IMidiServicesInitializerStatics<D>::GetLatestConsoleAppReleaseInstallerUri() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Initialization::IMidiServicesInitializerStatics)->GetLatestConsoleAppReleaseInstallerUri(&result));
        return winrt::Windows::Foundation::Uri{ result, take_ownership_from_abi };
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::Initialization::IMidiServicesInitializer> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::Initialization::IMidiServicesInitializer>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::Initialization::IMidiServicesInitializerStatics> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::Initialization::IMidiServicesInitializerStatics>
    {
        int32_t __stdcall IsOperatingSystemSupported(bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().IsOperatingSystemSupported());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall EnsureServiceAvailable(bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().EnsureServiceAvailable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall InitializeSdkRuntime(bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().InitializeSdkRuntime());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsCompatibleDesktopAppSdkRuntimeInstalled(bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().IsCompatibleDesktopAppSdkRuntimeInstalled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetLatestRuntimeReleaseInstallerUri(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Uri>(this->shim().GetLatestRuntimeReleaseInstallerUri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetLatestSettingsAppReleaseInstallerUri(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Uri>(this->shim().GetLatestSettingsAppReleaseInstallerUri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetLatestConsoleAppReleaseInstallerUri(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Uri>(this->shim().GetLatestConsoleAppReleaseInstallerUri());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::Devices::Midi2::Initialization
{
    inline auto MidiServicesInitializer::IsOperatingSystemSupported()
    {
        return impl::call_factory_cast<bool(*)(IMidiServicesInitializerStatics const&), MidiServicesInitializer, IMidiServicesInitializerStatics>([](IMidiServicesInitializerStatics const& f) { return f.IsOperatingSystemSupported(); });
    }
    inline auto MidiServicesInitializer::EnsureServiceAvailable()
    {
        return impl::call_factory_cast<bool(*)(IMidiServicesInitializerStatics const&), MidiServicesInitializer, IMidiServicesInitializerStatics>([](IMidiServicesInitializerStatics const& f) { return f.EnsureServiceAvailable(); });
    }
    inline auto MidiServicesInitializer::InitializeSdkRuntime()
    {
        return impl::call_factory_cast<bool(*)(IMidiServicesInitializerStatics const&), MidiServicesInitializer, IMidiServicesInitializerStatics>([](IMidiServicesInitializerStatics const& f) { return f.InitializeSdkRuntime(); });
    }
    inline auto MidiServicesInitializer::IsCompatibleDesktopAppSdkRuntimeInstalled()
    {
        return impl::call_factory_cast<bool(*)(IMidiServicesInitializerStatics const&), MidiServicesInitializer, IMidiServicesInitializerStatics>([](IMidiServicesInitializerStatics const& f) { return f.IsCompatibleDesktopAppSdkRuntimeInstalled(); });
    }
    inline auto MidiServicesInitializer::GetLatestRuntimeReleaseInstallerUri()
    {
        return impl::call_factory_cast<winrt::Windows::Foundation::Uri(*)(IMidiServicesInitializerStatics const&), MidiServicesInitializer, IMidiServicesInitializerStatics>([](IMidiServicesInitializerStatics const& f) { return f.GetLatestRuntimeReleaseInstallerUri(); });
    }
    inline auto MidiServicesInitializer::GetLatestSettingsAppReleaseInstallerUri()
    {
        return impl::call_factory_cast<winrt::Windows::Foundation::Uri(*)(IMidiServicesInitializerStatics const&), MidiServicesInitializer, IMidiServicesInitializerStatics>([](IMidiServicesInitializerStatics const& f) { return f.GetLatestSettingsAppReleaseInstallerUri(); });
    }
    inline auto MidiServicesInitializer::GetLatestConsoleAppReleaseInstallerUri()
    {
        return impl::call_factory_cast<winrt::Windows::Foundation::Uri(*)(IMidiServicesInitializerStatics const&), MidiServicesInitializer, IMidiServicesInitializerStatics>([](IMidiServicesInitializerStatics const& f) { return f.GetLatestConsoleAppReleaseInstallerUri(); });
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::Initialization::IMidiServicesInitializer> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::Initialization::IMidiServicesInitializerStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::Initialization::MidiServicesInitializer> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif

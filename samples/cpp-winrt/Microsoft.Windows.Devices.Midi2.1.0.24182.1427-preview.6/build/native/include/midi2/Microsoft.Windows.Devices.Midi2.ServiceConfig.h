// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#ifndef WINRT_Microsoft_Windows_Devices_Midi2_ServiceConfig_H
#define WINRT_Microsoft_Windows_Devices_Midi2_ServiceConfig_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.240405.15"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.240405.15"
#include "winrt/Microsoft.Windows.Devices.Midi2.h"
#include "winrt/impl/Microsoft.Windows.Devices.Midi2.ServiceConfig.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_ServiceConfig_IMidiServiceConfigStatics<D>::UpdateTransportPluginConfig(winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::IMidiServiceTransportPluginConfig const& configUpdate) const
    {
        winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::MidiServiceConfigResponse result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::IMidiServiceConfigStatics)->UpdateTransportPluginConfig(*(void**)(&configUpdate), put_abi(result)));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_ServiceConfig_IMidiServiceConfigStatics<D>::UpdateProcessingPluginConfig(winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::IMidiServiceMessageProcessingPluginConfig const& configUpdate) const
    {
        winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::MidiServiceConfigResponse result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::IMidiServiceConfigStatics)->UpdateProcessingPluginConfig(*(void**)(&configUpdate), put_abi(result)));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_ServiceConfig_IMidiServiceMessageProcessingPluginConfig<D>::EndpointDeviceId() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::IMidiServiceMessageProcessingPluginConfig)->get_EndpointDeviceId(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_ServiceConfig_IMidiServiceMessageProcessingPluginConfig<D>::MessageProcessingPluginId() const
    {
        winrt::guid value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::IMidiServiceMessageProcessingPluginConfig)->get_MessageProcessingPluginId(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_ServiceConfig_IMidiServiceMessageProcessingPluginConfig<D>::PluginInstanceId() const
    {
        winrt::guid value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::IMidiServiceMessageProcessingPluginConfig)->get_PluginInstanceId(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_ServiceConfig_IMidiServiceMessageProcessingPluginConfig<D>::IsFromCurrentConfigFile() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::IMidiServiceMessageProcessingPluginConfig)->get_IsFromCurrentConfigFile(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_ServiceConfig_IMidiServiceMessageProcessingPluginConfig<D>::GetConfigJson() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::IMidiServiceMessageProcessingPluginConfig)->GetConfigJson(&result));
        return hstring{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_ServiceConfig_IMidiServiceTransportPluginConfig<D>::TransportId() const
    {
        winrt::guid value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::IMidiServiceTransportPluginConfig)->get_TransportId(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_ServiceConfig_IMidiServiceTransportPluginConfig<D>::IsFromCurrentConfigFile() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::IMidiServiceTransportPluginConfig)->get_IsFromCurrentConfigFile(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_ServiceConfig_IMidiServiceTransportPluginConfig<D>::GetConfigJson() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::IMidiServiceTransportPluginConfig)->GetConfigJson(&result));
        return hstring{ result, take_ownership_from_abi };
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::IMidiServiceConfig> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::IMidiServiceConfig>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::IMidiServiceConfigStatics> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::IMidiServiceConfigStatics>
    {
        int32_t __stdcall UpdateTransportPluginConfig(void* configUpdate, struct struct_Microsoft_Windows_Devices_Midi2_ServiceConfig_MidiServiceConfigResponse* result) noexcept final try
        {
            zero_abi<winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::MidiServiceConfigResponse>(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::MidiServiceConfigResponse>(this->shim().UpdateTransportPluginConfig(*reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::IMidiServiceTransportPluginConfig const*>(&configUpdate)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall UpdateProcessingPluginConfig(void* configUpdate, struct struct_Microsoft_Windows_Devices_Midi2_ServiceConfig_MidiServiceConfigResponse* result) noexcept final try
        {
            zero_abi<winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::MidiServiceConfigResponse>(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::MidiServiceConfigResponse>(this->shim().UpdateProcessingPluginConfig(*reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::IMidiServiceMessageProcessingPluginConfig const*>(&configUpdate)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::IMidiServiceMessageProcessingPluginConfig> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::IMidiServiceMessageProcessingPluginConfig>
    {
        int32_t __stdcall get_EndpointDeviceId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().EndpointDeviceId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MessageProcessingPluginId(winrt::guid* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::guid>(this->shim().MessageProcessingPluginId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PluginInstanceId(winrt::guid* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::guid>(this->shim().PluginInstanceId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsFromCurrentConfigFile(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsFromCurrentConfigFile());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfigJson(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<hstring>(this->shim().GetConfigJson());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::IMidiServiceTransportPluginConfig> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::IMidiServiceTransportPluginConfig>
    {
        int32_t __stdcall get_TransportId(winrt::guid* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::guid>(this->shim().TransportId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsFromCurrentConfigFile(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsFromCurrentConfigFile());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfigJson(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<hstring>(this->shim().GetConfigJson());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig
{
    inline auto MidiServiceConfig::UpdateTransportPluginConfig(winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::IMidiServiceTransportPluginConfig const& configUpdate)
    {
        return impl::call_factory<MidiServiceConfig, IMidiServiceConfigStatics>([&](IMidiServiceConfigStatics const& f) { return f.UpdateTransportPluginConfig(configUpdate); });
    }
    inline auto MidiServiceConfig::UpdateProcessingPluginConfig(winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::IMidiServiceMessageProcessingPluginConfig const& configUpdate)
    {
        return impl::call_factory<MidiServiceConfig, IMidiServiceConfigStatics>([&](IMidiServiceConfigStatics const& f) { return f.UpdateProcessingPluginConfig(configUpdate); });
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::IMidiServiceConfig> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::IMidiServiceConfigStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::IMidiServiceMessageProcessingPluginConfig> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::IMidiServiceTransportPluginConfig> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::MidiServiceConfig> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif

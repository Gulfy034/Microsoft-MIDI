// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#ifndef WINRT_Microsoft_Windows_Devices_Midi2_Endpoints_Loopback_H
#define WINRT_Microsoft_Windows_Devices_Midi2_Endpoints_Loopback_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.240405.15"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.240405.15"
#include "winrt/Microsoft.Windows.Devices.Midi2.h"
#include "winrt/impl/Microsoft.Windows.Devices.Midi2.ServiceConfig.2.h"
#include "winrt/impl/Microsoft.Windows.Devices.Midi2.Endpoints.Loopback.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Endpoints_Loopback_IMidiLoopbackEndpointCreationConfig<D>::AssociationId() const
    {
        winrt::guid value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointCreationConfig)->get_AssociationId(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Endpoints_Loopback_IMidiLoopbackEndpointCreationConfig<D>::AssociationId(winrt::guid const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointCreationConfig)->put_AssociationId(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Endpoints_Loopback_IMidiLoopbackEndpointCreationConfig<D>::EndpointDefinitionA() const
    {
        winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointDefinition value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointCreationConfig)->get_EndpointDefinitionA(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Endpoints_Loopback_IMidiLoopbackEndpointCreationConfig<D>::EndpointDefinitionA(winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointDefinition const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointCreationConfig)->put_EndpointDefinitionA(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Endpoints_Loopback_IMidiLoopbackEndpointCreationConfig<D>::EndpointDefinitionB() const
    {
        winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointDefinition value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointCreationConfig)->get_EndpointDefinitionB(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Endpoints_Loopback_IMidiLoopbackEndpointCreationConfig<D>::EndpointDefinitionB(winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointDefinition const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointCreationConfig)->put_EndpointDefinitionB(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Endpoints_Loopback_IMidiLoopbackEndpointCreationConfigFactory<D>::CreateInstance(winrt::guid const& associationId, winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointDefinition const& endpointDefinitionA, winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointDefinition const& endpointDefinitionB) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointCreationConfigFactory)->CreateInstance(impl::bind_in(associationId), impl::bind_in(endpointDefinitionA), impl::bind_in(endpointDefinitionB), &value));
        return winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointCreationConfig{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Endpoints_Loopback_IMidiLoopbackEndpointDeletionConfig<D>::AssociationId() const
    {
        winrt::guid value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointDeletionConfig)->get_AssociationId(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Endpoints_Loopback_IMidiLoopbackEndpointDeletionConfig<D>::AssociationId(winrt::guid const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointDeletionConfig)->put_AssociationId(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Endpoints_Loopback_IMidiLoopbackEndpointDeletionConfigFactory<D>::CreateInstance(winrt::guid const& associationId) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointDeletionConfigFactory)->CreateInstance(impl::bind_in(associationId), &value));
        return winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointDeletionConfig{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Endpoints_Loopback_IMidiLoopbackEndpointManagerStatics<D>::IsTransportAvailable() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointManagerStatics)->get_IsTransportAvailable(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Endpoints_Loopback_IMidiLoopbackEndpointManagerStatics<D>::AbstractionId() const
    {
        winrt::guid value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointManagerStatics)->get_AbstractionId(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Endpoints_Loopback_IMidiLoopbackEndpointManagerStatics<D>::CreateTransientLoopbackEndpoints(winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointCreationConfig const& creationConfig) const
    {
        winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointCreationResult result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointManagerStatics)->CreateTransientLoopbackEndpoints(*(void**)(&creationConfig), put_abi(result)));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_Endpoints_Loopback_IMidiLoopbackEndpointManagerStatics<D>::RemoveTransientLoopbackEndpoints(winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointDeletionConfig const& deletionConfig) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointManagerStatics)->RemoveTransientLoopbackEndpoints(*(void**)(&deletionConfig), &result));
        return result;
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointCreationConfig> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointCreationConfig>
    {
        int32_t __stdcall get_AssociationId(winrt::guid* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::guid>(this->shim().AssociationId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AssociationId(winrt::guid value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AssociationId(*reinterpret_cast<winrt::guid const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_EndpointDefinitionA(struct struct_Microsoft_Windows_Devices_Midi2_Endpoints_Loopback_MidiLoopbackEndpointDefinition* value) noexcept final try
        {
            zero_abi<winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointDefinition>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointDefinition>(this->shim().EndpointDefinitionA());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_EndpointDefinitionA(struct struct_Microsoft_Windows_Devices_Midi2_Endpoints_Loopback_MidiLoopbackEndpointDefinition value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().EndpointDefinitionA(*reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointDefinition const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_EndpointDefinitionB(struct struct_Microsoft_Windows_Devices_Midi2_Endpoints_Loopback_MidiLoopbackEndpointDefinition* value) noexcept final try
        {
            zero_abi<winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointDefinition>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointDefinition>(this->shim().EndpointDefinitionB());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_EndpointDefinitionB(struct struct_Microsoft_Windows_Devices_Midi2_Endpoints_Loopback_MidiLoopbackEndpointDefinition value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().EndpointDefinitionB(*reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointDefinition const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointCreationConfigFactory> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointCreationConfigFactory>
    {
        int32_t __stdcall CreateInstance(winrt::guid associationId, struct struct_Microsoft_Windows_Devices_Midi2_Endpoints_Loopback_MidiLoopbackEndpointDefinition endpointDefinitionA, struct struct_Microsoft_Windows_Devices_Midi2_Endpoints_Loopback_MidiLoopbackEndpointDefinition endpointDefinitionB, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointCreationConfig>(this->shim().CreateInstance(*reinterpret_cast<winrt::guid const*>(&associationId), *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointDefinition const*>(&endpointDefinitionA), *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointDefinition const*>(&endpointDefinitionB)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointDeletionConfig> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointDeletionConfig>
    {
        int32_t __stdcall get_AssociationId(winrt::guid* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::guid>(this->shim().AssociationId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AssociationId(winrt::guid value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AssociationId(*reinterpret_cast<winrt::guid const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointDeletionConfigFactory> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointDeletionConfigFactory>
    {
        int32_t __stdcall CreateInstance(winrt::guid associationId, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointDeletionConfig>(this->shim().CreateInstance(*reinterpret_cast<winrt::guid const*>(&associationId)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointManager> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointManager>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointManagerStatics> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointManagerStatics>
    {
        int32_t __stdcall get_IsTransportAvailable(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsTransportAvailable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AbstractionId(winrt::guid* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::guid>(this->shim().AbstractionId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateTransientLoopbackEndpoints(void* creationConfig, struct struct_Microsoft_Windows_Devices_Midi2_Endpoints_Loopback_MidiLoopbackEndpointCreationResult* result) noexcept final try
        {
            zero_abi<winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointCreationResult>(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointCreationResult>(this->shim().CreateTransientLoopbackEndpoints(*reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointCreationConfig const*>(&creationConfig)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RemoveTransientLoopbackEndpoints(void* deletionConfig, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().RemoveTransientLoopbackEndpoints(*reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointDeletionConfig const*>(&deletionConfig)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback
{
    inline MidiLoopbackEndpointCreationConfig::MidiLoopbackEndpointCreationConfig() :
        MidiLoopbackEndpointCreationConfig(impl::call_factory_cast<MidiLoopbackEndpointCreationConfig(*)(winrt::Windows::Foundation::IActivationFactory const&), MidiLoopbackEndpointCreationConfig>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<MidiLoopbackEndpointCreationConfig>(); }))
    {
    }
    inline MidiLoopbackEndpointCreationConfig::MidiLoopbackEndpointCreationConfig(winrt::guid const& associationId, winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointDefinition const& endpointDefinitionA, winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointDefinition const& endpointDefinitionB) :
        MidiLoopbackEndpointCreationConfig(impl::call_factory<MidiLoopbackEndpointCreationConfig, IMidiLoopbackEndpointCreationConfigFactory>([&](IMidiLoopbackEndpointCreationConfigFactory const& f) { return f.CreateInstance(associationId, endpointDefinitionA, endpointDefinitionB); }))
    {
    }
    inline MidiLoopbackEndpointDeletionConfig::MidiLoopbackEndpointDeletionConfig(winrt::guid const& associationId) :
        MidiLoopbackEndpointDeletionConfig(impl::call_factory<MidiLoopbackEndpointDeletionConfig, IMidiLoopbackEndpointDeletionConfigFactory>([&](IMidiLoopbackEndpointDeletionConfigFactory const& f) { return f.CreateInstance(associationId); }))
    {
    }
    inline auto MidiLoopbackEndpointManager::IsTransportAvailable()
    {
        return impl::call_factory_cast<bool(*)(IMidiLoopbackEndpointManagerStatics const&), MidiLoopbackEndpointManager, IMidiLoopbackEndpointManagerStatics>([](IMidiLoopbackEndpointManagerStatics const& f) { return f.IsTransportAvailable(); });
    }
    inline auto MidiLoopbackEndpointManager::AbstractionId()
    {
        return impl::call_factory_cast<winrt::guid(*)(IMidiLoopbackEndpointManagerStatics const&), MidiLoopbackEndpointManager, IMidiLoopbackEndpointManagerStatics>([](IMidiLoopbackEndpointManagerStatics const& f) { return f.AbstractionId(); });
    }
    inline auto MidiLoopbackEndpointManager::CreateTransientLoopbackEndpoints(winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointCreationConfig const& creationConfig)
    {
        return impl::call_factory<MidiLoopbackEndpointManager, IMidiLoopbackEndpointManagerStatics>([&](IMidiLoopbackEndpointManagerStatics const& f) { return f.CreateTransientLoopbackEndpoints(creationConfig); });
    }
    inline auto MidiLoopbackEndpointManager::RemoveTransientLoopbackEndpoints(winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointDeletionConfig const& deletionConfig)
    {
        return impl::call_factory<MidiLoopbackEndpointManager, IMidiLoopbackEndpointManagerStatics>([&](IMidiLoopbackEndpointManagerStatics const& f) { return f.RemoveTransientLoopbackEndpoints(deletionConfig); });
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointCreationConfig> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointCreationConfigFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointDeletionConfig> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointDeletionConfigFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointManager> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::IMidiLoopbackEndpointManagerStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointCreationConfig> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointDeletionConfig> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Loopback::MidiLoopbackEndpointManager> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif

// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#ifndef WINRT_Microsoft_Windows_Devices_Midi2_Diagnostics_0_H
#define WINRT_Microsoft_Windows_Devices_Midi2_Diagnostics_0_H
WINRT_EXPORT namespace winrt::Windows::Foundation
{
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::Devices::Midi2::Diagnostics
{
    struct IMidiDiagnosticsStatics;
    struct IMidiReportingStatics;
    struct IMidiServicePingResponseSummary;
    struct IMidiServiceSessionInfo;
    struct MidiDiagnostics;
    struct MidiReporting;
    struct MidiServicePingResponseSummary;
    struct MidiServiceSessionInfo;
    struct MidiServiceMessageProcessingPluginInfo;
    struct MidiServicePingResponse;
    struct MidiServiceSessionConnectionInfo;
    struct MidiServiceTransportPluginInfo;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiDiagnosticsStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiReportingStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiServicePingResponseSummary>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiServiceSessionInfo>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiDiagnostics>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiReporting>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServicePingResponseSummary>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServiceSessionInfo>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServiceMessageProcessingPluginInfo>{ using type = struct_category<winrt::guid, hstring, hstring, hstring, hstring, hstring, bool, bool, bool>; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServicePingResponse>{ using type = struct_category<uint32_t, uint32_t, uint64_t, uint64_t, uint64_t, uint64_t>; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServiceSessionConnectionInfo>{ using type = struct_category<hstring, uint16_t, winrt::Windows::Foundation::DateTime>; };
    template <> struct category<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServiceTransportPluginInfo>{ using type = struct_category<winrt::guid, hstring, hstring, hstring, hstring, hstring, hstring, bool, bool, bool, bool>; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiDiagnostics> = L"Microsoft.Windows.Devices.Midi2.Diagnostics.MidiDiagnostics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiReporting> = L"Microsoft.Windows.Devices.Midi2.Diagnostics.MidiReporting";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServicePingResponseSummary> = L"Microsoft.Windows.Devices.Midi2.Diagnostics.MidiServicePingResponseSummary";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServiceSessionInfo> = L"Microsoft.Windows.Devices.Midi2.Diagnostics.MidiServiceSessionInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServiceMessageProcessingPluginInfo> = L"Microsoft.Windows.Devices.Midi2.Diagnostics.MidiServiceMessageProcessingPluginInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServicePingResponse> = L"Microsoft.Windows.Devices.Midi2.Diagnostics.MidiServicePingResponse";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServiceSessionConnectionInfo> = L"Microsoft.Windows.Devices.Midi2.Diagnostics.MidiServiceSessionConnectionInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServiceTransportPluginInfo> = L"Microsoft.Windows.Devices.Midi2.Diagnostics.MidiServiceTransportPluginInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiDiagnosticsStatics> = L"Microsoft.Windows.Devices.Midi2.Diagnostics.IMidiDiagnosticsStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiReportingStatics> = L"Microsoft.Windows.Devices.Midi2.Diagnostics.IMidiReportingStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiServicePingResponseSummary> = L"Microsoft.Windows.Devices.Midi2.Diagnostics.IMidiServicePingResponseSummary";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiServiceSessionInfo> = L"Microsoft.Windows.Devices.Midi2.Diagnostics.IMidiServiceSessionInfo";
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiDiagnosticsStatics>{ 0x4AB631D4,0x3C9A,0x5E7D,{ 0xB3,0xDA,0xB4,0x85,0x69,0x7E,0xDF,0x9E } }; // 4AB631D4-3C9A-5E7D-B3DA-B485697EDF9E
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiReportingStatics>{ 0x836257F9,0xF81F,0x5C0E,{ 0xB6,0xF2,0xB2,0xD0,0xF9,0xDC,0xF6,0x8E } }; // 836257F9-F81F-5C0E-B6F2-B2D0F9DCF68E
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiServicePingResponseSummary>{ 0x9826B87F,0x01ED,0x56CE,{ 0xA5,0x40,0x6A,0xB9,0x89,0xA0,0x3E,0xF8 } }; // 9826B87F-01ED-56CE-A540-6AB989A03EF8
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiServiceSessionInfo>{ 0x3156AD39,0x109E,0x5B67,{ 0x86,0x1B,0xAE,0x41,0x38,0x27,0xC9,0x05 } }; // 3156AD39-109E-5B67-861B-AE413827C905
    template <> struct default_interface<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServicePingResponseSummary>{ using type = winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiServicePingResponseSummary; };
    template <> struct default_interface<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServiceSessionInfo>{ using type = winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiServiceSessionInfo; };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiDiagnosticsStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_DiagnosticsLoopbackAEndpointDeviceId(void**) noexcept = 0;
            virtual int32_t __stdcall get_DiagnosticsLoopbackBEndpointDeviceId(void**) noexcept = 0;
            virtual int32_t __stdcall PingService(uint8_t, void**) noexcept = 0;
            virtual int32_t __stdcall PingService2(uint8_t, uint32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiReportingStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall GetInstalledTransportPlugins(void**) noexcept = 0;
            virtual int32_t __stdcall GetInstalledMessageProcessingPlugins(void**) noexcept = 0;
            virtual int32_t __stdcall GetActiveSessions(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiServicePingResponseSummary>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Success(bool*) noexcept = 0;
            virtual int32_t __stdcall get_FailureReason(void**) noexcept = 0;
            virtual int32_t __stdcall get_TotalPingRoundTripMidiClock(uint64_t*) noexcept = 0;
            virtual int32_t __stdcall get_AveragePingRoundTripMidiClock(uint64_t*) noexcept = 0;
            virtual int32_t __stdcall get_Responses(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiServiceSessionInfo>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_SessionId(winrt::guid*) noexcept = 0;
            virtual int32_t __stdcall get_ProcessId(uint64_t*) noexcept = 0;
            virtual int32_t __stdcall get_ProcessName(void**) noexcept = 0;
            virtual int32_t __stdcall get_SessionName(void**) noexcept = 0;
            virtual int32_t __stdcall get_StartTime(int64_t*) noexcept = 0;
            virtual int32_t __stdcall get_Connections(void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_Diagnostics_IMidiDiagnosticsStatics
    {
        [[nodiscard]] auto DiagnosticsLoopbackAEndpointDeviceId() const;
        [[nodiscard]] auto DiagnosticsLoopbackBEndpointDeviceId() const;
        auto PingService(uint8_t pingCount) const;
        auto PingService(uint8_t pingCount, uint32_t timeoutMilliseconds) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiDiagnosticsStatics>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_Diagnostics_IMidiDiagnosticsStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_Diagnostics_IMidiReportingStatics
    {
        auto GetInstalledTransportPlugins() const;
        auto GetInstalledMessageProcessingPlugins() const;
        auto GetActiveSessions() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiReportingStatics>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_Diagnostics_IMidiReportingStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_Diagnostics_IMidiServicePingResponseSummary
    {
        [[nodiscard]] auto Success() const;
        [[nodiscard]] auto FailureReason() const;
        [[nodiscard]] auto TotalPingRoundTripMidiClock() const;
        [[nodiscard]] auto AveragePingRoundTripMidiClock() const;
        [[nodiscard]] auto Responses() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiServicePingResponseSummary>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_Diagnostics_IMidiServicePingResponseSummary<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Devices_Midi2_Diagnostics_IMidiServiceSessionInfo
    {
        [[nodiscard]] auto SessionId() const;
        [[nodiscard]] auto ProcessId() const;
        [[nodiscard]] auto ProcessName() const;
        [[nodiscard]] auto SessionName() const;
        [[nodiscard]] auto StartTime() const;
        [[nodiscard]] auto Connections() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Devices::Midi2::Diagnostics::IMidiServiceSessionInfo>
    {
        template <typename D> using type = consume_Microsoft_Windows_Devices_Midi2_Diagnostics_IMidiServiceSessionInfo<D>;
    };
    struct struct_Microsoft_Windows_Devices_Midi2_Diagnostics_MidiServiceMessageProcessingPluginInfo
    {
        winrt::guid Id;
        void* Name;
        void* Description;
        void* Author;
        void* SmallImagePath;
        void* Version;
        bool SupportsMultipleInstancesPerDevice;
        bool IsSystemManaged;
        bool IsClientConfigurable;
    };
    template <> struct abi<Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServiceMessageProcessingPluginInfo>
    {
        using type = struct_Microsoft_Windows_Devices_Midi2_Diagnostics_MidiServiceMessageProcessingPluginInfo;
    };
    struct struct_Microsoft_Windows_Devices_Midi2_Diagnostics_MidiServicePingResponse
    {
        uint32_t SourceId;
        uint32_t Index;
        uint64_t ClientSendMidiTimestamp;
        uint64_t ServiceReportedMidiTimestamp;
        uint64_t ClientReceiveMidiTimestamp;
        uint64_t ClientDeltaTimestamp;
    };
    template <> struct abi<Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServicePingResponse>
    {
        using type = struct_Microsoft_Windows_Devices_Midi2_Diagnostics_MidiServicePingResponse;
    };
    struct struct_Microsoft_Windows_Devices_Midi2_Diagnostics_MidiServiceSessionConnectionInfo
    {
        void* EndpointDeviceId;
        uint16_t InstanceCount;
        int64_t EarliestConnectionTime;
    };
    template <> struct abi<Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServiceSessionConnectionInfo>
    {
        using type = struct_Microsoft_Windows_Devices_Midi2_Diagnostics_MidiServiceSessionConnectionInfo;
    };
    struct struct_Microsoft_Windows_Devices_Midi2_Diagnostics_MidiServiceTransportPluginInfo
    {
        winrt::guid Id;
        void* Name;
        void* Abbreviation;
        void* Description;
        void* SmallImagePath;
        void* Author;
        void* Version;
        bool IsRuntimeCreatableByApps;
        bool IsRuntimeCreatableBySettings;
        bool IsSystemManaged;
        bool CanConfigure;
    };
    template <> struct abi<Microsoft::Windows::Devices::Midi2::Diagnostics::MidiServiceTransportPluginInfo>
    {
        using type = struct_Microsoft_Windows_Devices_Midi2_Diagnostics_MidiServiceTransportPluginInfo;
    };
}
#endif

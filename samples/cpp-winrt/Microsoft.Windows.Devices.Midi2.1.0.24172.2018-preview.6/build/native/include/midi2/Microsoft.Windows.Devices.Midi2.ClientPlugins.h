// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#ifndef WINRT_Microsoft_Windows_Devices_Midi2_ClientPlugins_H
#define WINRT_Microsoft_Windows_Devices_Midi2_ClientPlugins_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.240405.15"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.240405.15"
#include "winrt/Microsoft.Windows.Devices.Midi2.h"
#include "winrt/impl/Microsoft.Windows.Devices.Midi2.2.h"
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/impl/Microsoft.Windows.Devices.Midi2.ClientPlugins.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_ClientPlugins_IMidiChannelEndpointListener<D>::IncludedGroup() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::ClientPlugins::IMidiChannelEndpointListener)->get_IncludedGroup(&value));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiGroup{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_ClientPlugins_IMidiChannelEndpointListener<D>::IncludedGroup(winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::ClientPlugins::IMidiChannelEndpointListener)->put_IncludedGroup(*(void**)(&value)));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_ClientPlugins_IMidiChannelEndpointListener<D>::IncludedChannels() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::ClientPlugins::IMidiChannelEndpointListener)->get_IncludedChannels(&value));
        return winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::Devices::Midi2::MidiChannel>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_ClientPlugins_IMidiChannelEndpointListener<D>::PreventCallingFurtherListeners() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::ClientPlugins::IMidiChannelEndpointListener)->get_PreventCallingFurtherListeners(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_ClientPlugins_IMidiChannelEndpointListener<D>::PreventCallingFurtherListeners(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::ClientPlugins::IMidiChannelEndpointListener)->put_PreventCallingFurtherListeners(value));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_ClientPlugins_IMidiChannelEndpointListener<D>::PreventFiringMainMessageReceivedEvent() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::ClientPlugins::IMidiChannelEndpointListener)->get_PreventFiringMainMessageReceivedEvent(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_ClientPlugins_IMidiChannelEndpointListener<D>::PreventFiringMainMessageReceivedEvent(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::ClientPlugins::IMidiChannelEndpointListener)->put_PreventFiringMainMessageReceivedEvent(value));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_ClientPlugins_IMidiGroupEndpointListener<D>::IncludedGroups() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::ClientPlugins::IMidiGroupEndpointListener)->get_IncludedGroups(&value));
        return winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_ClientPlugins_IMidiGroupEndpointListener<D>::PreventCallingFurtherListeners() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::ClientPlugins::IMidiGroupEndpointListener)->get_PreventCallingFurtherListeners(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_ClientPlugins_IMidiGroupEndpointListener<D>::PreventCallingFurtherListeners(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::ClientPlugins::IMidiGroupEndpointListener)->put_PreventCallingFurtherListeners(value));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_ClientPlugins_IMidiGroupEndpointListener<D>::PreventFiringMainMessageReceivedEvent() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::ClientPlugins::IMidiGroupEndpointListener)->get_PreventFiringMainMessageReceivedEvent(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_ClientPlugins_IMidiGroupEndpointListener<D>::PreventFiringMainMessageReceivedEvent(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::ClientPlugins::IMidiGroupEndpointListener)->put_PreventFiringMainMessageReceivedEvent(value));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_ClientPlugins_IMidiMessageTypeEndpointListener<D>::IncludedMessageTypes() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::ClientPlugins::IMidiMessageTypeEndpointListener)->get_IncludedMessageTypes(&value));
        return winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageType>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_ClientPlugins_IMidiMessageTypeEndpointListener<D>::PreventCallingFurtherListeners() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::ClientPlugins::IMidiMessageTypeEndpointListener)->get_PreventCallingFurtherListeners(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_ClientPlugins_IMidiMessageTypeEndpointListener<D>::PreventCallingFurtherListeners(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::ClientPlugins::IMidiMessageTypeEndpointListener)->put_PreventCallingFurtherListeners(value));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_ClientPlugins_IMidiMessageTypeEndpointListener<D>::PreventFiringMainMessageReceivedEvent() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::ClientPlugins::IMidiMessageTypeEndpointListener)->get_PreventFiringMainMessageReceivedEvent(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_ClientPlugins_IMidiMessageTypeEndpointListener<D>::PreventFiringMainMessageReceivedEvent(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::ClientPlugins::IMidiMessageTypeEndpointListener)->put_PreventFiringMainMessageReceivedEvent(value));
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::ClientPlugins::IMidiChannelEndpointListener> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::ClientPlugins::IMidiChannelEndpointListener>
    {
        int32_t __stdcall get_IncludedGroup(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup>(this->shim().IncludedGroup());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IncludedGroup(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IncludedGroup(*reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IncludedChannels(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::Devices::Midi2::MidiChannel>>(this->shim().IncludedChannels());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PreventCallingFurtherListeners(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().PreventCallingFurtherListeners());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PreventCallingFurtherListeners(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PreventCallingFurtherListeners(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PreventFiringMainMessageReceivedEvent(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().PreventFiringMainMessageReceivedEvent());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PreventFiringMainMessageReceivedEvent(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PreventFiringMainMessageReceivedEvent(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::ClientPlugins::IMidiGroupEndpointListener> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::ClientPlugins::IMidiGroupEndpointListener>
    {
        int32_t __stdcall get_IncludedGroups(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup>>(this->shim().IncludedGroups());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PreventCallingFurtherListeners(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().PreventCallingFurtherListeners());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PreventCallingFurtherListeners(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PreventCallingFurtherListeners(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PreventFiringMainMessageReceivedEvent(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().PreventFiringMainMessageReceivedEvent());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PreventFiringMainMessageReceivedEvent(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PreventFiringMainMessageReceivedEvent(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::ClientPlugins::IMidiMessageTypeEndpointListener> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::ClientPlugins::IMidiMessageTypeEndpointListener>
    {
        int32_t __stdcall get_IncludedMessageTypes(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageType>>(this->shim().IncludedMessageTypes());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PreventCallingFurtherListeners(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().PreventCallingFurtherListeners());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PreventCallingFurtherListeners(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PreventCallingFurtherListeners(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PreventFiringMainMessageReceivedEvent(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().PreventFiringMainMessageReceivedEvent());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PreventFiringMainMessageReceivedEvent(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PreventFiringMainMessageReceivedEvent(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::Devices::Midi2::ClientPlugins
{
    inline MidiChannelEndpointListener::MidiChannelEndpointListener() :
        MidiChannelEndpointListener(impl::call_factory_cast<MidiChannelEndpointListener(*)(winrt::Windows::Foundation::IActivationFactory const&), MidiChannelEndpointListener>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<MidiChannelEndpointListener>(); }))
    {
    }
    inline MidiGroupEndpointListener::MidiGroupEndpointListener() :
        MidiGroupEndpointListener(impl::call_factory_cast<MidiGroupEndpointListener(*)(winrt::Windows::Foundation::IActivationFactory const&), MidiGroupEndpointListener>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<MidiGroupEndpointListener>(); }))
    {
    }
    inline MidiMessageTypeEndpointListener::MidiMessageTypeEndpointListener() :
        MidiMessageTypeEndpointListener(impl::call_factory_cast<MidiMessageTypeEndpointListener(*)(winrt::Windows::Foundation::IActivationFactory const&), MidiMessageTypeEndpointListener>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<MidiMessageTypeEndpointListener>(); }))
    {
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::ClientPlugins::IMidiChannelEndpointListener> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::ClientPlugins::IMidiGroupEndpointListener> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::ClientPlugins::IMidiMessageTypeEndpointListener> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::ClientPlugins::MidiChannelEndpointListener> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::ClientPlugins::MidiGroupEndpointListener> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::ClientPlugins::MidiMessageTypeEndpointListener> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif

// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#ifndef WINRT_Microsoft_Windows_Devices_Midi2_H
#define WINRT_Microsoft_Windows_Devices_Midi2_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.240405.15"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.240405.15"
#include "winrt/impl/Windows.Devices.Enumeration.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/impl/Microsoft.Windows.Devices.Midi2.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiChannel<D>::Index() const
    {
        uint8_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiChannel)->get_Index(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiChannel<D>::Index(uint8_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiChannel)->put_Index(value));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiChannel<D>::DisplayValue() const
    {
        uint8_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiChannel)->get_DisplayValue(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiChannelFactory<D>::CreateInstance(uint8_t index) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiChannelFactory)->CreateInstance(index, &value));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiChannel{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiChannelStatics<D>::ShortLabel() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiChannelStatics)->get_ShortLabel(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiChannelStatics<D>::LongLabel() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiChannelStatics)->get_LongLabel(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiChannelStatics<D>::IsValidIndex(uint8_t index) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiChannelStatics)->IsValidIndex(index, &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiClockStatics<D>::Now() const
    {
        uint64_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiClockStatics)->get_Now(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiClockStatics<D>::TimestampConstantSendImmediately() const
    {
        uint64_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiClockStatics)->get_TimestampConstantSendImmediately(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiClockStatics<D>::TimestampFrequency() const
    {
        uint64_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiClockStatics)->get_TimestampFrequency(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiClockStatics<D>::ConvertTimestampTicksToNanoseconds(uint64_t timestampValue) const
    {
        double result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiClockStatics)->ConvertTimestampTicksToNanoseconds(timestampValue, &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiClockStatics<D>::ConvertTimestampTicksToMicroseconds(uint64_t timestampValue) const
    {
        double result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiClockStatics)->ConvertTimestampTicksToMicroseconds(timestampValue, &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiClockStatics<D>::ConvertTimestampTicksToMilliseconds(uint64_t timestampValue) const
    {
        double result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiClockStatics)->ConvertTimestampTicksToMilliseconds(timestampValue, &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiClockStatics<D>::ConvertTimestampTicksToSeconds(uint64_t timestampValue) const
    {
        double result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiClockStatics)->ConvertTimestampTicksToSeconds(timestampValue, &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiClockStatics<D>::OffsetTimestampByTicks(uint64_t timestampValue, int64_t offsetTicks) const
    {
        uint64_t result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiClockStatics)->OffsetTimestampByTicks(timestampValue, offsetTicks, &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiClockStatics<D>::OffsetTimestampByMicroseconds(uint64_t timestampValue, int64_t offsetMicroseconds) const
    {
        uint64_t result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiClockStatics)->OffsetTimestampByMicroseconds(timestampValue, offsetMicroseconds, &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiClockStatics<D>::OffsetTimestampByMilliseconds(uint64_t timestampValue, int64_t offsetMilliseconds) const
    {
        uint64_t result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiClockStatics)->OffsetTimestampByMilliseconds(timestampValue, offsetMilliseconds, &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiClockStatics<D>::OffsetTimestampBySeconds(uint64_t timestampValue, int64_t offsetSeconds) const
    {
        uint64_t result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiClockStatics)->OffsetTimestampBySeconds(timestampValue, offsetSeconds, &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnection<D>::ConnectionId() const
    {
        winrt::guid value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection)->get_ConnectionId(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnection<D>::ConnectedEndpointDeviceId() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection)->get_ConnectedEndpointDeviceId(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnection<D>::Tag() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection)->get_Tag(&value));
        return winrt::Windows::Foundation::IInspectable{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnection<D>::Tag(winrt::Windows::Foundation::IInspectable const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection)->put_Tag(*(void**)(&value)));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnection<D>::LogMessageDataValidationErrorDetails() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection)->get_LogMessageDataValidationErrorDetails(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnection<D>::LogMessageDataValidationErrorDetails(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection)->put_LogMessageDataValidationErrorDetails(value));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnection<D>::Settings() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection)->get_Settings(&value));
        return winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSettings{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnection<D>::IsOpen() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection)->get_IsOpen(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnection<D>::Open() const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection)->Open(&result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnection<D>::IsAutoReconnectEnabled() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection)->get_IsAutoReconnectEnabled(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnection<D>::MessageProcessingPlugins() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection)->get_MessageProcessingPlugins(&value));
        return winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointMessageProcessingPlugin>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnection<D>::AddMessageProcessingPlugin(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointMessageProcessingPlugin const& plugin) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection)->AddMessageProcessingPlugin(*(void**)(&plugin)));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnection<D>::RemoveMessageProcessingPlugin(winrt::guid const& id) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection)->RemoveMessageProcessingPlugin(impl::bind_in(id)));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnection<D>::SendSingleMessagePacket(winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket const& message) const
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection)->SendSingleMessagePacket(*(void**)(&message), reinterpret_cast<uint32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnection<D>::SendSingleMessageStruct(uint64_t timestamp, uint8_t wordCount, winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct const& message) const
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection)->SendSingleMessageStruct(timestamp, wordCount, impl::bind_in(message), reinterpret_cast<uint32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnection<D>::SendSingleMessageWordArray(uint64_t timestamp, uint32_t startIndex, uint8_t wordCount, array_view<uint32_t const> words) const
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection)->SendSingleMessageWordArray(timestamp, startIndex, wordCount, words.size(), get_abi(words), reinterpret_cast<uint32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnection<D>::SendSingleMessageWords(uint64_t timestamp, uint32_t word0) const
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection)->SendSingleMessageWords(timestamp, word0, reinterpret_cast<uint32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnection<D>::SendSingleMessageWords(uint64_t timestamp, uint32_t word0, uint32_t word1) const
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection)->SendSingleMessageWords2(timestamp, word0, word1, reinterpret_cast<uint32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnection<D>::SendSingleMessageWords(uint64_t timestamp, uint32_t word0, uint32_t word1, uint32_t word2) const
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection)->SendSingleMessageWords3(timestamp, word0, word1, word2, reinterpret_cast<uint32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnection<D>::SendSingleMessageWords(uint64_t timestamp, uint32_t word0, uint32_t word1, uint32_t word2, uint32_t word3) const
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection)->SendSingleMessageWords4(timestamp, word0, word1, word2, word3, reinterpret_cast<uint32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnection<D>::SendSingleMessageBuffer(uint64_t timestamp, uint32_t byteOffset, uint8_t byteCount, winrt::Windows::Foundation::IMemoryBuffer const& buffer) const
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection)->SendSingleMessageBuffer(timestamp, byteOffset, byteCount, *(void**)(&buffer), reinterpret_cast<uint32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnection<D>::SendMultipleMessagesWordList(uint64_t timestamp, param::iterable<uint32_t> const& words) const
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection)->SendMultipleMessagesWordList(timestamp, *(void**)(&words), reinterpret_cast<uint32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnection<D>::SendMultipleMessagesWordArray(uint64_t timestamp, uint32_t startIndex, uint32_t wordCount, array_view<uint32_t const> words) const
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection)->SendMultipleMessagesWordArray(timestamp, startIndex, wordCount, words.size(), get_abi(words), reinterpret_cast<uint32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnection<D>::SendMultipleMessagesPacketList(param::iterable<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket> const& messages) const
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection)->SendMultipleMessagesPacketList(*(void**)(&messages), reinterpret_cast<uint32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnection<D>::SendMultipleMessagesStructList(uint64_t timestamp, param::iterable<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct> const& messages) const
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection)->SendMultipleMessagesStructList(timestamp, *(void**)(&messages), reinterpret_cast<uint32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnection<D>::SendMultipleMessagesStructArray(uint64_t timestamp, uint32_t startIndex, uint32_t messageCount, array_view<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct const> messages) const
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection)->SendMultipleMessagesStructArray(timestamp, startIndex, messageCount, messages.size(), get_abi(messages), reinterpret_cast<uint32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnection<D>::SendMultipleMessagesBuffer(uint64_t timestamp, uint32_t byteOffset, uint32_t byteCount, winrt::Windows::Foundation::IMemoryBuffer const& buffer) const
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection)->SendMultipleMessagesBuffer(timestamp, byteOffset, byteCount, *(void**)(&buffer), reinterpret_cast<uint32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnectionSettings<D>::SettingsJson() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSettings)->get_SettingsJson(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnectionSource<D>::EndpointDeviceDisconnected(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSource, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSource)->add_EndpointDeviceDisconnected(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnectionSource<D>::EndpointDeviceDisconnected(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSource, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        return impl::make_event_revoker<D, EndpointDeviceDisconnected_revoker>(this, EndpointDeviceDisconnected(handler));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnectionSource<D>::EndpointDeviceDisconnected(winrt::event_token const& token) const noexcept
    {
        WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSource)->remove_EndpointDeviceDisconnected(impl::bind_in(token));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnectionSource<D>::EndpointDeviceReconnected(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSource, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSource)->add_EndpointDeviceReconnected(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnectionSource<D>::EndpointDeviceReconnected(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSource, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        return impl::make_event_revoker<D, EndpointDeviceReconnected_revoker>(this, EndpointDeviceReconnected(handler));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnectionSource<D>::EndpointDeviceReconnected(winrt::event_token const& token) const noexcept
    {
        WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSource)->remove_EndpointDeviceReconnected(impl::bind_in(token));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnectionStatics<D>::GetDeviceSelector() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionStatics)->GetDeviceSelector(&result));
        return hstring{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnectionStatics<D>::SendMessageSucceeded(winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults const& sendResult) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionStatics)->SendMessageSucceeded(static_cast<uint32_t>(sendResult), &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointConnectionStatics<D>::SendMessageFailed(winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults const& sendResult) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionStatics)->SendMessageFailed(static_cast<uint32_t>(sendResult), &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformation<D>::EndpointDeviceId() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformation)->get_EndpointDeviceId(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformation<D>::Name() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformation)->get_Name(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformation<D>::ContainerId() const
    {
        winrt::guid value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformation)->get_ContainerId(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformation<D>::DeviceInstanceId() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformation)->get_DeviceInstanceId(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformation<D>::EndpointPurpose() const
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDevicePurpose value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformation)->get_EndpointPurpose(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformation<D>::GetDeclaredEndpointInfo() const
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiDeclaredEndpointInfo result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformation)->GetDeclaredEndpointInfo(put_abi(result)));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformation<D>::DeclaredEndpointInfoLastUpdateTime() const
    {
        winrt::Windows::Foundation::DateTime value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformation)->get_DeclaredEndpointInfoLastUpdateTime(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformation<D>::GetDeclaredDeviceIdentity() const
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiDeclaredDeviceIdentity result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformation)->GetDeclaredDeviceIdentity(put_abi(result)));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformation<D>::DeclaredDeviceIdentityLastUpdateTime() const
    {
        winrt::Windows::Foundation::DateTime value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformation)->get_DeclaredDeviceIdentityLastUpdateTime(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformation<D>::GetDeclaredStreamConfiguration() const
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiDeclaredStreamConfiguration result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformation)->GetDeclaredStreamConfiguration(put_abi(result)));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformation<D>::DeclaredStreamConfigurationLastUpdateTime() const
    {
        winrt::Windows::Foundation::DateTime value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformation)->get_DeclaredStreamConfigurationLastUpdateTime(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformation<D>::GetDeclaredFunctionBlocks() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformation)->GetDeclaredFunctionBlocks(&result));
        return winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlock>{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformation<D>::DeclaredFunctionBlocksLastUpdateTime() const
    {
        winrt::Windows::Foundation::DateTime value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformation)->get_DeclaredFunctionBlocksLastUpdateTime(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformation<D>::GetGroupTerminalBlocks() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformation)->GetGroupTerminalBlocks(&result));
        return winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Windows::Devices::Midi2::MidiGroupTerminalBlock>{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformation<D>::GetUserSuppliedInfo() const
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointUserSuppliedInfo result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformation)->GetUserSuppliedInfo(put_abi(result)));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformation<D>::GetTransportSuppliedInfo() const
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointTransportSuppliedInfo result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformation)->GetTransportSuppliedInfo(put_abi(result)));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformation<D>::GetParentDeviceInformation() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformation)->GetParentDeviceInformation(&result));
        return winrt::Windows::Devices::Enumeration::DeviceInformation{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformation<D>::GetContainerDeviceInformation() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformation)->GetContainerDeviceInformation(&result));
        return winrt::Windows::Devices::Enumeration::DeviceInformation{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformation<D>::Properties() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformation)->get_Properties(&value));
        return winrt::Windows::Foundation::Collections::IMapView<hstring, winrt::Windows::Foundation::IInspectable>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformationAddedEventArgs<D>::AddedDevice() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationAddedEventArgs)->get_AddedDevice(&value));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformation{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformationRemovedEventArgs<D>::EndpointDeviceId() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationRemovedEventArgs)->get_EndpointDeviceId(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformationRemovedEventArgs<D>::DeviceInformationUpdate() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationRemovedEventArgs)->get_DeviceInformationUpdate(&value));
        return winrt::Windows::Devices::Enumeration::DeviceInformationUpdate{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformationStatics<D>::CreateFromEndpointDeviceId(param::hstring const& endpointDeviceId) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationStatics)->CreateFromEndpointDeviceId(*(void**)(&endpointDeviceId), &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformation{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformationStatics<D>::FindAll() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationStatics)->FindAll(&result));
        return winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformation>{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformationStatics<D>::FindAll(winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationSortOrder const& sortOrder) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationStatics)->FindAll2(static_cast<int32_t>(sortOrder), &result));
        return winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformation>{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformationStatics<D>::FindAll(winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationSortOrder const& sortOrder, winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationFilters const& endpointFilters) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationStatics)->FindAll3(static_cast<int32_t>(sortOrder), static_cast<uint32_t>(endpointFilters), &result));
        return winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformation>{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformationStatics<D>::EndpointInterfaceClass() const
    {
        winrt::guid value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationStatics)->get_EndpointInterfaceClass(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformationStatics<D>::GetAdditionalPropertiesList() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationStatics)->GetAdditionalPropertiesList(&result));
        return winrt::Windows::Foundation::Collections::IVectorView<hstring>{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformationStatics<D>::DeviceMatchesFilter(winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformation const& deviceInformation, winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationFilters const& endpointFilters) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationStatics)->DeviceMatchesFilter(*(void**)(&deviceInformation), static_cast<uint32_t>(endpointFilters), &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformationUpdatedEventArgs<D>::EndpointDeviceId() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationUpdatedEventArgs)->get_EndpointDeviceId(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformationUpdatedEventArgs<D>::IsNameUpdated() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationUpdatedEventArgs)->get_IsNameUpdated(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformationUpdatedEventArgs<D>::IsEndpointInformationUpdated() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationUpdatedEventArgs)->get_IsEndpointInformationUpdated(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformationUpdatedEventArgs<D>::IsDeviceIdentityUpdated() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationUpdatedEventArgs)->get_IsDeviceIdentityUpdated(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformationUpdatedEventArgs<D>::IsStreamConfigurationUpdated() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationUpdatedEventArgs)->get_IsStreamConfigurationUpdated(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformationUpdatedEventArgs<D>::AreFunctionBlocksUpdated() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationUpdatedEventArgs)->get_AreFunctionBlocksUpdated(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformationUpdatedEventArgs<D>::IsUserMetadataUpdated() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationUpdatedEventArgs)->get_IsUserMetadataUpdated(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformationUpdatedEventArgs<D>::AreAdditionalCapabilitiesUpdated() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationUpdatedEventArgs)->get_AreAdditionalCapabilitiesUpdated(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceInformationUpdatedEventArgs<D>::DeviceInformationUpdate() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationUpdatedEventArgs)->get_DeviceInformationUpdate(&value));
        return winrt::Windows::Devices::Enumeration::DeviceInformationUpdate{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceWatcher<D>::Start() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher)->Start());
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceWatcher<D>::Stop() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher)->Stop());
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceWatcher<D>::EnumeratedEndpointDevices() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher)->get_EnumeratedEndpointDevices(&value));
        return winrt::Windows::Foundation::Collections::IMapView<hstring, winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformation>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceWatcher<D>::Status() const
    {
        winrt::Windows::Devices::Enumeration::DeviceWatcherStatus value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher)->get_Status(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceWatcher<D>::Added(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher, winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationAddedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher)->add_Added(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceWatcher<D>::Added(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher, winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationAddedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, Added_revoker>(this, Added(handler));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceWatcher<D>::Added(winrt::event_token const& token) const noexcept
    {
        WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher)->remove_Added(impl::bind_in(token));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceWatcher<D>::Removed(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher, winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationRemovedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher)->add_Removed(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceWatcher<D>::Removed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher, winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationRemovedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, Removed_revoker>(this, Removed(handler));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceWatcher<D>::Removed(winrt::event_token const& token) const noexcept
    {
        WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher)->remove_Removed(impl::bind_in(token));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceWatcher<D>::Updated(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher, winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationUpdatedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher)->add_Updated(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceWatcher<D>::Updated(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher, winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationUpdatedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, Updated_revoker>(this, Updated(handler));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceWatcher<D>::Updated(winrt::event_token const& token) const noexcept
    {
        WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher)->remove_Updated(impl::bind_in(token));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceWatcher<D>::EnumerationCompleted(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher)->add_EnumerationCompleted(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceWatcher<D>::EnumerationCompleted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        return impl::make_event_revoker<D, EnumerationCompleted_revoker>(this, EnumerationCompleted(handler));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceWatcher<D>::EnumerationCompleted(winrt::event_token const& token) const noexcept
    {
        WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher)->remove_EnumerationCompleted(impl::bind_in(token));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceWatcher<D>::Stopped(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher)->add_Stopped(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceWatcher<D>::Stopped(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        return impl::make_event_revoker<D, Stopped_revoker>(this, Stopped(handler));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceWatcher<D>::Stopped(winrt::event_token const& token) const noexcept
    {
        WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher)->remove_Stopped(impl::bind_in(token));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceWatcherStatics<D>::Create() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcherStatics)->Create(&result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointDeviceWatcherStatics<D>::Create(winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationFilters const& endpointFilters) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcherStatics)->Create2(static_cast<uint32_t>(endpointFilters), &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointMessageProcessingPlugin<D>::Id() const
    {
        winrt::guid value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointMessageProcessingPlugin)->get_Id(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointMessageProcessingPlugin<D>::Name() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointMessageProcessingPlugin)->get_Name(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointMessageProcessingPlugin<D>::Name(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointMessageProcessingPlugin)->put_Name(*(void**)(&value)));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointMessageProcessingPlugin<D>::Tag() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointMessageProcessingPlugin)->get_Tag(&value));
        return winrt::Windows::Foundation::IInspectable{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointMessageProcessingPlugin<D>::Tag(winrt::Windows::Foundation::IInspectable const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointMessageProcessingPlugin)->put_Tag(*(void**)(&value)));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointMessageProcessingPlugin<D>::IsEnabled() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointMessageProcessingPlugin)->get_IsEnabled(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointMessageProcessingPlugin<D>::IsEnabled(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointMessageProcessingPlugin)->put_IsEnabled(value));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointMessageProcessingPlugin<D>::Initialize(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSource const& endpointConnection) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointMessageProcessingPlugin)->Initialize(*(void**)(&endpointConnection)));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointMessageProcessingPlugin<D>::OnEndpointConnectionOpened() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointMessageProcessingPlugin)->OnEndpointConnectionOpened());
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointMessageProcessingPlugin<D>::ProcessIncomingMessage(winrt::Microsoft::Windows::Devices::Midi2::MidiMessageReceivedEventArgs const& args, bool& skipFurtherListeners, bool& skipMainMessageReceivedEvent) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointMessageProcessingPlugin)->ProcessIncomingMessage(*(void**)(&args), &skipFurtherListeners, &skipMainMessageReceivedEvent));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiEndpointMessageProcessingPlugin<D>::Cleanup() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointMessageProcessingPlugin)->Cleanup());
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiFunctionBlock<D>::IsReadOnly() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock)->get_IsReadOnly(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiFunctionBlock<D>::Number() const
    {
        uint8_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock)->get_Number(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiFunctionBlock<D>::Number(uint8_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock)->put_Number(value));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiFunctionBlock<D>::Name() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock)->get_Name(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiFunctionBlock<D>::Name(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock)->put_Name(*(void**)(&value)));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiFunctionBlock<D>::IsActive() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock)->get_IsActive(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiFunctionBlock<D>::IsActive(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock)->put_IsActive(value));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiFunctionBlock<D>::Direction() const
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockDirection value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock)->get_Direction(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiFunctionBlock<D>::Direction(winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockDirection const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock)->put_Direction(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiFunctionBlock<D>::UIHint() const
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockUIHint value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock)->get_UIHint(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiFunctionBlock<D>::UIHint(winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockUIHint const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock)->put_UIHint(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiFunctionBlock<D>::RepresentsMidi10Connection() const
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockRepresentsMidi10Connection value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock)->get_RepresentsMidi10Connection(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiFunctionBlock<D>::RepresentsMidi10Connection(winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockRepresentsMidi10Connection const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock)->put_RepresentsMidi10Connection(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiFunctionBlock<D>::FirstGroupIndex() const
    {
        uint8_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock)->get_FirstGroupIndex(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiFunctionBlock<D>::FirstGroupIndex(uint8_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock)->put_FirstGroupIndex(value));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiFunctionBlock<D>::GroupCount() const
    {
        uint8_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock)->get_GroupCount(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiFunctionBlock<D>::GroupCount(uint8_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock)->put_GroupCount(value));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiFunctionBlock<D>::IncludesGroup(winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock)->IncludesGroup(*(void**)(&group), &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiFunctionBlock<D>::MidiCIMessageVersionFormat() const
    {
        uint8_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock)->get_MidiCIMessageVersionFormat(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiFunctionBlock<D>::MidiCIMessageVersionFormat(uint8_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock)->put_MidiCIMessageVersionFormat(value));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiFunctionBlock<D>::MaxSystemExclusive8Streams() const
    {
        uint8_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock)->get_MaxSystemExclusive8Streams(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiFunctionBlock<D>::MaxSystemExclusive8Streams(uint8_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock)->put_MaxSystemExclusive8Streams(value));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiGroup<D>::Index() const
    {
        uint8_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiGroup)->get_Index(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiGroup<D>::Index(uint8_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiGroup)->put_Index(value));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiGroup<D>::DisplayValue() const
    {
        uint8_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiGroup)->get_DisplayValue(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiGroupFactory<D>::CreateInstance(uint8_t index) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupFactory)->CreateInstance(index, &value));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiGroup{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiGroupStatics<D>::ShortLabel() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupStatics)->get_ShortLabel(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiGroupStatics<D>::LongLabel() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupStatics)->get_LongLabel(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiGroupStatics<D>::IsValidIndex(uint8_t index) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupStatics)->IsValidIndex(index, &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiGroupTerminalBlock<D>::Number() const
    {
        uint8_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupTerminalBlock)->get_Number(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiGroupTerminalBlock<D>::Name() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupTerminalBlock)->get_Name(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiGroupTerminalBlock<D>::Direction() const
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiGroupTerminalBlockDirection value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupTerminalBlock)->get_Direction(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiGroupTerminalBlock<D>::Protocol() const
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiGroupTerminalBlockProtocol value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupTerminalBlock)->get_Protocol(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiGroupTerminalBlock<D>::FirstGroupIndex() const
    {
        uint8_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupTerminalBlock)->get_FirstGroupIndex(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiGroupTerminalBlock<D>::GroupCount() const
    {
        uint8_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupTerminalBlock)->get_GroupCount(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiGroupTerminalBlock<D>::IncludesGroup(winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const& group) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupTerminalBlock)->IncludesGroup(*(void**)(&group), &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiGroupTerminalBlock<D>::MaxDeviceInputBandwidthIn4KBitsPerSecondUnits() const
    {
        uint16_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupTerminalBlock)->get_MaxDeviceInputBandwidthIn4KBitsPerSecondUnits(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiGroupTerminalBlock<D>::MaxDeviceOutputBandwidthIn4KBitsPerSecondUnits() const
    {
        uint16_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupTerminalBlock)->get_MaxDeviceOutputBandwidthIn4KBitsPerSecondUnits(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiGroupTerminalBlock<D>::CalculatedMaxDeviceInputBandwidthBitsPerSecond() const
    {
        uint32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupTerminalBlock)->get_CalculatedMaxDeviceInputBandwidthBitsPerSecond(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiGroupTerminalBlock<D>::CalculatedMaxDeviceOutputBandwidthBitsPerSecond() const
    {
        uint32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupTerminalBlock)->get_CalculatedMaxDeviceOutputBandwidthBitsPerSecond(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiGroupTerminalBlock<D>::AsEquivalentFunctionBlock() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupTerminalBlock)->AsEquivalentFunctionBlock(&result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlock{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage128<D>::Word0() const
    {
        uint32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128)->get_Word0(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage128<D>::Word0(uint32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128)->put_Word0(value));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage128<D>::Word1() const
    {
        uint32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128)->get_Word1(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage128<D>::Word1(uint32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128)->put_Word1(value));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage128<D>::Word2() const
    {
        uint32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128)->get_Word2(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage128<D>::Word2(uint32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128)->put_Word2(value));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage128<D>::Word3() const
    {
        uint32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128)->get_Word3(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage128<D>::Word3(uint32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128)->put_Word3(value));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage128Factory<D>::CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128Factory)->CreateInstance(*(void**)(&baseInterface), impl::bind_out(innerInterface), &value));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage128{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage128Factory<D>::CreateInstance2(uint64_t timestamp, uint32_t word0, uint32_t word1, uint32_t word2, uint32_t word3, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128Factory)->CreateInstance2(timestamp, word0, word1, word2, word3, *(void**)(&baseInterface), impl::bind_out(innerInterface), &value));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage128{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage128Factory<D>::CreateInstance3(uint64_t timestamp, array_view<uint32_t const> words, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128Factory)->CreateInstance3(timestamp, words.size(), get_abi(words), *(void**)(&baseInterface), impl::bind_out(innerInterface), &value));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage128{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage128Statics<D>::CreateFromStruct(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct const& message) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128Statics)->CreateFromStruct(timestamp, impl::bind_in(message), &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage128{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage32<D>::Word0() const
    {
        uint32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32)->get_Word0(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage32<D>::Word0(uint32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32)->put_Word0(value));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage32Factory<D>::CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32Factory)->CreateInstance(*(void**)(&baseInterface), impl::bind_out(innerInterface), &value));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage32Factory<D>::CreateInstance2(uint64_t timestamp, uint32_t word0, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32Factory)->CreateInstance2(timestamp, word0, *(void**)(&baseInterface), impl::bind_out(innerInterface), &value));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage32Statics<D>::CreateFromStruct(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct const& message) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32Statics)->CreateFromStruct(timestamp, impl::bind_in(message), &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage64<D>::Word0() const
    {
        uint32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64)->get_Word0(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage64<D>::Word0(uint32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64)->put_Word0(value));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage64<D>::Word1() const
    {
        uint32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64)->get_Word1(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage64<D>::Word1(uint32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64)->put_Word1(value));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage64Factory<D>::CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64Factory)->CreateInstance(*(void**)(&baseInterface), impl::bind_out(innerInterface), &value));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage64{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage64Factory<D>::CreateInstance2(uint64_t timestamp, uint32_t word0, uint32_t word1, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64Factory)->CreateInstance2(timestamp, word0, word1, *(void**)(&baseInterface), impl::bind_out(innerInterface), &value));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage64{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage64Factory<D>::CreateInstance3(uint64_t timestamp, array_view<uint32_t const> words, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64Factory)->CreateInstance3(timestamp, words.size(), get_abi(words), *(void**)(&baseInterface), impl::bind_out(innerInterface), &value));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage64{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage64Statics<D>::CreateFromStruct(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct const& message) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64Statics)->CreateFromStruct(timestamp, impl::bind_in(message), &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage64{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage96<D>::Word0() const
    {
        uint32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96)->get_Word0(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage96<D>::Word0(uint32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96)->put_Word0(value));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage96<D>::Word1() const
    {
        uint32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96)->get_Word1(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage96<D>::Word1(uint32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96)->put_Word1(value));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage96<D>::Word2() const
    {
        uint32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96)->get_Word2(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage96<D>::Word2(uint32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96)->put_Word2(value));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage96Factory<D>::CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96Factory)->CreateInstance(*(void**)(&baseInterface), impl::bind_out(innerInterface), &value));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage96{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage96Factory<D>::CreateInstance2(uint64_t timestamp, uint32_t word0, uint32_t word1, uint32_t word2, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96Factory)->CreateInstance2(timestamp, word0, word1, word2, *(void**)(&baseInterface), impl::bind_out(innerInterface), &value));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage96{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage96Factory<D>::CreateInstance3(uint64_t timestamp, array_view<uint32_t const> words, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96Factory)->CreateInstance3(timestamp, words.size(), get_abi(words), *(void**)(&baseInterface), impl::bind_out(innerInterface), &value));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage96{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessage96Statics<D>::CreateFromStruct(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct const& message) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96Statics)->CreateFromStruct(timestamp, impl::bind_in(message), &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiMessage96{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessageReceivedEventArgs<D>::Timestamp() const
    {
        uint64_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventArgs)->get_Timestamp(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessageReceivedEventArgs<D>::PacketType() const
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiPacketType value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventArgs)->get_PacketType(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessageReceivedEventArgs<D>::MessageType() const
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiMessageType value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventArgs)->get_MessageType(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessageReceivedEventArgs<D>::PeekFirstWord() const
    {
        uint32_t result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventArgs)->PeekFirstWord(&result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessageReceivedEventArgs<D>::GetMessagePacket() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventArgs)->GetMessagePacket(&result));
        return winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessageReceivedEventArgs<D>::FillWords(uint32_t& word0, uint32_t& word1, uint32_t& word2, uint32_t& word3) const
    {
        uint8_t result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventArgs)->FillWords(&word0, &word1, &word2, &word3, &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessageReceivedEventArgs<D>::FillMessageStruct(winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct& message) const
    {
        uint8_t result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventArgs)->FillMessageStruct(impl::bind_out(message), &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessageReceivedEventArgs<D>::FillMessage32(winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32 const& message) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventArgs)->FillMessage32(*(void**)(&message), &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessageReceivedEventArgs<D>::FillMessage64(winrt::Microsoft::Windows::Devices::Midi2::MidiMessage64 const& message) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventArgs)->FillMessage64(*(void**)(&message), &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessageReceivedEventArgs<D>::FillMessage96(winrt::Microsoft::Windows::Devices::Midi2::MidiMessage96 const& message) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventArgs)->FillMessage96(*(void**)(&message), &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessageReceivedEventArgs<D>::FillMessage128(winrt::Microsoft::Windows::Devices::Midi2::MidiMessage128 const& message) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventArgs)->FillMessage128(*(void**)(&message), &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessageReceivedEventArgs<D>::FillWordArray(uint32_t startIndex, array_view<uint32_t> words) const
    {
        uint8_t result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventArgs)->FillWordArray(startIndex, words.size(), put_abi(words), &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessageReceivedEventArgs<D>::FillByteArray(uint32_t startIndex, array_view<uint8_t> bytes) const
    {
        uint8_t result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventArgs)->FillByteArray(startIndex, bytes.size(), put_abi(bytes), &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessageReceivedEventArgs<D>::FillBuffer(uint32_t byteOffset, winrt::Windows::Foundation::IMemoryBuffer const& buffer) const
    {
        uint8_t result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventArgs)->FillBuffer(byteOffset, *(void**)(&buffer), &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessageReceivedEventArgs<D>::AppendWordsToList(param::vector<uint32_t> const& wordList) const
    {
        uint8_t result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventArgs)->AppendWordsToList(*(void**)(&wordList), &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessageReceivedEventSource<D>::MessageReceived(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventSource, winrt::Microsoft::Windows::Devices::Midi2::MidiMessageReceivedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventSource)->add_MessageReceived(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessageReceivedEventSource<D>::MessageReceived(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventSource, winrt::Microsoft::Windows::Devices::Midi2::MidiMessageReceivedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, MessageReceived_revoker>(this, MessageReceived(handler));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiMessageReceivedEventSource<D>::MessageReceived(winrt::event_token const& token) const noexcept
    {
        WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventSource)->remove_MessageReceived(impl::bind_in(token));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiSession<D>::SessionId() const
    {
        winrt::guid value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiSession)->get_SessionId(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiSession<D>::Name() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiSession)->get_Name(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiSession<D>::IsOpen() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiSession)->get_IsOpen(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiSession<D>::Connections() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiSession)->get_Connections(&value));
        return winrt::Windows::Foundation::Collections::IMapView<winrt::guid, winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointConnection>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiSession<D>::CreateEndpointConnection(param::hstring const& endpointDeviceId) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiSession)->CreateEndpointConnection(*(void**)(&endpointDeviceId), &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointConnection{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiSession<D>::CreateEndpointConnection(param::hstring const& endpointDeviceId, bool autoReconnect) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiSession)->CreateEndpointConnection2(*(void**)(&endpointDeviceId), autoReconnect, &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointConnection{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiSession<D>::CreateEndpointConnection(param::hstring const& endpointDeviceId, bool autoReconnect, winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSettings const& settings) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiSession)->CreateEndpointConnection3(*(void**)(&endpointDeviceId), autoReconnect, *(void**)(&settings), &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointConnection{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiSession<D>::DisconnectEndpointConnection(winrt::guid const& endpointConnectionId) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiSession)->DisconnectEndpointConnection(impl::bind_in(endpointConnectionId)));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiSession<D>::UpdateName(param::hstring const& newName) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiSession)->UpdateName(*(void**)(&newName), &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiSessionStatics<D>::Create(param::hstring const& sessionName) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiSessionStatics)->Create(*(void**)(&sessionName), &result));
        return winrt::Microsoft::Windows::Devices::Midi2::MidiSession{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiUniversalPacket<D>::Timestamp() const
    {
        uint64_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket)->get_Timestamp(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiUniversalPacket<D>::Timestamp(uint64_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket)->put_Timestamp(value));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiUniversalPacket<D>::MessageType() const
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiMessageType value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket)->get_MessageType(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiUniversalPacket<D>::MessageType(winrt::Microsoft::Windows::Devices::Midi2::MidiMessageType const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket)->put_MessageType(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiUniversalPacket<D>::PacketType() const
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiPacketType value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket)->get_PacketType(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiUniversalPacket<D>::PeekFirstWord() const
    {
        uint32_t result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket)->PeekFirstWord(&result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiUniversalPacket<D>::GetAllWords() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket)->GetAllWords(&result));
        return winrt::Windows::Foundation::Collections::IVector<uint32_t>{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiUniversalPacket<D>::AppendAllMessageWordsToList(param::vector<uint32_t> const& targetList) const
    {
        uint8_t result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket)->AppendAllMessageWordsToList(*(void**)(&targetList), &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_IMidiUniversalPacket<D>::FillBuffer(uint32_t byteOffset, winrt::Windows::Foundation::IMemoryBuffer const& buffer) const
    {
        uint8_t result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket)->FillBuffer(byteOffset, *(void**)(&buffer), &result));
        return result;
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiChannel> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiChannel>
    {
        int32_t __stdcall get_Index(uint8_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint8_t>(this->shim().Index());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Index(uint8_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Index(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DisplayValue(uint8_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint8_t>(this->shim().DisplayValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiChannelFactory> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiChannelFactory>
    {
        int32_t __stdcall CreateInstance(uint8_t index, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiChannel>(this->shim().CreateInstance(index));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiChannelStatics> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiChannelStatics>
    {
        int32_t __stdcall get_ShortLabel(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ShortLabel());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_LongLabel(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().LongLabel());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsValidIndex(uint8_t index, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().IsValidIndex(index));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiClock> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiClock>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiClockStatics> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiClockStatics>
    {
        int32_t __stdcall get_Now(uint64_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint64_t>(this->shim().Now());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_TimestampConstantSendImmediately(uint64_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint64_t>(this->shim().TimestampConstantSendImmediately());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_TimestampFrequency(uint64_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint64_t>(this->shim().TimestampFrequency());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ConvertTimestampTicksToNanoseconds(uint64_t timestampValue, double* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<double>(this->shim().ConvertTimestampTicksToNanoseconds(timestampValue));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ConvertTimestampTicksToMicroseconds(uint64_t timestampValue, double* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<double>(this->shim().ConvertTimestampTicksToMicroseconds(timestampValue));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ConvertTimestampTicksToMilliseconds(uint64_t timestampValue, double* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<double>(this->shim().ConvertTimestampTicksToMilliseconds(timestampValue));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ConvertTimestampTicksToSeconds(uint64_t timestampValue, double* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<double>(this->shim().ConvertTimestampTicksToSeconds(timestampValue));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall OffsetTimestampByTicks(uint64_t timestampValue, int64_t offsetTicks, uint64_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<uint64_t>(this->shim().OffsetTimestampByTicks(timestampValue, offsetTicks));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall OffsetTimestampByMicroseconds(uint64_t timestampValue, int64_t offsetMicroseconds, uint64_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<uint64_t>(this->shim().OffsetTimestampByMicroseconds(timestampValue, offsetMicroseconds));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall OffsetTimestampByMilliseconds(uint64_t timestampValue, int64_t offsetMilliseconds, uint64_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<uint64_t>(this->shim().OffsetTimestampByMilliseconds(timestampValue, offsetMilliseconds));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall OffsetTimestampBySeconds(uint64_t timestampValue, int64_t offsetSeconds, uint64_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<uint64_t>(this->shim().OffsetTimestampBySeconds(timestampValue, offsetSeconds));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection>
    {
        int32_t __stdcall get_ConnectionId(winrt::guid* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::guid>(this->shim().ConnectionId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ConnectedEndpointDeviceId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ConnectedEndpointDeviceId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Tag(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::IInspectable>(this->shim().Tag());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Tag(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Tag(*reinterpret_cast<winrt::Windows::Foundation::IInspectable const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_LogMessageDataValidationErrorDetails(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().LogMessageDataValidationErrorDetails());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_LogMessageDataValidationErrorDetails(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LogMessageDataValidationErrorDetails(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Settings(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSettings>(this->shim().Settings());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsOpen(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsOpen());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Open(bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().Open());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsAutoReconnectEnabled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsAutoReconnectEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MessageProcessingPlugins(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointMessageProcessingPlugin>>(this->shim().MessageProcessingPlugins());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AddMessageProcessingPlugin(void* plugin) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AddMessageProcessingPlugin(*reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointMessageProcessingPlugin const*>(&plugin));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RemoveMessageProcessingPlugin(winrt::guid id) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RemoveMessageProcessingPlugin(*reinterpret_cast<winrt::guid const*>(&id));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SendSingleMessagePacket(void* message, uint32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults>(this->shim().SendSingleMessagePacket(*reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket const*>(&message)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SendSingleMessageStruct(uint64_t timestamp, uint8_t wordCount, struct struct_Microsoft_Windows_Devices_Midi2_MidiMessageStruct const& message, uint32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults>(this->shim().SendSingleMessageStruct(timestamp, wordCount, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct const*>(&message)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SendSingleMessageWordArray(uint64_t timestamp, uint32_t startIndex, uint8_t wordCount, uint32_t __wordsSize, uint32_t* words, uint32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults>(this->shim().SendSingleMessageWordArray(timestamp, startIndex, wordCount, array_view<uint32_t const>(reinterpret_cast<uint32_t const *>(words), reinterpret_cast<uint32_t const *>(words) + __wordsSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SendSingleMessageWords(uint64_t timestamp, uint32_t word0, uint32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults>(this->shim().SendSingleMessageWords(timestamp, word0));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SendSingleMessageWords2(uint64_t timestamp, uint32_t word0, uint32_t word1, uint32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults>(this->shim().SendSingleMessageWords(timestamp, word0, word1));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SendSingleMessageWords3(uint64_t timestamp, uint32_t word0, uint32_t word1, uint32_t word2, uint32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults>(this->shim().SendSingleMessageWords(timestamp, word0, word1, word2));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SendSingleMessageWords4(uint64_t timestamp, uint32_t word0, uint32_t word1, uint32_t word2, uint32_t word3, uint32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults>(this->shim().SendSingleMessageWords(timestamp, word0, word1, word2, word3));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SendSingleMessageBuffer(uint64_t timestamp, uint32_t byteOffset, uint8_t byteCount, void* buffer, uint32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults>(this->shim().SendSingleMessageBuffer(timestamp, byteOffset, byteCount, *reinterpret_cast<winrt::Windows::Foundation::IMemoryBuffer const*>(&buffer)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SendMultipleMessagesWordList(uint64_t timestamp, void* words, uint32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults>(this->shim().SendMultipleMessagesWordList(timestamp, *reinterpret_cast<winrt::Windows::Foundation::Collections::IIterable<uint32_t> const*>(&words)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SendMultipleMessagesWordArray(uint64_t timestamp, uint32_t startIndex, uint32_t wordCount, uint32_t __wordsSize, uint32_t* words, uint32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults>(this->shim().SendMultipleMessagesWordArray(timestamp, startIndex, wordCount, array_view<uint32_t const>(reinterpret_cast<uint32_t const *>(words), reinterpret_cast<uint32_t const *>(words) + __wordsSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SendMultipleMessagesPacketList(void* messages, uint32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults>(this->shim().SendMultipleMessagesPacketList(*reinterpret_cast<winrt::Windows::Foundation::Collections::IIterable<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket> const*>(&messages)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SendMultipleMessagesStructList(uint64_t timestamp, void* messages, uint32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults>(this->shim().SendMultipleMessagesStructList(timestamp, *reinterpret_cast<winrt::Windows::Foundation::Collections::IIterable<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct> const*>(&messages)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SendMultipleMessagesStructArray(uint64_t timestamp, uint32_t startIndex, uint32_t messageCount, uint32_t __messagesSize, struct struct_Microsoft_Windows_Devices_Midi2_MidiMessageStruct* messages, uint32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults>(this->shim().SendMultipleMessagesStructArray(timestamp, startIndex, messageCount, array_view<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct const>(reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct const *>(messages), reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct const *>(messages) + __messagesSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SendMultipleMessagesBuffer(uint64_t timestamp, uint32_t byteOffset, uint32_t byteCount, void* buffer, uint32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults>(this->shim().SendMultipleMessagesBuffer(timestamp, byteOffset, byteCount, *reinterpret_cast<winrt::Windows::Foundation::IMemoryBuffer const*>(&buffer)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSettings> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSettings>
    {
        int32_t __stdcall get_SettingsJson(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().SettingsJson());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSource> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSource>
    {
        int32_t __stdcall add_EndpointDeviceDisconnected(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().EndpointDeviceDisconnected(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSource, winrt::Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_EndpointDeviceDisconnected(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().EndpointDeviceDisconnected(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_EndpointDeviceReconnected(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().EndpointDeviceReconnected(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSource, winrt::Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_EndpointDeviceReconnected(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().EndpointDeviceReconnected(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionStatics> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionStatics>
    {
        int32_t __stdcall GetDeviceSelector(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<hstring>(this->shim().GetDeviceSelector());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SendMessageSucceeded(uint32_t sendResult, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().SendMessageSucceeded(*reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults const*>(&sendResult)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SendMessageFailed(uint32_t sendResult, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().SendMessageFailed(*reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults const*>(&sendResult)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformation> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformation>
    {
        int32_t __stdcall get_EndpointDeviceId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().EndpointDeviceId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Name(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Name());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ContainerId(winrt::guid* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::guid>(this->shim().ContainerId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DeviceInstanceId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().DeviceInstanceId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_EndpointPurpose(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDevicePurpose>(this->shim().EndpointPurpose());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDeclaredEndpointInfo(struct struct_Microsoft_Windows_Devices_Midi2_MidiDeclaredEndpointInfo* result) noexcept final try
        {
            zero_abi<winrt::Microsoft::Windows::Devices::Midi2::MidiDeclaredEndpointInfo>(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiDeclaredEndpointInfo>(this->shim().GetDeclaredEndpointInfo());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DeclaredEndpointInfoLastUpdateTime(int64_t* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::DateTime>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::DateTime>(this->shim().DeclaredEndpointInfoLastUpdateTime());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDeclaredDeviceIdentity(struct struct_Microsoft_Windows_Devices_Midi2_MidiDeclaredDeviceIdentity* result) noexcept final try
        {
            zero_abi<winrt::Microsoft::Windows::Devices::Midi2::MidiDeclaredDeviceIdentity>(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiDeclaredDeviceIdentity>(this->shim().GetDeclaredDeviceIdentity());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DeclaredDeviceIdentityLastUpdateTime(int64_t* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::DateTime>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::DateTime>(this->shim().DeclaredDeviceIdentityLastUpdateTime());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDeclaredStreamConfiguration(struct struct_Microsoft_Windows_Devices_Midi2_MidiDeclaredStreamConfiguration* result) noexcept final try
        {
            zero_abi<winrt::Microsoft::Windows::Devices::Midi2::MidiDeclaredStreamConfiguration>(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiDeclaredStreamConfiguration>(this->shim().GetDeclaredStreamConfiguration());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DeclaredStreamConfigurationLastUpdateTime(int64_t* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::DateTime>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::DateTime>(this->shim().DeclaredStreamConfigurationLastUpdateTime());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDeclaredFunctionBlocks(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlock>>(this->shim().GetDeclaredFunctionBlocks());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DeclaredFunctionBlocksLastUpdateTime(int64_t* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::DateTime>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::DateTime>(this->shim().DeclaredFunctionBlocksLastUpdateTime());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetGroupTerminalBlocks(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Windows::Devices::Midi2::MidiGroupTerminalBlock>>(this->shim().GetGroupTerminalBlocks());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetUserSuppliedInfo(struct struct_Microsoft_Windows_Devices_Midi2_MidiEndpointUserSuppliedInfo* result) noexcept final try
        {
            zero_abi<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointUserSuppliedInfo>(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointUserSuppliedInfo>(this->shim().GetUserSuppliedInfo());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetTransportSuppliedInfo(struct struct_Microsoft_Windows_Devices_Midi2_MidiEndpointTransportSuppliedInfo* result) noexcept final try
        {
            zero_abi<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointTransportSuppliedInfo>(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointTransportSuppliedInfo>(this->shim().GetTransportSuppliedInfo());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetParentDeviceInformation(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Devices::Enumeration::DeviceInformation>(this->shim().GetParentDeviceInformation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetContainerDeviceInformation(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Devices::Enumeration::DeviceInformation>(this->shim().GetContainerDeviceInformation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Properties(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IMapView<hstring, winrt::Windows::Foundation::IInspectable>>(this->shim().Properties());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationAddedEventArgs> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationAddedEventArgs>
    {
        int32_t __stdcall get_AddedDevice(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformation>(this->shim().AddedDevice());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationRemovedEventArgs> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationRemovedEventArgs>
    {
        int32_t __stdcall get_EndpointDeviceId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().EndpointDeviceId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DeviceInformationUpdate(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Devices::Enumeration::DeviceInformationUpdate>(this->shim().DeviceInformationUpdate());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationStatics> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationStatics>
    {
        int32_t __stdcall CreateFromEndpointDeviceId(void* endpointDeviceId, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformation>(this->shim().CreateFromEndpointDeviceId(*reinterpret_cast<hstring const*>(&endpointDeviceId)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall FindAll(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformation>>(this->shim().FindAll());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall FindAll2(int32_t sortOrder, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformation>>(this->shim().FindAll(*reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationSortOrder const*>(&sortOrder)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall FindAll3(int32_t sortOrder, uint32_t endpointFilters, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformation>>(this->shim().FindAll(*reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationSortOrder const*>(&sortOrder), *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationFilters const*>(&endpointFilters)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_EndpointInterfaceClass(winrt::guid* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::guid>(this->shim().EndpointInterfaceClass());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetAdditionalPropertiesList(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Collections::IVectorView<hstring>>(this->shim().GetAdditionalPropertiesList());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall DeviceMatchesFilter(void* deviceInformation, uint32_t endpointFilters, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().DeviceMatchesFilter(*reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformation const*>(&deviceInformation), *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationFilters const*>(&endpointFilters)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationUpdatedEventArgs> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationUpdatedEventArgs>
    {
        int32_t __stdcall get_EndpointDeviceId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().EndpointDeviceId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsNameUpdated(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsNameUpdated());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsEndpointInformationUpdated(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsEndpointInformationUpdated());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsDeviceIdentityUpdated(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsDeviceIdentityUpdated());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsStreamConfigurationUpdated(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsStreamConfigurationUpdated());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AreFunctionBlocksUpdated(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().AreFunctionBlocksUpdated());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsUserMetadataUpdated(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsUserMetadataUpdated());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AreAdditionalCapabilitiesUpdated(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().AreAdditionalCapabilitiesUpdated());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DeviceInformationUpdate(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Devices::Enumeration::DeviceInformationUpdate>(this->shim().DeviceInformationUpdate());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher>
    {
        int32_t __stdcall Start() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Start();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Stop() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Stop();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_EnumeratedEndpointDevices(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IMapView<hstring, winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformation>>(this->shim().EnumeratedEndpointDevices());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Status(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Devices::Enumeration::DeviceWatcherStatus>(this->shim().Status());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_Added(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().Added(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher, winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationAddedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_Added(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Added(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_Removed(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().Removed(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher, winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationRemovedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_Removed(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Removed(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_Updated(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().Updated(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher, winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationUpdatedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_Updated(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Updated(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_EnumerationCompleted(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().EnumerationCompleted(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher, winrt::Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_EnumerationCompleted(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().EnumerationCompleted(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_Stopped(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().Stopped(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher, winrt::Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_Stopped(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Stopped(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcherStatics> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcherStatics>
    {
        int32_t __stdcall Create(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher>(this->shim().Create());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Create2(uint32_t endpointFilters, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher>(this->shim().Create(*reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationFilters const*>(&endpointFilters)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointMessageProcessingPlugin> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointMessageProcessingPlugin>
    {
        int32_t __stdcall get_Id(winrt::guid* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::guid>(this->shim().Id());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Name(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Name());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Name(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Name(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Tag(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::IInspectable>(this->shim().Tag());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Tag(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Tag(*reinterpret_cast<winrt::Windows::Foundation::IInspectable const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsEnabled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsEnabled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsEnabled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Initialize(void* endpointConnection) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Initialize(*reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSource const*>(&endpointConnection));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall OnEndpointConnectionOpened() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnEndpointConnectionOpened();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ProcessIncomingMessage(void* args, bool* skipFurtherListeners, bool* skipMainMessageReceivedEvent) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ProcessIncomingMessage(*reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageReceivedEventArgs const*>(&args), *skipFurtherListeners, *skipMainMessageReceivedEvent);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Cleanup() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Cleanup();
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock>
    {
        int32_t __stdcall get_IsReadOnly(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsReadOnly());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Number(uint8_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint8_t>(this->shim().Number());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Number(uint8_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Number(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Name(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Name());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Name(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Name(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsActive(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsActive());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsActive(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsActive(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Direction(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockDirection>(this->shim().Direction());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Direction(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Direction(*reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockDirection const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_UIHint(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockUIHint>(this->shim().UIHint());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_UIHint(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().UIHint(*reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockUIHint const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_RepresentsMidi10Connection(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockRepresentsMidi10Connection>(this->shim().RepresentsMidi10Connection());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_RepresentsMidi10Connection(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RepresentsMidi10Connection(*reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlockRepresentsMidi10Connection const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_FirstGroupIndex(uint8_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint8_t>(this->shim().FirstGroupIndex());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_FirstGroupIndex(uint8_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FirstGroupIndex(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_GroupCount(uint8_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint8_t>(this->shim().GroupCount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_GroupCount(uint8_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GroupCount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IncludesGroup(void* group, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().IncludesGroup(*reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const*>(&group)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MidiCIMessageVersionFormat(uint8_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint8_t>(this->shim().MidiCIMessageVersionFormat());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MidiCIMessageVersionFormat(uint8_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MidiCIMessageVersionFormat(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MaxSystemExclusive8Streams(uint8_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint8_t>(this->shim().MaxSystemExclusive8Streams());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MaxSystemExclusive8Streams(uint8_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxSystemExclusive8Streams(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiGroup> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiGroup>
    {
        int32_t __stdcall get_Index(uint8_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint8_t>(this->shim().Index());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Index(uint8_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Index(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DisplayValue(uint8_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint8_t>(this->shim().DisplayValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupFactory> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupFactory>
    {
        int32_t __stdcall CreateInstance(uint8_t index, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup>(this->shim().CreateInstance(index));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupStatics> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupStatics>
    {
        int32_t __stdcall get_ShortLabel(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ShortLabel());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_LongLabel(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().LongLabel());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsValidIndex(uint8_t index, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().IsValidIndex(index));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupTerminalBlock> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupTerminalBlock>
    {
        int32_t __stdcall get_Number(uint8_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint8_t>(this->shim().Number());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Name(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Name());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Direction(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiGroupTerminalBlockDirection>(this->shim().Direction());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Protocol(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiGroupTerminalBlockProtocol>(this->shim().Protocol());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_FirstGroupIndex(uint8_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint8_t>(this->shim().FirstGroupIndex());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_GroupCount(uint8_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint8_t>(this->shim().GroupCount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IncludesGroup(void* group, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().IncludesGroup(*reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup const*>(&group)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MaxDeviceInputBandwidthIn4KBitsPerSecondUnits(uint16_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint16_t>(this->shim().MaxDeviceInputBandwidthIn4KBitsPerSecondUnits());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MaxDeviceOutputBandwidthIn4KBitsPerSecondUnits(uint16_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint16_t>(this->shim().MaxDeviceOutputBandwidthIn4KBitsPerSecondUnits());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_CalculatedMaxDeviceInputBandwidthBitsPerSecond(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().CalculatedMaxDeviceInputBandwidthBitsPerSecond());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_CalculatedMaxDeviceOutputBandwidthBitsPerSecond(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().CalculatedMaxDeviceOutputBandwidthBitsPerSecond());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsEquivalentFunctionBlock(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlock>(this->shim().AsEquivalentFunctionBlock());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128>
    {
        int32_t __stdcall get_Word0(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().Word0());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Word0(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Word0(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Word1(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().Word1());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Word1(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Word1(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Word2(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().Word2());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Word2(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Word2(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Word3(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().Word3());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Word3(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Word3(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128Factory> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128Factory>
    {
        int32_t __stdcall CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final try
        {
            if (innerInterface) *innerInterface = nullptr;
            winrt::Windows::Foundation::IInspectable winrt_impl_innerInterface;
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage128>(this->shim().CreateInstance(*reinterpret_cast<winrt::Windows::Foundation::IInspectable const*>(&baseInterface), winrt_impl_innerInterface));
                if (innerInterface) *innerInterface = detach_abi(winrt_impl_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateInstance2(uint64_t timestamp, uint32_t word0, uint32_t word1, uint32_t word2, uint32_t word3, void* baseInterface, void** innerInterface, void** value) noexcept final try
        {
            if (innerInterface) *innerInterface = nullptr;
            winrt::Windows::Foundation::IInspectable winrt_impl_innerInterface;
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage128>(this->shim().CreateInstance2(timestamp, word0, word1, word2, word3, *reinterpret_cast<winrt::Windows::Foundation::IInspectable const*>(&baseInterface), winrt_impl_innerInterface));
                if (innerInterface) *innerInterface = detach_abi(winrt_impl_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateInstance3(uint64_t timestamp, uint32_t __wordsSize, uint32_t* words, void* baseInterface, void** innerInterface, void** value) noexcept final try
        {
            if (innerInterface) *innerInterface = nullptr;
            winrt::Windows::Foundation::IInspectable winrt_impl_innerInterface;
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage128>(this->shim().CreateInstance3(timestamp, array_view<uint32_t const>(reinterpret_cast<uint32_t const *>(words), reinterpret_cast<uint32_t const *>(words) + __wordsSize), *reinterpret_cast<winrt::Windows::Foundation::IInspectable const*>(&baseInterface), winrt_impl_innerInterface));
                if (innerInterface) *innerInterface = detach_abi(winrt_impl_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128Statics> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128Statics>
    {
        int32_t __stdcall CreateFromStruct(uint64_t timestamp, struct struct_Microsoft_Windows_Devices_Midi2_MidiMessageStruct message, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage128>(this->shim().CreateFromStruct(timestamp, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct const*>(&message)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32>
    {
        int32_t __stdcall get_Word0(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().Word0());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Word0(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Word0(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32Factory> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32Factory>
    {
        int32_t __stdcall CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final try
        {
            if (innerInterface) *innerInterface = nullptr;
            winrt::Windows::Foundation::IInspectable winrt_impl_innerInterface;
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32>(this->shim().CreateInstance(*reinterpret_cast<winrt::Windows::Foundation::IInspectable const*>(&baseInterface), winrt_impl_innerInterface));
                if (innerInterface) *innerInterface = detach_abi(winrt_impl_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateInstance2(uint64_t timestamp, uint32_t word0, void* baseInterface, void** innerInterface, void** value) noexcept final try
        {
            if (innerInterface) *innerInterface = nullptr;
            winrt::Windows::Foundation::IInspectable winrt_impl_innerInterface;
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32>(this->shim().CreateInstance2(timestamp, word0, *reinterpret_cast<winrt::Windows::Foundation::IInspectable const*>(&baseInterface), winrt_impl_innerInterface));
                if (innerInterface) *innerInterface = detach_abi(winrt_impl_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32Statics> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32Statics>
    {
        int32_t __stdcall CreateFromStruct(uint64_t timestamp, struct struct_Microsoft_Windows_Devices_Midi2_MidiMessageStruct message, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32>(this->shim().CreateFromStruct(timestamp, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct const*>(&message)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64>
    {
        int32_t __stdcall get_Word0(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().Word0());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Word0(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Word0(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Word1(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().Word1());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Word1(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Word1(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64Factory> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64Factory>
    {
        int32_t __stdcall CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final try
        {
            if (innerInterface) *innerInterface = nullptr;
            winrt::Windows::Foundation::IInspectable winrt_impl_innerInterface;
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage64>(this->shim().CreateInstance(*reinterpret_cast<winrt::Windows::Foundation::IInspectable const*>(&baseInterface), winrt_impl_innerInterface));
                if (innerInterface) *innerInterface = detach_abi(winrt_impl_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateInstance2(uint64_t timestamp, uint32_t word0, uint32_t word1, void* baseInterface, void** innerInterface, void** value) noexcept final try
        {
            if (innerInterface) *innerInterface = nullptr;
            winrt::Windows::Foundation::IInspectable winrt_impl_innerInterface;
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage64>(this->shim().CreateInstance2(timestamp, word0, word1, *reinterpret_cast<winrt::Windows::Foundation::IInspectable const*>(&baseInterface), winrt_impl_innerInterface));
                if (innerInterface) *innerInterface = detach_abi(winrt_impl_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateInstance3(uint64_t timestamp, uint32_t __wordsSize, uint32_t* words, void* baseInterface, void** innerInterface, void** value) noexcept final try
        {
            if (innerInterface) *innerInterface = nullptr;
            winrt::Windows::Foundation::IInspectable winrt_impl_innerInterface;
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage64>(this->shim().CreateInstance3(timestamp, array_view<uint32_t const>(reinterpret_cast<uint32_t const *>(words), reinterpret_cast<uint32_t const *>(words) + __wordsSize), *reinterpret_cast<winrt::Windows::Foundation::IInspectable const*>(&baseInterface), winrt_impl_innerInterface));
                if (innerInterface) *innerInterface = detach_abi(winrt_impl_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64Statics> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64Statics>
    {
        int32_t __stdcall CreateFromStruct(uint64_t timestamp, struct struct_Microsoft_Windows_Devices_Midi2_MidiMessageStruct message, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage64>(this->shim().CreateFromStruct(timestamp, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct const*>(&message)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96>
    {
        int32_t __stdcall get_Word0(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().Word0());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Word0(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Word0(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Word1(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().Word1());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Word1(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Word1(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Word2(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().Word2());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Word2(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Word2(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96Factory> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96Factory>
    {
        int32_t __stdcall CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final try
        {
            if (innerInterface) *innerInterface = nullptr;
            winrt::Windows::Foundation::IInspectable winrt_impl_innerInterface;
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage96>(this->shim().CreateInstance(*reinterpret_cast<winrt::Windows::Foundation::IInspectable const*>(&baseInterface), winrt_impl_innerInterface));
                if (innerInterface) *innerInterface = detach_abi(winrt_impl_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateInstance2(uint64_t timestamp, uint32_t word0, uint32_t word1, uint32_t word2, void* baseInterface, void** innerInterface, void** value) noexcept final try
        {
            if (innerInterface) *innerInterface = nullptr;
            winrt::Windows::Foundation::IInspectable winrt_impl_innerInterface;
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage96>(this->shim().CreateInstance2(timestamp, word0, word1, word2, *reinterpret_cast<winrt::Windows::Foundation::IInspectable const*>(&baseInterface), winrt_impl_innerInterface));
                if (innerInterface) *innerInterface = detach_abi(winrt_impl_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateInstance3(uint64_t timestamp, uint32_t __wordsSize, uint32_t* words, void* baseInterface, void** innerInterface, void** value) noexcept final try
        {
            if (innerInterface) *innerInterface = nullptr;
            winrt::Windows::Foundation::IInspectable winrt_impl_innerInterface;
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage96>(this->shim().CreateInstance3(timestamp, array_view<uint32_t const>(reinterpret_cast<uint32_t const *>(words), reinterpret_cast<uint32_t const *>(words) + __wordsSize), *reinterpret_cast<winrt::Windows::Foundation::IInspectable const*>(&baseInterface), winrt_impl_innerInterface));
                if (innerInterface) *innerInterface = detach_abi(winrt_impl_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96Statics> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96Statics>
    {
        int32_t __stdcall CreateFromStruct(uint64_t timestamp, struct struct_Microsoft_Windows_Devices_Midi2_MidiMessageStruct message, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage96>(this->shim().CreateFromStruct(timestamp, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct const*>(&message)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventArgs> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventArgs>
    {
        int32_t __stdcall get_Timestamp(uint64_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint64_t>(this->shim().Timestamp());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PacketType(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiPacketType>(this->shim().PacketType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MessageType(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageType>(this->shim().MessageType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall PeekFirstWord(uint32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<uint32_t>(this->shim().PeekFirstWord());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetMessagePacket(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket>(this->shim().GetMessagePacket());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall FillWords(uint32_t* word0, uint32_t* word1, uint32_t* word2, uint32_t* word3, uint8_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<uint8_t>(this->shim().FillWords(*word0, *word1, *word2, *word3));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall FillMessageStruct(struct struct_Microsoft_Windows_Devices_Midi2_MidiMessageStruct* message, uint8_t* result) noexcept final try
        {
            zero_abi<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct>(message);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<uint8_t>(this->shim().FillMessageStruct(*reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct*>(message)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall FillMessage32(void* message, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().FillMessage32(*reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32 const*>(&message)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall FillMessage64(void* message, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().FillMessage64(*reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage64 const*>(&message)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall FillMessage96(void* message, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().FillMessage96(*reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage96 const*>(&message)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall FillMessage128(void* message, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().FillMessage128(*reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage128 const*>(&message)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall FillWordArray(uint32_t startIndex, uint32_t __wordsSize, uint32_t* words, uint8_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<uint8_t>(this->shim().FillWordArray(startIndex, array_view<uint32_t>(reinterpret_cast<uint32_t*>(words), reinterpret_cast<uint32_t*>(words) + __wordsSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall FillByteArray(uint32_t startIndex, uint32_t __bytesSize, uint8_t* bytes, uint8_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<uint8_t>(this->shim().FillByteArray(startIndex, array_view<uint8_t>(reinterpret_cast<uint8_t*>(bytes), reinterpret_cast<uint8_t*>(bytes) + __bytesSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall FillBuffer(uint32_t byteOffset, void* buffer, uint8_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<uint8_t>(this->shim().FillBuffer(byteOffset, *reinterpret_cast<winrt::Windows::Foundation::IMemoryBuffer const*>(&buffer)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AppendWordsToList(void* wordList, uint8_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<uint8_t>(this->shim().AppendWordsToList(*reinterpret_cast<winrt::Windows::Foundation::Collections::IVector<uint32_t> const*>(&wordList)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventSource> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventSource>
    {
        int32_t __stdcall add_MessageReceived(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().MessageReceived(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventSource, winrt::Microsoft::Windows::Devices::Midi2::MidiMessageReceivedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_MessageReceived(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MessageReceived(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiSession> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiSession>
    {
        int32_t __stdcall get_SessionId(winrt::guid* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::guid>(this->shim().SessionId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Name(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Name());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsOpen(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsOpen());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Connections(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IMapView<winrt::guid, winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointConnection>>(this->shim().Connections());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateEndpointConnection(void* endpointDeviceId, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointConnection>(this->shim().CreateEndpointConnection(*reinterpret_cast<hstring const*>(&endpointDeviceId)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateEndpointConnection2(void* endpointDeviceId, bool autoReconnect, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointConnection>(this->shim().CreateEndpointConnection(*reinterpret_cast<hstring const*>(&endpointDeviceId), autoReconnect));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateEndpointConnection3(void* endpointDeviceId, bool autoReconnect, void* settings, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointConnection>(this->shim().CreateEndpointConnection(*reinterpret_cast<hstring const*>(&endpointDeviceId), autoReconnect, *reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSettings const*>(&settings)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall DisconnectEndpointConnection(winrt::guid endpointConnectionId) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DisconnectEndpointConnection(*reinterpret_cast<winrt::guid const*>(&endpointConnectionId));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall UpdateName(void* newName, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().UpdateName(*reinterpret_cast<hstring const*>(&newName)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiSessionStatics> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiSessionStatics>
    {
        int32_t __stdcall Create(void* sessionName, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiSession>(this->shim().Create(*reinterpret_cast<hstring const*>(&sessionName)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket>
    {
        int32_t __stdcall get_Timestamp(uint64_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint64_t>(this->shim().Timestamp());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Timestamp(uint64_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Timestamp(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MessageType(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageType>(this->shim().MessageType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MessageType(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MessageType(*reinterpret_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageType const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PacketType(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::MidiPacketType>(this->shim().PacketType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall PeekFirstWord(uint32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<uint32_t>(this->shim().PeekFirstWord());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetAllWords(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Collections::IVector<uint32_t>>(this->shim().GetAllWords());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AppendAllMessageWordsToList(void* targetList, uint8_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<uint8_t>(this->shim().AppendAllMessageWordsToList(*reinterpret_cast<winrt::Windows::Foundation::Collections::IVector<uint32_t> const*>(&targetList)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall FillBuffer(uint32_t byteOffset, void* buffer, uint8_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<uint8_t>(this->shim().FillBuffer(byteOffset, *reinterpret_cast<winrt::Windows::Foundation::IMemoryBuffer const*>(&buffer)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::Devices::Midi2
{
    constexpr auto operator|(MidiEndpointDeviceInformationFilters const left, MidiEndpointDeviceInformationFilters const right) noexcept
    {
        return static_cast<MidiEndpointDeviceInformationFilters>(impl::to_underlying_type(left) | impl::to_underlying_type(right));
    }
    constexpr auto operator|=(MidiEndpointDeviceInformationFilters& left, MidiEndpointDeviceInformationFilters const right) noexcept
    {
        left = left | right;
        return left;
    }
    constexpr auto operator&(MidiEndpointDeviceInformationFilters const left, MidiEndpointDeviceInformationFilters const right) noexcept
    {
        return static_cast<MidiEndpointDeviceInformationFilters>(impl::to_underlying_type(left) & impl::to_underlying_type(right));
    }
    constexpr auto operator&=(MidiEndpointDeviceInformationFilters& left, MidiEndpointDeviceInformationFilters const right) noexcept
    {
        left = left & right;
        return left;
    }
    constexpr auto operator~(MidiEndpointDeviceInformationFilters const value) noexcept
    {
        return static_cast<MidiEndpointDeviceInformationFilters>(~impl::to_underlying_type(value));
    }
    constexpr auto operator^(MidiEndpointDeviceInformationFilters const left, MidiEndpointDeviceInformationFilters const right) noexcept
    {
        return static_cast<MidiEndpointDeviceInformationFilters>(impl::to_underlying_type(left) ^ impl::to_underlying_type(right));
    }
    constexpr auto operator^=(MidiEndpointDeviceInformationFilters& left, MidiEndpointDeviceInformationFilters const right) noexcept
    {
        left = left ^ right;
        return left;
    }
    constexpr auto operator|(MidiSendMessageResults const left, MidiSendMessageResults const right) noexcept
    {
        return static_cast<MidiSendMessageResults>(impl::to_underlying_type(left) | impl::to_underlying_type(right));
    }
    constexpr auto operator|=(MidiSendMessageResults& left, MidiSendMessageResults const right) noexcept
    {
        left = left | right;
        return left;
    }
    constexpr auto operator&(MidiSendMessageResults const left, MidiSendMessageResults const right) noexcept
    {
        return static_cast<MidiSendMessageResults>(impl::to_underlying_type(left) & impl::to_underlying_type(right));
    }
    constexpr auto operator&=(MidiSendMessageResults& left, MidiSendMessageResults const right) noexcept
    {
        left = left & right;
        return left;
    }
    constexpr auto operator~(MidiSendMessageResults const value) noexcept
    {
        return static_cast<MidiSendMessageResults>(~impl::to_underlying_type(value));
    }
    constexpr auto operator^(MidiSendMessageResults const left, MidiSendMessageResults const right) noexcept
    {
        return static_cast<MidiSendMessageResults>(impl::to_underlying_type(left) ^ impl::to_underlying_type(right));
    }
    constexpr auto operator^=(MidiSendMessageResults& left, MidiSendMessageResults const right) noexcept
    {
        left = left ^ right;
        return left;
    }
    inline MidiChannel::MidiChannel(uint8_t index) :
        MidiChannel(impl::call_factory<MidiChannel, IMidiChannelFactory>([&](IMidiChannelFactory const& f) { return f.CreateInstance(index); }))
    {
    }
    inline auto MidiChannel::ShortLabel()
    {
        return impl::call_factory_cast<hstring(*)(IMidiChannelStatics const&), MidiChannel, IMidiChannelStatics>([](IMidiChannelStatics const& f) { return f.ShortLabel(); });
    }
    inline auto MidiChannel::LongLabel()
    {
        return impl::call_factory_cast<hstring(*)(IMidiChannelStatics const&), MidiChannel, IMidiChannelStatics>([](IMidiChannelStatics const& f) { return f.LongLabel(); });
    }
    inline auto MidiChannel::IsValidIndex(uint8_t index)
    {
        return impl::call_factory<MidiChannel, IMidiChannelStatics>([&](IMidiChannelStatics const& f) { return f.IsValidIndex(index); });
    }
    inline auto MidiClock::Now()
    {
        return impl::call_factory_cast<uint64_t(*)(IMidiClockStatics const&), MidiClock, IMidiClockStatics>([](IMidiClockStatics const& f) { return f.Now(); });
    }
    inline auto MidiClock::TimestampConstantSendImmediately()
    {
        return impl::call_factory_cast<uint64_t(*)(IMidiClockStatics const&), MidiClock, IMidiClockStatics>([](IMidiClockStatics const& f) { return f.TimestampConstantSendImmediately(); });
    }
    inline auto MidiClock::TimestampFrequency()
    {
        return impl::call_factory_cast<uint64_t(*)(IMidiClockStatics const&), MidiClock, IMidiClockStatics>([](IMidiClockStatics const& f) { return f.TimestampFrequency(); });
    }
    inline auto MidiClock::ConvertTimestampTicksToNanoseconds(uint64_t timestampValue)
    {
        return impl::call_factory<MidiClock, IMidiClockStatics>([&](IMidiClockStatics const& f) { return f.ConvertTimestampTicksToNanoseconds(timestampValue); });
    }
    inline auto MidiClock::ConvertTimestampTicksToMicroseconds(uint64_t timestampValue)
    {
        return impl::call_factory<MidiClock, IMidiClockStatics>([&](IMidiClockStatics const& f) { return f.ConvertTimestampTicksToMicroseconds(timestampValue); });
    }
    inline auto MidiClock::ConvertTimestampTicksToMilliseconds(uint64_t timestampValue)
    {
        return impl::call_factory<MidiClock, IMidiClockStatics>([&](IMidiClockStatics const& f) { return f.ConvertTimestampTicksToMilliseconds(timestampValue); });
    }
    inline auto MidiClock::ConvertTimestampTicksToSeconds(uint64_t timestampValue)
    {
        return impl::call_factory<MidiClock, IMidiClockStatics>([&](IMidiClockStatics const& f) { return f.ConvertTimestampTicksToSeconds(timestampValue); });
    }
    inline auto MidiClock::OffsetTimestampByTicks(uint64_t timestampValue, int64_t offsetTicks)
    {
        return impl::call_factory<MidiClock, IMidiClockStatics>([&](IMidiClockStatics const& f) { return f.OffsetTimestampByTicks(timestampValue, offsetTicks); });
    }
    inline auto MidiClock::OffsetTimestampByMicroseconds(uint64_t timestampValue, int64_t offsetMicroseconds)
    {
        return impl::call_factory<MidiClock, IMidiClockStatics>([&](IMidiClockStatics const& f) { return f.OffsetTimestampByMicroseconds(timestampValue, offsetMicroseconds); });
    }
    inline auto MidiClock::OffsetTimestampByMilliseconds(uint64_t timestampValue, int64_t offsetMilliseconds)
    {
        return impl::call_factory<MidiClock, IMidiClockStatics>([&](IMidiClockStatics const& f) { return f.OffsetTimestampByMilliseconds(timestampValue, offsetMilliseconds); });
    }
    inline auto MidiClock::OffsetTimestampBySeconds(uint64_t timestampValue, int64_t offsetSeconds)
    {
        return impl::call_factory<MidiClock, IMidiClockStatics>([&](IMidiClockStatics const& f) { return f.OffsetTimestampBySeconds(timestampValue, offsetSeconds); });
    }
    inline auto MidiEndpointConnection::GetDeviceSelector()
    {
        return impl::call_factory_cast<hstring(*)(IMidiEndpointConnectionStatics const&), MidiEndpointConnection, IMidiEndpointConnectionStatics>([](IMidiEndpointConnectionStatics const& f) { return f.GetDeviceSelector(); });
    }
    inline auto MidiEndpointConnection::SendMessageSucceeded(winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults const& sendResult)
    {
        return impl::call_factory<MidiEndpointConnection, IMidiEndpointConnectionStatics>([&](IMidiEndpointConnectionStatics const& f) { return f.SendMessageSucceeded(sendResult); });
    }
    inline auto MidiEndpointConnection::SendMessageFailed(winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults const& sendResult)
    {
        return impl::call_factory<MidiEndpointConnection, IMidiEndpointConnectionStatics>([&](IMidiEndpointConnectionStatics const& f) { return f.SendMessageFailed(sendResult); });
    }
    inline auto MidiEndpointDeviceInformation::CreateFromEndpointDeviceId(param::hstring const& endpointDeviceId)
    {
        return impl::call_factory<MidiEndpointDeviceInformation, IMidiEndpointDeviceInformationStatics>([&](IMidiEndpointDeviceInformationStatics const& f) { return f.CreateFromEndpointDeviceId(endpointDeviceId); });
    }
    inline auto MidiEndpointDeviceInformation::FindAll()
    {
        return impl::call_factory_cast<winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformation>(*)(IMidiEndpointDeviceInformationStatics const&), MidiEndpointDeviceInformation, IMidiEndpointDeviceInformationStatics>([](IMidiEndpointDeviceInformationStatics const& f) { return f.FindAll(); });
    }
    inline auto MidiEndpointDeviceInformation::FindAll(winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationSortOrder const& sortOrder)
    {
        return impl::call_factory<MidiEndpointDeviceInformation, IMidiEndpointDeviceInformationStatics>([&](IMidiEndpointDeviceInformationStatics const& f) { return f.FindAll(sortOrder); });
    }
    inline auto MidiEndpointDeviceInformation::FindAll(winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationSortOrder const& sortOrder, winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationFilters const& endpointFilters)
    {
        return impl::call_factory<MidiEndpointDeviceInformation, IMidiEndpointDeviceInformationStatics>([&](IMidiEndpointDeviceInformationStatics const& f) { return f.FindAll(sortOrder, endpointFilters); });
    }
    inline auto MidiEndpointDeviceInformation::EndpointInterfaceClass()
    {
        return impl::call_factory_cast<winrt::guid(*)(IMidiEndpointDeviceInformationStatics const&), MidiEndpointDeviceInformation, IMidiEndpointDeviceInformationStatics>([](IMidiEndpointDeviceInformationStatics const& f) { return f.EndpointInterfaceClass(); });
    }
    inline auto MidiEndpointDeviceInformation::GetAdditionalPropertiesList()
    {
        return impl::call_factory_cast<winrt::Windows::Foundation::Collections::IVectorView<hstring>(*)(IMidiEndpointDeviceInformationStatics const&), MidiEndpointDeviceInformation, IMidiEndpointDeviceInformationStatics>([](IMidiEndpointDeviceInformationStatics const& f) { return f.GetAdditionalPropertiesList(); });
    }
    inline auto MidiEndpointDeviceInformation::DeviceMatchesFilter(winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformation const& deviceInformation, winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationFilters const& endpointFilters)
    {
        return impl::call_factory<MidiEndpointDeviceInformation, IMidiEndpointDeviceInformationStatics>([&](IMidiEndpointDeviceInformationStatics const& f) { return f.DeviceMatchesFilter(deviceInformation, endpointFilters); });
    }
    inline auto MidiEndpointDeviceWatcher::Create()
    {
        return impl::call_factory_cast<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher(*)(IMidiEndpointDeviceWatcherStatics const&), MidiEndpointDeviceWatcher, IMidiEndpointDeviceWatcherStatics>([](IMidiEndpointDeviceWatcherStatics const& f) { return f.Create(); });
    }
    inline auto MidiEndpointDeviceWatcher::Create(winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationFilters const& endpointFilters)
    {
        return impl::call_factory<MidiEndpointDeviceWatcher, IMidiEndpointDeviceWatcherStatics>([&](IMidiEndpointDeviceWatcherStatics const& f) { return f.Create(endpointFilters); });
    }
    inline MidiFunctionBlock::MidiFunctionBlock() :
        MidiFunctionBlock(impl::call_factory_cast<MidiFunctionBlock(*)(winrt::Windows::Foundation::IActivationFactory const&), MidiFunctionBlock>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<MidiFunctionBlock>(); }))
    {
    }
    inline MidiGroup::MidiGroup(uint8_t index) :
        MidiGroup(impl::call_factory<MidiGroup, IMidiGroupFactory>([&](IMidiGroupFactory const& f) { return f.CreateInstance(index); }))
    {
    }
    inline auto MidiGroup::ShortLabel()
    {
        return impl::call_factory_cast<hstring(*)(IMidiGroupStatics const&), MidiGroup, IMidiGroupStatics>([](IMidiGroupStatics const& f) { return f.ShortLabel(); });
    }
    inline auto MidiGroup::LongLabel()
    {
        return impl::call_factory_cast<hstring(*)(IMidiGroupStatics const&), MidiGroup, IMidiGroupStatics>([](IMidiGroupStatics const& f) { return f.LongLabel(); });
    }
    inline auto MidiGroup::IsValidIndex(uint8_t index)
    {
        return impl::call_factory<MidiGroup, IMidiGroupStatics>([&](IMidiGroupStatics const& f) { return f.IsValidIndex(index); });
    }
    inline MidiMessage128::MidiMessage128()
    {
        winrt::Windows::Foundation::IInspectable baseInterface, innerInterface;
        *this = impl::call_factory<MidiMessage128, IMidiMessage128Factory>([&](IMidiMessage128Factory const& f) { return f.CreateInstance(baseInterface, innerInterface); });
    }
    inline MidiMessage128::MidiMessage128(uint64_t timestamp, uint32_t word0, uint32_t word1, uint32_t word2, uint32_t word3)
    {
        winrt::Windows::Foundation::IInspectable baseInterface, innerInterface;
        *this = impl::call_factory<MidiMessage128, IMidiMessage128Factory>([&](IMidiMessage128Factory const& f) { return f.CreateInstance2(timestamp, word0, word1, word2, word3, baseInterface, innerInterface); });
    }
    inline MidiMessage128::MidiMessage128(uint64_t timestamp, array_view<uint32_t const> words)
    {
        winrt::Windows::Foundation::IInspectable baseInterface, innerInterface;
        *this = impl::call_factory<MidiMessage128, IMidiMessage128Factory>([&](IMidiMessage128Factory const& f) { return f.CreateInstance3(timestamp, words, baseInterface, innerInterface); });
    }
    inline auto MidiMessage128::CreateFromStruct(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct const& message)
    {
        return impl::call_factory<MidiMessage128, IMidiMessage128Statics>([&](IMidiMessage128Statics const& f) { return f.CreateFromStruct(timestamp, message); });
    }
    inline MidiMessage32::MidiMessage32()
    {
        winrt::Windows::Foundation::IInspectable baseInterface, innerInterface;
        *this = impl::call_factory<MidiMessage32, IMidiMessage32Factory>([&](IMidiMessage32Factory const& f) { return f.CreateInstance(baseInterface, innerInterface); });
    }
    inline MidiMessage32::MidiMessage32(uint64_t timestamp, uint32_t word0)
    {
        winrt::Windows::Foundation::IInspectable baseInterface, innerInterface;
        *this = impl::call_factory<MidiMessage32, IMidiMessage32Factory>([&](IMidiMessage32Factory const& f) { return f.CreateInstance2(timestamp, word0, baseInterface, innerInterface); });
    }
    inline auto MidiMessage32::CreateFromStruct(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct const& message)
    {
        return impl::call_factory<MidiMessage32, IMidiMessage32Statics>([&](IMidiMessage32Statics const& f) { return f.CreateFromStruct(timestamp, message); });
    }
    inline MidiMessage64::MidiMessage64()
    {
        winrt::Windows::Foundation::IInspectable baseInterface, innerInterface;
        *this = impl::call_factory<MidiMessage64, IMidiMessage64Factory>([&](IMidiMessage64Factory const& f) { return f.CreateInstance(baseInterface, innerInterface); });
    }
    inline MidiMessage64::MidiMessage64(uint64_t timestamp, uint32_t word0, uint32_t word1)
    {
        winrt::Windows::Foundation::IInspectable baseInterface, innerInterface;
        *this = impl::call_factory<MidiMessage64, IMidiMessage64Factory>([&](IMidiMessage64Factory const& f) { return f.CreateInstance2(timestamp, word0, word1, baseInterface, innerInterface); });
    }
    inline MidiMessage64::MidiMessage64(uint64_t timestamp, array_view<uint32_t const> words)
    {
        winrt::Windows::Foundation::IInspectable baseInterface, innerInterface;
        *this = impl::call_factory<MidiMessage64, IMidiMessage64Factory>([&](IMidiMessage64Factory const& f) { return f.CreateInstance3(timestamp, words, baseInterface, innerInterface); });
    }
    inline auto MidiMessage64::CreateFromStruct(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct const& message)
    {
        return impl::call_factory<MidiMessage64, IMidiMessage64Statics>([&](IMidiMessage64Statics const& f) { return f.CreateFromStruct(timestamp, message); });
    }
    inline MidiMessage96::MidiMessage96()
    {
        winrt::Windows::Foundation::IInspectable baseInterface, innerInterface;
        *this = impl::call_factory<MidiMessage96, IMidiMessage96Factory>([&](IMidiMessage96Factory const& f) { return f.CreateInstance(baseInterface, innerInterface); });
    }
    inline MidiMessage96::MidiMessage96(uint64_t timestamp, uint32_t word0, uint32_t word1, uint32_t word2)
    {
        winrt::Windows::Foundation::IInspectable baseInterface, innerInterface;
        *this = impl::call_factory<MidiMessage96, IMidiMessage96Factory>([&](IMidiMessage96Factory const& f) { return f.CreateInstance2(timestamp, word0, word1, word2, baseInterface, innerInterface); });
    }
    inline MidiMessage96::MidiMessage96(uint64_t timestamp, array_view<uint32_t const> words)
    {
        winrt::Windows::Foundation::IInspectable baseInterface, innerInterface;
        *this = impl::call_factory<MidiMessage96, IMidiMessage96Factory>([&](IMidiMessage96Factory const& f) { return f.CreateInstance3(timestamp, words, baseInterface, innerInterface); });
    }
    inline auto MidiMessage96::CreateFromStruct(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct const& message)
    {
        return impl::call_factory<MidiMessage96, IMidiMessage96Statics>([&](IMidiMessage96Statics const& f) { return f.CreateFromStruct(timestamp, message); });
    }
    inline auto MidiSession::Create(param::hstring const& sessionName)
    {
        return impl::call_factory<MidiSession, IMidiSessionStatics>([&](IMidiSessionStatics const& f) { return f.Create(sessionName); });
    }
    template <typename D, typename... Interfaces>
    struct MidiMessage128T :
        implements<D, winrt::Windows::Foundation::IInspectable, composing, Interfaces...>,
        impl::require<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128, winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket, winrt::Windows::Foundation::IStringable>,
        impl::base<D, MidiMessage128>
    {
        using composable = MidiMessage128;
    protected:
        MidiMessage128T()
        {
            impl::call_factory<MidiMessage128, IMidiMessage128Factory>([&](IMidiMessage128Factory const& f) { [[maybe_unused]] auto winrt_impl_discarded = f.CreateInstance(*this, this->m_inner); });
        }
        MidiMessage128T(uint64_t timestamp, uint32_t word0, uint32_t word1, uint32_t word2, uint32_t word3)
        {
            impl::call_factory<MidiMessage128, IMidiMessage128Factory>([&](IMidiMessage128Factory const& f) { [[maybe_unused]] auto winrt_impl_discarded = f.CreateInstance2(timestamp, word0, word1, word2, word3, *this, this->m_inner); });
        }
        MidiMessage128T(uint64_t timestamp, array_view<uint32_t const> words)
        {
            impl::call_factory<MidiMessage128, IMidiMessage128Factory>([&](IMidiMessage128Factory const& f) { [[maybe_unused]] auto winrt_impl_discarded = f.CreateInstance3(timestamp, words, *this, this->m_inner); });
        }
    };
    template <typename D, typename... Interfaces>
    struct MidiMessage32T :
        implements<D, winrt::Windows::Foundation::IInspectable, composing, Interfaces...>,
        impl::require<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32, winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket, winrt::Windows::Foundation::IStringable>,
        impl::base<D, MidiMessage32>
    {
        using composable = MidiMessage32;
    protected:
        MidiMessage32T()
        {
            impl::call_factory<MidiMessage32, IMidiMessage32Factory>([&](IMidiMessage32Factory const& f) { [[maybe_unused]] auto winrt_impl_discarded = f.CreateInstance(*this, this->m_inner); });
        }
        MidiMessage32T(uint64_t timestamp, uint32_t word0)
        {
            impl::call_factory<MidiMessage32, IMidiMessage32Factory>([&](IMidiMessage32Factory const& f) { [[maybe_unused]] auto winrt_impl_discarded = f.CreateInstance2(timestamp, word0, *this, this->m_inner); });
        }
    };
    template <typename D, typename... Interfaces>
    struct MidiMessage64T :
        implements<D, winrt::Windows::Foundation::IInspectable, composing, Interfaces...>,
        impl::require<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64, winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket, winrt::Windows::Foundation::IStringable>,
        impl::base<D, MidiMessage64>
    {
        using composable = MidiMessage64;
    protected:
        MidiMessage64T()
        {
            impl::call_factory<MidiMessage64, IMidiMessage64Factory>([&](IMidiMessage64Factory const& f) { [[maybe_unused]] auto winrt_impl_discarded = f.CreateInstance(*this, this->m_inner); });
        }
        MidiMessage64T(uint64_t timestamp, uint32_t word0, uint32_t word1)
        {
            impl::call_factory<MidiMessage64, IMidiMessage64Factory>([&](IMidiMessage64Factory const& f) { [[maybe_unused]] auto winrt_impl_discarded = f.CreateInstance2(timestamp, word0, word1, *this, this->m_inner); });
        }
        MidiMessage64T(uint64_t timestamp, array_view<uint32_t const> words)
        {
            impl::call_factory<MidiMessage64, IMidiMessage64Factory>([&](IMidiMessage64Factory const& f) { [[maybe_unused]] auto winrt_impl_discarded = f.CreateInstance3(timestamp, words, *this, this->m_inner); });
        }
    };
    template <typename D, typename... Interfaces>
    struct MidiMessage96T :
        implements<D, winrt::Windows::Foundation::IInspectable, composing, Interfaces...>,
        impl::require<D, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96, winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket, winrt::Windows::Foundation::IStringable>,
        impl::base<D, MidiMessage96>
    {
        using composable = MidiMessage96;
    protected:
        MidiMessage96T()
        {
            impl::call_factory<MidiMessage96, IMidiMessage96Factory>([&](IMidiMessage96Factory const& f) { [[maybe_unused]] auto winrt_impl_discarded = f.CreateInstance(*this, this->m_inner); });
        }
        MidiMessage96T(uint64_t timestamp, uint32_t word0, uint32_t word1, uint32_t word2)
        {
            impl::call_factory<MidiMessage96, IMidiMessage96Factory>([&](IMidiMessage96Factory const& f) { [[maybe_unused]] auto winrt_impl_discarded = f.CreateInstance2(timestamp, word0, word1, word2, *this, this->m_inner); });
        }
        MidiMessage96T(uint64_t timestamp, array_view<uint32_t const> words)
        {
            impl::call_factory<MidiMessage96, IMidiMessage96Factory>([&](IMidiMessage96Factory const& f) { [[maybe_unused]] auto winrt_impl_discarded = f.CreateInstance3(timestamp, words, *this, this->m_inner); });
        }
    };
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiChannel> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiChannelFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiChannelStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiClock> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiClockStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSettings> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSource> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformation> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationAddedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationRemovedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationUpdatedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcherStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointMessageProcessingPlugin> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiGroup> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupTerminalBlock> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128Factory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128Statics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32Factory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32Statics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64Factory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64Statics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96Factory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96Statics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventSource> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiSession> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiSessionStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::MidiChannel> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::MidiClock> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointConnection> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformation> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationAddedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationRemovedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationUpdatedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceWatcher> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::MidiFunctionBlock> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::MidiGroup> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::MidiGroupTerminalBlock> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage128> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage64> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage96> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::MidiMessageReceivedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::MidiSession> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
    template<> struct formatter<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage128, wchar_t> : formatter<winrt::Windows::Foundation::IStringable, wchar_t> {};
    template<> struct formatter<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage32, wchar_t> : formatter<winrt::Windows::Foundation::IStringable, wchar_t> {};
    template<> struct formatter<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage64, wchar_t> : formatter<winrt::Windows::Foundation::IStringable, wchar_t> {};
    template<> struct formatter<winrt::Microsoft::Windows::Devices::Midi2::MidiMessage96, wchar_t> : formatter<winrt::Windows::Foundation::IStringable, wchar_t> {};
#endif
}
#endif

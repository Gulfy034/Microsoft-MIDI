// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#ifndef WINRT_Microsoft_Windows_Devices_Midi2_Endpoints_Virtual_2_H
#define WINRT_Microsoft_Windows_Devices_Midi2_Endpoints_Virtual_2_H
#include "winrt/impl/Microsoft.Windows.Devices.Midi2.2.h"
#include "winrt/impl/Microsoft.Windows.Devices.Midi2.ServiceConfig.2.h"
#include "winrt/impl/Microsoft.Windows.Devices.Midi2.Endpoints.Virtual.1.h"
WINRT_EXPORT namespace winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Virtual
{
    struct MidiStreamConfigRequestedSettings
    {
        uint8_t SpecificationVersionMajor;
        uint8_t SpecificationVersionMinor;
        winrt::Microsoft::Windows::Devices::Midi2::MidiProtocol PreferredMidiProtocol;
        bool RequestEndpointTransmitJitterReductionTimestamps;
        bool RequestEndpointReceiveJitterReductionTimestamps;
    };
    inline bool operator==(MidiStreamConfigRequestedSettings const& left, MidiStreamConfigRequestedSettings const& right) noexcept
    {
        return left.SpecificationVersionMajor == right.SpecificationVersionMajor && left.SpecificationVersionMinor == right.SpecificationVersionMinor && left.PreferredMidiProtocol == right.PreferredMidiProtocol && left.RequestEndpointTransmitJitterReductionTimestamps == right.RequestEndpointTransmitJitterReductionTimestamps && left.RequestEndpointReceiveJitterReductionTimestamps == right.RequestEndpointReceiveJitterReductionTimestamps;
    }
    inline bool operator!=(MidiStreamConfigRequestedSettings const& left, MidiStreamConfigRequestedSettings const& right) noexcept
    {
        return !(left == right);
    }
    struct MidiVirtualDeviceCreationResult
    {
        bool Success;
        hstring DeviceSideEndpointDeviceId;
    };
    inline bool operator==(MidiVirtualDeviceCreationResult const& left, MidiVirtualDeviceCreationResult const& right) noexcept
    {
        return left.Success == right.Success && left.DeviceSideEndpointDeviceId == right.DeviceSideEndpointDeviceId;
    }
    inline bool operator!=(MidiVirtualDeviceCreationResult const& left, MidiVirtualDeviceCreationResult const& right) noexcept
    {
        return !(left == right);
    }
    struct WINRT_IMPL_EMPTY_BASES MidiStreamConfigRequestReceivedEventArgs : winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Virtual::IMidiStreamConfigRequestReceivedEventArgs
    {
        MidiStreamConfigRequestReceivedEventArgs(std::nullptr_t) noexcept {}
        MidiStreamConfigRequestReceivedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Virtual::IMidiStreamConfigRequestReceivedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES MidiVirtualDevice : winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Virtual::IMidiVirtualDevice,
        impl::require<MidiVirtualDevice, winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointMessageProcessingPlugin>
    {
        MidiVirtualDevice(std::nullptr_t) noexcept {}
        MidiVirtualDevice(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Virtual::IMidiVirtualDevice(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES MidiVirtualDeviceCreationConfig : winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Virtual::IMidiVirtualDeviceCreationConfig,
        impl::require<MidiVirtualDeviceCreationConfig, winrt::Microsoft::Windows::Devices::Midi2::ServiceConfig::IMidiServiceTransportPluginConfig>
    {
        MidiVirtualDeviceCreationConfig(std::nullptr_t) noexcept {}
        MidiVirtualDeviceCreationConfig(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Virtual::IMidiVirtualDeviceCreationConfig(ptr, take_ownership_from_abi) {}
        MidiVirtualDeviceCreationConfig(param::hstring const& name, param::hstring const& description, param::hstring const& manufacturer, winrt::Microsoft::Windows::Devices::Midi2::MidiDeclaredEndpointInfo const& declaredEndpointInfo);
        MidiVirtualDeviceCreationConfig(param::hstring const& name, param::hstring const& description, param::hstring const& manufacturer, winrt::Microsoft::Windows::Devices::Midi2::MidiDeclaredEndpointInfo const& declaredEndpointInfo, winrt::Microsoft::Windows::Devices::Midi2::MidiDeclaredDeviceIdentity const& declaredDeviceIdentity);
        MidiVirtualDeviceCreationConfig(param::hstring const& name, param::hstring const& description, param::hstring const& manufacturer, winrt::Microsoft::Windows::Devices::Midi2::MidiDeclaredEndpointInfo const& declaredEndpointInfo, winrt::Microsoft::Windows::Devices::Midi2::MidiDeclaredDeviceIdentity const& declaredDeviceIdentity, winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointUserSuppliedInfo const& userSuppliedInfo);
    };
    struct WINRT_IMPL_EMPTY_BASES MidiVirtualDeviceManager : winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Virtual::IMidiVirtualDeviceManager
    {
        MidiVirtualDeviceManager(std::nullptr_t) noexcept {}
        MidiVirtualDeviceManager(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Virtual::IMidiVirtualDeviceManager(ptr, take_ownership_from_abi) {}
        [[nodiscard]] static auto IsTransportAvailable();
        [[nodiscard]] static auto AbstractionId();
        static auto CreateVirtualDevice(winrt::Microsoft::Windows::Devices::Midi2::Endpoints::Virtual::MidiVirtualDeviceCreationConfig const& creationConfig);
    };
}
#endif

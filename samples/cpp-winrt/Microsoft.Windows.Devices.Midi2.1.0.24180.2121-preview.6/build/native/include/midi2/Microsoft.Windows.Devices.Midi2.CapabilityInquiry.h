// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#ifndef WINRT_Microsoft_Windows_Devices_Midi2_CapabilityInquiry_H
#define WINRT_Microsoft_Windows_Devices_Midi2_CapabilityInquiry_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.240405.15"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.240405.15"
#include "winrt/Microsoft.Windows.Devices.Midi2.h"
#include "winrt/impl/Microsoft.Windows.Devices.Midi2.CapabilityInquiry.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_CapabilityInquiry_IMidiUniqueId<D>::Byte1() const
    {
        uint8_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueId)->get_Byte1(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_CapabilityInquiry_IMidiUniqueId<D>::Byte1(uint8_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueId)->put_Byte1(value));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_CapabilityInquiry_IMidiUniqueId<D>::Byte2() const
    {
        uint8_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueId)->get_Byte2(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_CapabilityInquiry_IMidiUniqueId<D>::Byte2(uint8_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueId)->put_Byte2(value));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_CapabilityInquiry_IMidiUniqueId<D>::Byte3() const
    {
        uint8_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueId)->get_Byte3(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_CapabilityInquiry_IMidiUniqueId<D>::Byte3(uint8_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueId)->put_Byte3(value));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_CapabilityInquiry_IMidiUniqueId<D>::Byte4() const
    {
        uint8_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueId)->get_Byte4(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_CapabilityInquiry_IMidiUniqueId<D>::Byte4(uint8_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueId)->put_Byte4(value));
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_CapabilityInquiry_IMidiUniqueId<D>::AsCombined28BitValue() const
    {
        uint32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueId)->get_AsCombined28BitValue(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_CapabilityInquiry_IMidiUniqueId<D>::IsBroadcast() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueId)->get_IsBroadcast(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_CapabilityInquiry_IMidiUniqueId<D>::IsReserved() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueId)->get_IsReserved(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_CapabilityInquiry_IMidiUniqueIdFactory<D>::CreateInstance(uint32_t combined28BitValue) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueIdFactory)->CreateInstance(combined28BitValue, &value));
        return winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::MidiUniqueId{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_CapabilityInquiry_IMidiUniqueIdFactory<D>::CreateInstance2(uint8_t sevenBitByte1, uint8_t sevenBitByte2, uint8_t sevenBitByte3, uint8_t sevenBitByte4) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueIdFactory)->CreateInstance2(sevenBitByte1, sevenBitByte2, sevenBitByte3, sevenBitByte4, &value));
        return winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::MidiUniqueId{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_CapabilityInquiry_IMidiUniqueIdStatics<D>::ShortLabel() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueIdStatics)->get_ShortLabel(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_CapabilityInquiry_IMidiUniqueIdStatics<D>::LongLabel() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueIdStatics)->get_LongLabel(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_CapabilityInquiry_IMidiUniqueIdStatics<D>::CreateBroadcast() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueIdStatics)->CreateBroadcast(&result));
        return winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::MidiUniqueId{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Devices_Midi2_CapabilityInquiry_IMidiUniqueIdStatics<D>::CreateRandom() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueIdStatics)->CreateRandom(&result));
        return winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::MidiUniqueId{ result, take_ownership_from_abi };
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueId> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueId>
    {
        int32_t __stdcall get_Byte1(uint8_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint8_t>(this->shim().Byte1());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Byte1(uint8_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Byte1(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Byte2(uint8_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint8_t>(this->shim().Byte2());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Byte2(uint8_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Byte2(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Byte3(uint8_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint8_t>(this->shim().Byte3());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Byte3(uint8_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Byte3(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Byte4(uint8_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint8_t>(this->shim().Byte4());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Byte4(uint8_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Byte4(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AsCombined28BitValue(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().AsCombined28BitValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsBroadcast(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsBroadcast());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsReserved(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsReserved());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueIdFactory> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueIdFactory>
    {
        int32_t __stdcall CreateInstance(uint32_t combined28BitValue, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::MidiUniqueId>(this->shim().CreateInstance(combined28BitValue));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateInstance2(uint8_t sevenBitByte1, uint8_t sevenBitByte2, uint8_t sevenBitByte3, uint8_t sevenBitByte4, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::MidiUniqueId>(this->shim().CreateInstance2(sevenBitByte1, sevenBitByte2, sevenBitByte3, sevenBitByte4));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueIdStatics> : produce_base<D, winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueIdStatics>
    {
        int32_t __stdcall get_ShortLabel(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ShortLabel());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_LongLabel(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().LongLabel());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateBroadcast(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::MidiUniqueId>(this->shim().CreateBroadcast());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateRandom(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::MidiUniqueId>(this->shim().CreateRandom());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry
{
    inline MidiUniqueId::MidiUniqueId() :
        MidiUniqueId(impl::call_factory_cast<MidiUniqueId(*)(winrt::Windows::Foundation::IActivationFactory const&), MidiUniqueId>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<MidiUniqueId>(); }))
    {
    }
    inline MidiUniqueId::MidiUniqueId(uint32_t combined28BitValue) :
        MidiUniqueId(impl::call_factory<MidiUniqueId, IMidiUniqueIdFactory>([&](IMidiUniqueIdFactory const& f) { return f.CreateInstance(combined28BitValue); }))
    {
    }
    inline MidiUniqueId::MidiUniqueId(uint8_t sevenBitByte1, uint8_t sevenBitByte2, uint8_t sevenBitByte3, uint8_t sevenBitByte4) :
        MidiUniqueId(impl::call_factory<MidiUniqueId, IMidiUniqueIdFactory>([&](IMidiUniqueIdFactory const& f) { return f.CreateInstance2(sevenBitByte1, sevenBitByte2, sevenBitByte3, sevenBitByte4); }))
    {
    }
    inline auto MidiUniqueId::ShortLabel()
    {
        return impl::call_factory_cast<hstring(*)(IMidiUniqueIdStatics const&), MidiUniqueId, IMidiUniqueIdStatics>([](IMidiUniqueIdStatics const& f) { return f.ShortLabel(); });
    }
    inline auto MidiUniqueId::LongLabel()
    {
        return impl::call_factory_cast<hstring(*)(IMidiUniqueIdStatics const&), MidiUniqueId, IMidiUniqueIdStatics>([](IMidiUniqueIdStatics const& f) { return f.LongLabel(); });
    }
    inline auto MidiUniqueId::CreateBroadcast()
    {
        return impl::call_factory_cast<winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::MidiUniqueId(*)(IMidiUniqueIdStatics const&), MidiUniqueId, IMidiUniqueIdStatics>([](IMidiUniqueIdStatics const& f) { return f.CreateBroadcast(); });
    }
    inline auto MidiUniqueId::CreateRandom()
    {
        return impl::call_factory_cast<winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::MidiUniqueId(*)(IMidiUniqueIdStatics const&), MidiUniqueId, IMidiUniqueIdStatics>([](IMidiUniqueIdStatics const& f) { return f.CreateRandom(); });
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueId> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueIdFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::IMidiUniqueIdStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Devices::Midi2::CapabilityInquiry::MidiUniqueId> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif

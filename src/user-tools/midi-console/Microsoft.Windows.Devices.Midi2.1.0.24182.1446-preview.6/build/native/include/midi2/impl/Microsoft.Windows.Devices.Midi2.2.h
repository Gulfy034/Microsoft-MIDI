// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#ifndef WINRT_Microsoft_Windows_Devices_Midi2_2_H
#define WINRT_Microsoft_Windows_Devices_Midi2_2_H
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Microsoft.Windows.Devices.Midi2.1.h"
WINRT_EXPORT namespace winrt::Microsoft::Windows::Devices::Midi2
{
    struct MidiDeclaredDeviceIdentity
    {
        uint8_t SystemExclusiveIdByte1;
        uint8_t SystemExclusiveIdByte2;
        uint8_t SystemExclusiveIdByte3;
        uint8_t DeviceFamilyLsb;
        uint8_t DeviceFamilyMsb;
        uint8_t DeviceFamilyModelNumberLsb;
        uint8_t DeviceFamilyModelNumberMsb;
        uint8_t SoftwareRevisionLevelByte1;
        uint8_t SoftwareRevisionLevelByte2;
        uint8_t SoftwareRevisionLevelByte3;
        uint8_t SoftwareRevisionLevelByte4;
    };
    inline bool operator==(MidiDeclaredDeviceIdentity const& left, MidiDeclaredDeviceIdentity const& right) noexcept
    {
        return left.SystemExclusiveIdByte1 == right.SystemExclusiveIdByte1 && left.SystemExclusiveIdByte2 == right.SystemExclusiveIdByte2 && left.SystemExclusiveIdByte3 == right.SystemExclusiveIdByte3 && left.DeviceFamilyLsb == right.DeviceFamilyLsb && left.DeviceFamilyMsb == right.DeviceFamilyMsb && left.DeviceFamilyModelNumberLsb == right.DeviceFamilyModelNumberLsb && left.DeviceFamilyModelNumberMsb == right.DeviceFamilyModelNumberMsb && left.SoftwareRevisionLevelByte1 == right.SoftwareRevisionLevelByte1 && left.SoftwareRevisionLevelByte2 == right.SoftwareRevisionLevelByte2 && left.SoftwareRevisionLevelByte3 == right.SoftwareRevisionLevelByte3 && left.SoftwareRevisionLevelByte4 == right.SoftwareRevisionLevelByte4;
    }
    inline bool operator!=(MidiDeclaredDeviceIdentity const& left, MidiDeclaredDeviceIdentity const& right) noexcept
    {
        return !(left == right);
    }
    struct MidiDeclaredEndpointInfo
    {
        hstring Name;
        hstring ProductInstanceId;
        bool SupportsMidi10Protocol;
        bool SupportsMidi20Protocol;
        bool SupportsReceivingJitterReductionTimestamps;
        bool SupportsSendingJitterReductionTimestamps;
        bool HasStaticFunctionBlocks;
        uint8_t DeclaredFunctionBlockCount;
        uint8_t SpecificationVersionMajor;
        uint8_t SpecificationVersionMinor;
    };
    inline bool operator==(MidiDeclaredEndpointInfo const& left, MidiDeclaredEndpointInfo const& right) noexcept
    {
        return left.Name == right.Name && left.ProductInstanceId == right.ProductInstanceId && left.SupportsMidi10Protocol == right.SupportsMidi10Protocol && left.SupportsMidi20Protocol == right.SupportsMidi20Protocol && left.SupportsReceivingJitterReductionTimestamps == right.SupportsReceivingJitterReductionTimestamps && left.SupportsSendingJitterReductionTimestamps == right.SupportsSendingJitterReductionTimestamps && left.HasStaticFunctionBlocks == right.HasStaticFunctionBlocks && left.DeclaredFunctionBlockCount == right.DeclaredFunctionBlockCount && left.SpecificationVersionMajor == right.SpecificationVersionMajor && left.SpecificationVersionMinor == right.SpecificationVersionMinor;
    }
    inline bool operator!=(MidiDeclaredEndpointInfo const& left, MidiDeclaredEndpointInfo const& right) noexcept
    {
        return !(left == right);
    }
    struct MidiDeclaredStreamConfiguration
    {
        winrt::Microsoft::Windows::Devices::Midi2::MidiProtocol Protocol;
        bool ReceiveJitterReductionTimestamps;
        bool SendJitterReductionTimestamps;
    };
    inline bool operator==(MidiDeclaredStreamConfiguration const& left, MidiDeclaredStreamConfiguration const& right) noexcept
    {
        return left.Protocol == right.Protocol && left.ReceiveJitterReductionTimestamps == right.ReceiveJitterReductionTimestamps && left.SendJitterReductionTimestamps == right.SendJitterReductionTimestamps;
    }
    inline bool operator!=(MidiDeclaredStreamConfiguration const& left, MidiDeclaredStreamConfiguration const& right) noexcept
    {
        return !(left == right);
    }
    struct MidiEndpointTransportSuppliedInfo
    {
        hstring Name;
        hstring Description;
        hstring SerialNumber;
        uint16_t VendorId;
        uint16_t ProductId;
        hstring ManufacturerName;
        bool SupportsMultiClient;
        winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointNativeDataFormat NativeDataFormat;
        winrt::guid TransportId;
        hstring TransportAbbreviation;
    };
    inline bool operator==(MidiEndpointTransportSuppliedInfo const& left, MidiEndpointTransportSuppliedInfo const& right) noexcept
    {
        return left.Name == right.Name && left.Description == right.Description && left.SerialNumber == right.SerialNumber && left.VendorId == right.VendorId && left.ProductId == right.ProductId && left.ManufacturerName == right.ManufacturerName && left.SupportsMultiClient == right.SupportsMultiClient && left.NativeDataFormat == right.NativeDataFormat && left.TransportId == right.TransportId && left.TransportAbbreviation == right.TransportAbbreviation;
    }
    inline bool operator!=(MidiEndpointTransportSuppliedInfo const& left, MidiEndpointTransportSuppliedInfo const& right) noexcept
    {
        return !(left == right);
    }
    struct MidiEndpointUserSuppliedInfo
    {
        hstring Name;
        hstring Description;
        hstring LargeImagePath;
        hstring SmallImagePath;
        bool RequiresNoteOffTranslation;
        uint16_t RecommendedControlChangeAutomationIntervalMilliseconds;
        bool SupportsMidiPolyphonicExpression;
    };
    inline bool operator==(MidiEndpointUserSuppliedInfo const& left, MidiEndpointUserSuppliedInfo const& right) noexcept
    {
        return left.Name == right.Name && left.Description == right.Description && left.LargeImagePath == right.LargeImagePath && left.SmallImagePath == right.SmallImagePath && left.RequiresNoteOffTranslation == right.RequiresNoteOffTranslation && left.RecommendedControlChangeAutomationIntervalMilliseconds == right.RecommendedControlChangeAutomationIntervalMilliseconds && left.SupportsMidiPolyphonicExpression == right.SupportsMidiPolyphonicExpression;
    }
    inline bool operator!=(MidiEndpointUserSuppliedInfo const& left, MidiEndpointUserSuppliedInfo const& right) noexcept
    {
        return !(left == right);
    }
    struct MidiMessageStruct
    {
        uint32_t Word0;
        uint32_t Word1;
        uint32_t Word2;
        uint32_t Word3;
    };
    inline bool operator==(MidiMessageStruct const& left, MidiMessageStruct const& right) noexcept
    {
        return left.Word0 == right.Word0 && left.Word1 == right.Word1 && left.Word2 == right.Word2 && left.Word3 == right.Word3;
    }
    inline bool operator!=(MidiMessageStruct const& left, MidiMessageStruct const& right) noexcept
    {
        return !(left == right);
    }
    struct WINRT_IMPL_EMPTY_BASES MidiChannel : winrt::Microsoft::Windows::Devices::Midi2::IMidiChannel
    {
        MidiChannel(std::nullptr_t) noexcept {}
        MidiChannel(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Devices::Midi2::IMidiChannel(ptr, take_ownership_from_abi) {}
        explicit MidiChannel(uint8_t index);
        [[nodiscard]] static auto ShortLabel();
        [[nodiscard]] static auto LongLabel();
        static auto IsValidIndex(uint8_t index);
    };
    struct WINRT_IMPL_EMPTY_BASES MidiClock : winrt::Microsoft::Windows::Devices::Midi2::IMidiClock
    {
        MidiClock(std::nullptr_t) noexcept {}
        MidiClock(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Devices::Midi2::IMidiClock(ptr, take_ownership_from_abi) {}
        [[nodiscard]] static auto Now();
        [[nodiscard]] static auto TimestampConstantSendImmediately();
        [[nodiscard]] static auto TimestampFrequency();
        static auto ConvertTimestampTicksToNanoseconds(uint64_t timestampValue);
        static auto ConvertTimestampTicksToMicroseconds(uint64_t timestampValue);
        static auto ConvertTimestampTicksToMilliseconds(uint64_t timestampValue);
        static auto ConvertTimestampTicksToSeconds(uint64_t timestampValue);
        static auto OffsetTimestampByTicks(uint64_t timestampValue, int64_t offsetTicks);
        static auto OffsetTimestampByMicroseconds(uint64_t timestampValue, int64_t offsetMicroseconds);
        static auto OffsetTimestampByMilliseconds(uint64_t timestampValue, int64_t offsetMilliseconds);
        static auto OffsetTimestampBySeconds(uint64_t timestampValue, int64_t offsetSeconds);
    };
    struct WINRT_IMPL_EMPTY_BASES MidiEndpointConnection : winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection,
        impl::require<MidiEndpointConnection, winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventSource, winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnectionSource>
    {
        MidiEndpointConnection(std::nullptr_t) noexcept {}
        MidiEndpointConnection(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointConnection(ptr, take_ownership_from_abi) {}
        static auto GetDeviceSelector();
        static auto SendMessageSucceeded(winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults const& sendResult);
        static auto SendMessageFailed(winrt::Microsoft::Windows::Devices::Midi2::MidiSendMessageResults const& sendResult);
    };
    struct WINRT_IMPL_EMPTY_BASES MidiEndpointDeviceInformation : winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformation
    {
        MidiEndpointDeviceInformation(std::nullptr_t) noexcept {}
        MidiEndpointDeviceInformation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformation(ptr, take_ownership_from_abi) {}
        static auto CreateFromEndpointDeviceId(param::hstring const& endpointDeviceId);
        static auto FindAll();
        static auto FindAll(winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationSortOrder const& sortOrder);
        static auto FindAll(winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationSortOrder const& sortOrder, winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationFilters const& endpointTypesToInclude);
        [[nodiscard]] static auto EndpointInterfaceClass();
        static auto GetAdditionalPropertiesList();
        static auto DeviceMatchesFilter(winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformation const& deviceInformation, winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationFilters const& endpointTypesToInclude);
    };
    struct WINRT_IMPL_EMPTY_BASES MidiEndpointDeviceInformationAddedEventArgs : winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationAddedEventArgs
    {
        MidiEndpointDeviceInformationAddedEventArgs(std::nullptr_t) noexcept {}
        MidiEndpointDeviceInformationAddedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationAddedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES MidiEndpointDeviceInformationRemovedEventArgs : winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationRemovedEventArgs
    {
        MidiEndpointDeviceInformationRemovedEventArgs(std::nullptr_t) noexcept {}
        MidiEndpointDeviceInformationRemovedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationRemovedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES MidiEndpointDeviceInformationUpdatedEventArgs : winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationUpdatedEventArgs
    {
        MidiEndpointDeviceInformationUpdatedEventArgs(std::nullptr_t) noexcept {}
        MidiEndpointDeviceInformationUpdatedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceInformationUpdatedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES MidiEndpointDeviceWatcher : winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher
    {
        MidiEndpointDeviceWatcher(std::nullptr_t) noexcept {}
        MidiEndpointDeviceWatcher(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Devices::Midi2::IMidiEndpointDeviceWatcher(ptr, take_ownership_from_abi) {}
        static auto Create();
        static auto Create(winrt::Microsoft::Windows::Devices::Midi2::MidiEndpointDeviceInformationFilters const& endpointFilters);
    };
    struct WINRT_IMPL_EMPTY_BASES MidiFunctionBlock : winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock
    {
        MidiFunctionBlock(std::nullptr_t) noexcept {}
        MidiFunctionBlock(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Devices::Midi2::IMidiFunctionBlock(ptr, take_ownership_from_abi) {}
        MidiFunctionBlock();
    };
    struct WINRT_IMPL_EMPTY_BASES MidiGroup : winrt::Microsoft::Windows::Devices::Midi2::IMidiGroup
    {
        MidiGroup(std::nullptr_t) noexcept {}
        MidiGroup(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Devices::Midi2::IMidiGroup(ptr, take_ownership_from_abi) {}
        explicit MidiGroup(uint8_t index);
        [[nodiscard]] static auto ShortLabel();
        [[nodiscard]] static auto LongLabel();
        static auto IsValidIndex(uint8_t index);
    };
    struct WINRT_IMPL_EMPTY_BASES MidiGroupTerminalBlock : winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupTerminalBlock
    {
        MidiGroupTerminalBlock(std::nullptr_t) noexcept {}
        MidiGroupTerminalBlock(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Devices::Midi2::IMidiGroupTerminalBlock(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES MidiMessage128 : winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128,
        impl::require<MidiMessage128, winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket, winrt::Windows::Foundation::IStringable>
    {
        MidiMessage128(std::nullptr_t) noexcept {}
        MidiMessage128(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage128(ptr, take_ownership_from_abi) {}
        MidiMessage128();
        MidiMessage128(uint64_t timestamp, uint32_t word0, uint32_t word1, uint32_t word2, uint32_t word3);
        MidiMessage128(uint64_t timestamp, array_view<uint32_t const> words);
        static auto CreateFromStruct(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct const& message);
    };
    struct WINRT_IMPL_EMPTY_BASES MidiMessage32 : winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32,
        impl::require<MidiMessage32, winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket, winrt::Windows::Foundation::IStringable>
    {
        MidiMessage32(std::nullptr_t) noexcept {}
        MidiMessage32(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage32(ptr, take_ownership_from_abi) {}
        MidiMessage32();
        MidiMessage32(uint64_t timestamp, uint32_t word0);
        static auto CreateFromStruct(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct const& message);
    };
    struct WINRT_IMPL_EMPTY_BASES MidiMessage64 : winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64,
        impl::require<MidiMessage64, winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket, winrt::Windows::Foundation::IStringable>
    {
        MidiMessage64(std::nullptr_t) noexcept {}
        MidiMessage64(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage64(ptr, take_ownership_from_abi) {}
        MidiMessage64();
        MidiMessage64(uint64_t timestamp, uint32_t word0, uint32_t word1);
        MidiMessage64(uint64_t timestamp, array_view<uint32_t const> words);
        static auto CreateFromStruct(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct const& message);
    };
    struct WINRT_IMPL_EMPTY_BASES MidiMessage96 : winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96,
        impl::require<MidiMessage96, winrt::Microsoft::Windows::Devices::Midi2::IMidiUniversalPacket, winrt::Windows::Foundation::IStringable>
    {
        MidiMessage96(std::nullptr_t) noexcept {}
        MidiMessage96(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Devices::Midi2::IMidiMessage96(ptr, take_ownership_from_abi) {}
        MidiMessage96();
        MidiMessage96(uint64_t timestamp, uint32_t word0, uint32_t word1, uint32_t word2);
        MidiMessage96(uint64_t timestamp, array_view<uint32_t const> words);
        static auto CreateFromStruct(uint64_t timestamp, winrt::Microsoft::Windows::Devices::Midi2::MidiMessageStruct const& message);
    };
    struct WINRT_IMPL_EMPTY_BASES MidiMessageReceivedEventArgs : winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventArgs
    {
        MidiMessageReceivedEventArgs(std::nullptr_t) noexcept {}
        MidiMessageReceivedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Devices::Midi2::IMidiMessageReceivedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES MidiSession : winrt::Microsoft::Windows::Devices::Midi2::IMidiSession,
        impl::require<MidiSession, winrt::Windows::Foundation::IClosable>
    {
        MidiSession(std::nullptr_t) noexcept {}
        MidiSession(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Devices::Midi2::IMidiSession(ptr, take_ownership_from_abi) {}
        static auto Create(param::hstring const& sessionName);
    };
}
#endif

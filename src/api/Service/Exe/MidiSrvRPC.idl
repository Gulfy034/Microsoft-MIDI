// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App API and should be used
// in your Windows application via an official binary distribution.
// Further information: https://aka.ms/midi
// ============================================================================

import "oaidl.idl";
import "ocidl.idl";

import "WindowsMidiServices.idl";

cpp_quote("#define MIDISRV_LRPC_PROTOCOL  L\"ncalrpc\"")
cpp_quote("#define MIDISRV_ENDPOINT L\"MidiSrvClientRpc\"")

typedef [system_handle(sh_section)] HANDLE CP_MMAP_HANDLE;
typedef [system_handle(sh_event, 0x001F0003L)] HANDLE CP_EVENT_HANDLE;

// this is used for auto-cleanup of connections and other resources
typedef [context_handle] void * PMIDISRV_CONTEXT_HANDLE;

// temporary test RPC data, to be removed
typedef enum
{
    RequestEntry0 = 0,
    RequestEntry1,
    RequestEntry2,
} RequestEnum;

typedef struct REQUESTED_SETTINGS
{
    GUID Identifier;
    BOOL Flag;
    RequestEnum Request;
} REQUESTED_SETTINGS, *PREQUESTED_SETTINGS;

typedef struct ALLOCATED_SETTINGS
{
    GUID Identifier;
    BOOL Flag;
    RequestEnum Request;
} ALLOCATED_SETTINGS, *PALLOCATED_SETTINGS;
// end temporary test RPC data, to be removed

typedef ULONGLONG MidiClientHandle;

typedef struct MIDISRV_CLIENTCREATION_PARAMS
{
    MidiDataFormat DataFormat;
    MidiFlow     Flow;
    ULONG        BufferSize;
} MIDISRV_CLIENTCREATION_PARAMS, *PMIDISRV_CLIENTCREATION_PARAMS;

typedef struct MIDISRV_CLIENT
{
    CP_EVENT_HANDLE MidiInWriteEvent;
    CP_EVENT_HANDLE MidiOutWriteEvent;

    CP_MMAP_HANDLE MidiInDataFileMapping;
    CP_MMAP_HANDLE MidiInRegisterFileMapping;

    CP_MMAP_HANDLE MidiOutDataFileMapping;
    CP_MMAP_HANDLE MidiOutRegisterFileMapping;

    ULONG MidiInBufferSize;
    ULONG MidiOutBufferSize;

    MidiClientHandle ClientHandle;
    MidiDataFormat DataFormat;
} MIDISRV_CLIENT, *PMIDISRV_CLIENT;

[
    uuid(64839251-9daf-4e79-aa4e-9771c86ffbc1),
    version(1.0),
    pointer_default(unique),
    endpoint("ncalrpc:[MidiSrv]")
]
interface MidiSrvRPC
{
    // Temporary test RPC, to be removed
    HRESULT MidiSrvTestRpc(
        [in] handle_t BindingHandle, 
        [in, string] LPCWSTR Identifier, 
        [in] PREQUESTED_SETTINGS RequestedSettings, 
        [out] PALLOCATED_SETTINGS *AllocatedSettings);


    HRESULT MidiSrvCreateClient(
        [in] handle_t BindingHandle, 
        [in, string] LPCWSTR MidiDevice, 
        [in] PMIDISRV_CLIENTCREATION_PARAMS CreationParams, 
        [in] GUID SessionId, 
        [in] DWORD ClientProcessId,
        [out] PMIDISRV_CLIENT *Client);

    HRESULT MidiSrvDestroyClient(
        [in] handle_t BindingHandle, 
        [in] MidiClientHandle ClientHandle);


    // API-driven configuration

    HRESULT MidiSrvUpdateConfiguration(
        [in] handle_t BindingHandle, 
        [in, string] LPCWSTR ConfigurationJson, 
        [in] BOOL IsFromConfigurationFile,
        [out] BSTR* Response);


    // Session Management and reporting

    HRESULT MidiSrvRegisterSession(
        [in] handle_t BindingHandle, 
        [in] GUID SessionId,
        [in, string] LPCWSTR SessionName,
        [in] DWORD ProcessId,
        [in] LPCWSTR ProcessName,
        [in,out] PMIDISRV_CONTEXT_HANDLE *ContextHandle
    );

    HRESULT MidiSrvUpdateSessionName(
        [in] handle_t BindingHandle,
        [in] PMIDISRV_CONTEXT_HANDLE ContextHandle,
        [in] GUID SessionId,
        [in, string] LPCWSTR SessionName,
        [in] DWORD ProcessId
    );

    HRESULT MidiSrvDeregisterSession(
        [in] handle_t BindingHandle, 
        [in] PMIDISRV_CONTEXT_HANDLE ContextHandle,
        [in] GUID SessionId
    );


    HRESULT MidiSrvGetSessionList(
        [in] handle_t BindingHandle, 
        [out] BSTR* SessionListJson);


    // Abstractions and Transforms metadata reporting only

    HRESULT MidiSrvGetAbstractionList(
        [in] handle_t BindingHandle,
        [out] BSTR* AbstractionListJson);

    HRESULT MidiSrvGetTransformList(
        [in] handle_t BindingHandle,
        [out] BSTR* TransformListJson);

    HRESULT MidiSrvVerifyConnectivity(
        [in] handle_t BindingHandle);

}

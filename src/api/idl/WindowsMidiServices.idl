// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App API and should be used
// in your Windows application via an official binary distribution.
// Further information: https://aka.ms/midi
// ============================================================================

import "unknwn.idl";

import "oaidl.idl";
import "ocidl.idl";


// Enumeration of midi data formats. These are used to communicate both a requested format, and the negotiated format.
typedef enum
{
    MidiDataFormat_Invalid = 0,
    MidiDataFormat_ByteStream = 0x1,
    MidiDataFormat_UMP = 0x2,
    MidiDataFormat_Any = 0x3
} MidiDataFormat;

// Enumeration to communicate the direction of flow of midi data, with respect to the midi peripheral.
typedef enum
{
    MidiFlowIn = 0,
    MidiFlowOut,
    MidiFlowBidirectional
} MidiFlow;

// Structure used during abstraction initialization to communicate format information and other configuration
typedef struct
{
    MidiDataFormat DataFormat;
    LPCWSTR InstanceConfigurationJsonData;
} ABSTRACTIONCREATIONPARAMS, * PABSTRACTIONCREATIONPARAMS;


// This serves as the starting point for activating the various other methods implemented by the abstraction layer. 
[
    object,
    local,
    uuid(EA264200-3328-49E5-8815-73649A8748BE),
    pointer_default(unique)
]
interface IMidiAbstraction : IUnknown
{
    HRESULT Activate(
        [in, annotation("_In_")] REFIID Iid,
        [out, iid_is(Iid), annotation("_COM_Outptr_")] void** Interface
    );
};

// ============================================================================================
// Endpoint types: In/Out/Bidirectional and the Callback

// Used for sending data upstream from an abstraction to a client. Also used in transforms.
[
    object,
        local,
        uuid(4D6A29E5-DF4F-4A2D-A923-9B23B3F2D6F6),
        pointer_default(unique)
]
interface IMidiCallback : IUnknown
{
    HRESULT Callback(
        [in] PVOID message,
        [in] UINT size,
        [in] LONGLONG position,
        [in] LONGLONG context
    );
};

// Represents a MidiIn abstraction instance, which is used to move data from a peripheral upstream to a client
[
    object,
        local,
        uuid(6C4B8BF9-8133-4B41-8303-1FDE78E20ACA),
        pointer_default(unique)
]
interface IMidiIn : IUnknown
{
    HRESULT Initialize(
        [in] LPCWSTR deviceId,
        [in] PABSTRACTIONCREATIONPARAMS creationParams,
        [in] DWORD* mmcssTaskId,
        [in] IMidiCallback* callback,
        [in] LONGLONG context,
        [in] GUID SessionId

    );

    HRESULT Cleanup();
};

// Represents a MidiOut abstraction instance, which is used to move data from a client to the abstraction
[
    object,
    local,
    uuid(F328D645-7D6D-4924-A7E3-9DEE245189F9),
    pointer_default(unique)
]
interface IMidiOut : IUnknown
{
    HRESULT Initialize(
        [in] LPCWSTR deviceId,
        [in] PABSTRACTIONCREATIONPARAMS creationParams,
        [in] DWORD* mmcssTaskId,
        [in] GUID SessionId
    );

    HRESULT Cleanup();

    HRESULT SendMidiMessage(
        [in] PVOID message,
        [in] UINT size,
        [in] LONGLONG position

    );
};

// Represents a bidirectional midi connection, which is used to move data both to and from the midi 
// abstraction. This is the primary interface for MIDI 2.0 endpoint communication.
[
    object,
    local,
    uuid(B89BBB45-7001-4BEA-BBD8-C7CC26E7836C),
    pointer_default(unique)
]
interface IMidiBiDi : IUnknown
{
    HRESULT Initialize(
        [in] LPCWSTR deviceId,
        [in] PABSTRACTIONCREATIONPARAMS creationParams,
        [in] DWORD* mmcssTaskId,
        [in] IMidiCallback* callback,
        [in] LONGLONG context,
        [in] GUID SessionId
    );

    HRESULT Cleanup();

    HRESULT SendMidiMessage(
        [in] PVOID message,
        [in] UINT size,
        [in] LONGLONG position
    );
};


// ============================================================================================
// Endpoint manager in the service


// IMidiEndpointManager is implemented by midi endpoint abstractions, and is called by MidiSrv 
// during service startup to allow the endpoint abstraction to coordinate with MidiSrv for 
// configuring and publishing midi endpoints.
[
    object,
    local,
    uuid(badff6d2-0e3c-4009-a473-6ba82c008662),
    pointer_default(unique)
]
interface IMidiEndpointManager : IUnknown
{
    HRESULT Initialize(
        [in] IUnknown* midiDeviceManager,
        [in] IUnknown* midiEndpointProtocolManager //,
        /*[in] LPCWSTR configurationJson */
    );

    HRESULT Cleanup();
};



// ============================================================================================
// Endpoint management


// If you change these, you should also update
// the WinRT MidiEndpointDevicePurpose enum, which is projected through the WinRT SDK
typedef enum
{
    NormalMessageEndpoint = 0,
    VirtualDeviceResponder = 100,
    InBoxGeneralMidiSynth = 400,
    DiagnosticLoopback = 500,
    DiagnosticPing = 510,
} MidiEndpointDevicePurposePropertyValue;


// Used during endpoint creation to communicate common midi endpoint properties.
typedef struct
{
    GUID AbstractionLayerGuid;
    MidiEndpointDevicePurposePropertyValue EndpointPurpose;

    LPCWSTR FriendlyName;

    LPCWSTR TransportCode;
    LPCWSTR TransportSuppliedEndpointName;
    LPCWSTR TransportSuppliedEndpointDescription;

    LPCWSTR UserSuppliedEndpointName;
    LPCWSTR UserSuppliedEndpointDescription;

    LPCWSTR UniqueIdentifier;
    LPCWSTR ManufacturerName;

    MidiDataFormat SupportedDataFormats;
    BYTE NativeDataFormat;

    BOOL SupportsMidi1ProtocolDefaultValue;
    BOOL SupportsMidi2ProtocolDefaultValue;

    BOOL SupportsMultiClient;
    BOOL RequiresMetadataHandler;
    BOOL GenerateIncomingTimestamps;
} MIDIENDPOINTCOMMONPROPERTIES, * PMIDIENDPOINTCOMMONPROPERTIES;

// Used for communicating midi endpoint information from an abstraction to MidiSrv, for publishing the endpoint.
[
    object,
        local,
        uuid(A04374D3-4514-44E1-A2F9-7D8B907AEF1F),
        pointer_default(unique)
]
interface IMidiDeviceManagerInterface : IUnknown
{

    HRESULT ActivateVirtualParentDevice(
        [in] ULONG DevPropertyCount,
        [in, annotation("_In_opt_")] PVOID DevProperties,
        [in, annotation("_In_")] PVOID CreateInfo,
        [out, annotation("_Out_writes_opt_z_(CreatedSwDeviceIdCharCount)")] LPWSTR CreatedSwDeviceId,
        [in] ULONG CreatedSwDeviceIdCharCount
    );


    HRESULT ActivateEndpoint(
        [in] LPCWSTR ParentInstanceId,
        [in] BOOL UMPOnly,
        [in] MidiFlow MidiFlow,
        [in] PMIDIENDPOINTCOMMONPROPERTIES CommonProperties,
        [in] ULONG IntPropertyCount,
        [in] ULONG DevPropertyCount,
        [in, annotation("_In_opt_")] PVOID InterfaceDevProperties,
        [in, annotation("_In_opt_")] PVOID DeviceDevProperties,
        [in, annotation("_In_opt_")] PVOID CreateInfo,
        [out, annotation("_Out_writes_opt_z_(CreatedSwDeviceInterfaceIdWCharCount)")] LPWSTR CreatedSwDeviceInterfaceId,
        [in] ULONG CreatedSwDeviceInterfaceIdWCharCount
    );

    HRESULT UpdateEndpointProperties(
        [in] LPCWSTR DeviceInterfaceId,
        [in] ULONG IntPropertyCount,
        [in, annotation("_In_")] PVOID InterfaceDevProperties
    );

    HRESULT DeleteEndpointProperties(
        [in] LPCWSTR DeviceInterfaceId,
        [in] ULONG IntPropertyCount,
        [in, annotation("_In_")] PVOID DevPropKeys
    );

    HRESULT DeactivateEndpoint(
        [in] LPCWSTR InstanceId
    );

    HRESULT RemoveEndpoint(
        [in] LPCWSTR InstanceId
    );


    // Update the configuration for an abstraction or endpoints managed by that abstraction
    HRESULT UpdateAbstractionConfiguration(
        [in] GUID AbstractionId,
        [in] LPCWSTR ConfigurationJson,
        [in] BOOL IsFromConfigurationFile,
        [out] BSTR* Response
    );


};




// ============================================================================================
// Service (and Abstraction/Transform) Configuration

// Provides common functionality implemented in the service, and used by abstractions and transforms
[
    object,
    local,
    uuid(6c21fcda-051b-4f06-8d40-f5bced5957c0),
    pointer_default(unique)
]
interface IMidiServiceConfigurationManagerInterface : IUnknown
{
    // these parse provided json

    HRESULT GetAbstractionCreateActionJsonObject(
        [in] LPCWSTR sourceAbstractionJson,
        [out] BSTR* responseJson
    );

    HRESULT GetAbstractionUpdateActionJsonObject(
        [in] LPCWSTR sourceAbstractionJson,
        [out] BSTR* responseJson
    );

    HRESULT GetAbstractionRemoveActionJsonObject(
        [in] LPCWSTR sourceAbstractionJson,
        [out] BSTR* responseJson
    );

    HRESULT GetAbstractionMatchingEndpointJsonObject(
        [in] LPCWSTR sourceActionObjectJson,
        [in] LPCWSTR searchKeyValuePairsJson,
        [out] BSTR* responseJson
    );


    // these get cached entries from the config file. This is
    // needed for cases when the configuration happens before
    // the abstraction has actually created the device interface

    HRESULT GetAndPurgeConfigFileAbstractionEndpointUpdateJsonObject(
        [in] GUID abstractionId,
        [in] LPCWSTR searchKeyValuePairsJson,
        [out] BSTR* responseJson
    );

};

// Used for sending configuration information to the abstraction from a client (for runtime updates) 
// or from the device manager in the service (for global configuration file updates), which may 
// affect the published endpoints
// 
// we're going to want one of these for transforms, but it needs to have
// enough context to be able to target a specific instance of a transform
// for a specific device
[
    object,
    local,
    uuid(f19dd642-1809-4497-9eee-f230b11bd6fb),
    pointer_default(unique)
]
interface IMidiAbstractionConfigurationManager : IUnknown
{
    HRESULT Initialize(
        [in] GUID abstractionId,
        [in] IUnknown* midiDeviceManager,
        [in] IUnknown* midiServiceConfigurationManager
    );

    HRESULT UpdateConfiguration(
        [in] LPCWSTR configurationJsonSection,
        [in] BOOL IsFromConfigurationFile,
        [out] BSTR* response
    );

    HRESULT Cleanup();
};



// ============================================================================================
// Message transformation

// Configuration parameters for initializing the transform
typedef struct
{
    MidiDataFormat DataFormatIn;
    MidiDataFormat DataFormatOut;
    LPCWSTR InstanceConfigurationJsonData;
} TRANSFORMCREATIONPARAMS, * PTRANSFORMCREATIONPARAMS;

// All MidiTransform COM components implement the IMidiTransform interface, which contains
// only a single Activate method. This serves as the starting point for activating the various
// other methods implemented by the transforms
[
    object,
        local,
        uuid(65FA86A4-0433-4DCD-88E4-E565051CAB2D),
        pointer_default(unique)
]
interface IMidiTransform : IUnknown
{
    HRESULT Activate(
        [in, annotation("_In_")] REFIID Iid,
        [out, iid_is(Iid), annotation("_COM_Outptr_")] void** Interface
    );
};

// Represent a midi transform operation which is happening on a stream of midi data
[
    object,
        local,
        uuid(5D2400F0-F2EE-4A51-A3BE-0AC9A19C09C4),
        pointer_default(unique)
]
interface IMidiDataTransform : IUnknown
{
    HRESULT Initialize(
        [in] LPCWSTR deviceId,
        [in] PTRANSFORMCREATIONPARAMS creationParams,
        [in] DWORD* mmcssTaskId,
        [in] IMidiCallback* callback,
        [in] LONGLONG context,
        [in] IUnknown* midiDeviceManager
    );

    HRESULT Cleanup();

    HRESULT SendMidiMessage(
        [in] PVOID message,
        [in] UINT size,
        [in] LONGLONG position
    );
};



// ============================================================================================
// MIDI 2.0 Endpoint Discovery and Protocol Negotiation

// Represents a single function block discovered from a MIDI 2.0 device during discovery and protocol negotiation
typedef struct
{
    BYTE Number;
    BYTE FirstGroup;
    BYTE NumberOfGroupsSpanned;
    BOOL IsActive;
    BOOL IsMIDIMessageDestination;  // if clients can send messages TO this block. We should create a MIDI 1.0 output port
    BOOL IsMIDIMessageSource;       // if clients can receive messages FROM this block. We should create a MIDI 1.0 input port
    LPCWSTR Name;                   // this type is only used within the service process, so string pointers are fine
} DISCOVEREDFUNCTIONBLOCK, *PDISCOVEREDFUNCTIONBLOCK;

// Used between the MIDI Service and the loaded MIDI 2.0 abstractions. This contains the
// results of the required MIDI 2.0 discovery and protocol negotiation steps, and is used
// to inform the creation of the backwards-compatible API endpoints for these devices.
// 
// this only contains key info required by the endpoint managers
// so they can create compatible MIDI 1.0 ports from the results
// from MIDI 2.0 protocol negotiation. This is not sent over RPC
// or otherwise used cross-process. In-service only.
typedef struct
{
    BOOL AllEndpointInformationReceived;

    BOOL EndpointSupportsMIDI2Protocol;
    BOOL EndpointSupportsMIDI1Protocol;

    LPCWSTR EndpointSuppliedName;
    LPCWSTR EndpointSuppliedProductInstanceId;

    BYTE CountFunctionBlocksDeclared;
    BYTE CountFunctionBlocksReceived;
    BOOL FunctionBlocksAreStatic;

    PDISCOVEREDFUNCTIONBLOCK DiscoveredFunctionBlocks;  // pointer to an array of discovered function blocks. 

}  ENDPOINTPROTOCOLNEGOTIATIONRESULTS, *PENDPOINTPROTOCOLNEGOTIATIONRESULTS;

// The service's input into the protocol negotiation process for a single endpoint
typedef struct
{
    BOOL PreferToSendJRTimestampsToEndpoint;
    BOOL PreferToReceiveJRTimestampsFromEndpoint;
    BYTE PreferredMidiProtocol;
    WORD TimeoutMilliseconds;
} ENDPOINTPROTOCOLNEGOTIATIONPARAMS, *PENDPOINTPROTOCOLNEGOTIATIONPARAMS;

// During discovery and protocol negotiation, the service receives the initial
// metadata from the endpoint. This metadata may used to create the 
// backwards-compatible MIDI 1.0 ports. The callback enables the process to 
// provide those initial results and then continue watching for metadata for 
// the lifetime of the service.
[
    object,
        local,
        uuid(f948dc64-e03a-4e24-bc6e-437ad729cd50),
        pointer_default(unique)
]
interface IMidiProtocolNegotiationCompleteCallback : IUnknown
{
    HRESULT ProtocolNegotiationCompleteCallback(
        [in] GUID AbstractionGuid,
        [in] LPCWSTR DeviceInterfaceId,
        [in] PENDPOINTPROTOCOLNEGOTIATIONRESULTS Results
    );
};

// Endpoint abstractions for MIDI 2.0 devices need to access the protocol 
// manager in the service. This interface facilitates that.
[
    object,
    local,
    uuid(7a3def20-fb76-49b6-a3a0-3dcbcda8f482),
    pointer_default(unique)
]
interface IMidiEndpointProtocolManagerInterface : IUnknown
{
    HRESULT DiscoverAndNegotiate(
        [in] GUID AbstractionGuid,
        [in] LPCWSTR DeviceInterfaceId,
        [in] ENDPOINTPROTOCOLNEGOTIATIONPARAMS NegotiationParams,
        [in] IMidiProtocolNegotiationCompleteCallback* NegotiationCompleteCallback
    );


};






// ============================================================================================
// Service Plugin Reporting

// Information provided by the abstraction to self-identify itself to the user. This 
// information is supplied through the diagnostics and reporting SDK primarily to the MIDI 
// Settings and MIDI Console apps. 
typedef struct
{
    GUID Id;            // class Id
    LPCWSTR TransportCode;   // this comes from a constant, not resources

    BSTR Name;
    BSTR Description;
    BSTR Author;

    BSTR SmallImagePath;

    BSTR Version;

    BOOL IsRuntimeCreatableByApps;
    BOOL IsRuntimeCreatableBySettings;

    BOOL IsSystemManaged;
    BOOL IsClientConfigurable;
} ABSTRACTIONMETADATA, * PABSTRACTIONMETADATA;


// Information provided by the transform to self-identify itself to the user. This 
// information is supplied through the diagnostics and reporting SDK primarily to 
// the MIDI Settings and MIDI Console apps. 
typedef struct
{
    GUID Id;           // class Id

    BSTR Name;
    BSTR Description;
    BSTR Author;

    BSTR SmallImagePath;

    BSTR Version;

    BOOL IsRuntimeCreatableByApps;
    BOOL IsRuntimeCreatableBySettings;

    BOOL IsSystemManaged;
    BOOL IsClientConfigurable;
} TRANSFORMMETADATA, * PTRANSFORMMETADATA;

// Interface used to obtain the abstraction metadata for reporting to the user. 
// This is implemented by each abstraction in the service.
[
    object,
        local,
        uuid(8d542740-83f8-4a9a-8627-cd6324b6c1f4),
        pointer_default(unique)
]
interface IMidiServiceAbstractionPluginMetadataProvider : IUnknown
{
    HRESULT Initialize();

    HRESULT GetMetadata(
        [out] PABSTRACTIONMETADATA metadata
    );

    HRESULT Cleanup();
};

// Interface used to obtain the transform metadata for reporting to the user. 
// This is implemented by each transform in the service.
[
    object,
        local,
        uuid(76c65f88-061f-4e4f-bb9d-3ac1981f12f2),
        pointer_default(unique)
]
interface IMidiServiceTransformPluginMetadataProvider : IUnknown
{
    HRESULT Initialize();

    HRESULT GetMetadata(
        [out] PTRANSFORMMETADATA metadata
    );

    HRESULT Cleanup();
};

// Used by the client to request the abstraction and transform metadata.
[
    object,
        local,
        uuid(469c7722-f779-40c3-b648-52620f75dcee),
        pointer_default(unique)
]
interface IMidiServicePluginMetadataReporterInterface : IUnknown
{
    HRESULT GetAbstractionList(
        [out] BSTR* AbstractionListJson);

    HRESULT GetTransformList(
        [out] BSTR* TransformListJson);

};



// ============================================================================================
// Session Tracking / Reporting

// Used to register client API sessions so that a user may have visibility into which 
// application is using which devices.
// This is a bookkeeping class. It tracks only. It does not own the lifetime of any of the items it tracks.
[
    object,
        local,
        uuid(194c2746-3ae5-419a-94d9-20416c7dbefe),
        pointer_default(unique)
]
interface IMidiSessionTracker : IUnknown
{
    HRESULT Initialize();

    HRESULT AddClientSession(
        [in] GUID SessionId,
        [in] LPCWSTR SessionName
    );

    HRESULT UpdateClientSessionName(
        [in] GUID SessionId,
        [in] LPCWSTR SessionName,
        [in] DWORD ClientProcessId
    );

    HRESULT RemoveClientSession(
        [in] GUID SessionId
    );

    HRESULT GetSessionList(
        [out] BSTR* SessionDetailsList);

    // TODO: May want to move this to an interface that deals with connection health/tracking
    HRESULT VerifyConnectivity();

    HRESULT Cleanup();
};
